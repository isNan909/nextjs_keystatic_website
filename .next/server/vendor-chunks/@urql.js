"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@urql";
exports.ids = ["vendor-chunks/@urql"];
exports.modules = {

/***/ "(ssr)/./node_modules/@urql/core/dist/urql-core-chunk.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@urql/core/dist/urql-core-chunk.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ CombinedError),\n/* harmony export */   a: () => (/* binding */ makeFetchBody),\n/* harmony export */   b: () => (/* binding */ makeErrorResult),\n/* harmony export */   c: () => (/* binding */ mergeResultPatch),\n/* harmony export */   d: () => (/* binding */ makeFetchURL),\n/* harmony export */   e: () => (/* binding */ makeFetchOptions),\n/* harmony export */   f: () => (/* binding */ makeFetchSource),\n/* harmony export */   g: () => (/* binding */ getOperationType),\n/* harmony export */   h: () => (/* binding */ createRequest),\n/* harmony export */   i: () => (/* binding */ stringifyVariables),\n/* harmony export */   k: () => (/* binding */ keyDocument),\n/* harmony export */   m: () => (/* binding */ makeResult),\n/* harmony export */   s: () => (/* binding */ stringifyDocument)\n/* harmony export */ });\n/* harmony import */ var _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @0no-co/graphql.web */ \"(ssr)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs\");\n/* harmony import */ var wonka__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wonka */ \"(ssr)/./node_modules/wonka/dist/wonka.mjs\");\n\n\nvar rehydrateGraphQlError = (e)=>{\n    if (e && e.message && (e.extensions || \"GraphQLError\" === e.name)) {\n        return e;\n    } else if (\"object\" == typeof e && e.message) {\n        return new _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.GraphQLError(e.message, e.nodes, e.source, e.positions, e.path, e, e.extensions || {});\n    } else {\n        return new _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.GraphQLError(e);\n    }\n};\nclass CombinedError extends Error {\n    constructor(r){\n        var e = (r.graphQLErrors || []).map(rehydrateGraphQlError);\n        var t = ((r, e)=>{\n            var t = \"\";\n            if (r) {\n                return `[Network] ${r.message}`;\n            }\n            if (e) {\n                for (var a of e){\n                    if (t) {\n                        t += \"\\n\";\n                    }\n                    t += `[GraphQL] ${a.message}`;\n                }\n            }\n            return t;\n        })(r.networkError, e);\n        super(t);\n        this.name = \"CombinedError\";\n        this.message = t;\n        this.graphQLErrors = e;\n        this.networkError = r.networkError;\n        this.response = r.response;\n    }\n    toString() {\n        return this.message;\n    }\n}\nvar phash = (r, e)=>{\n    var t = 0 | (e || 5381);\n    for(var a = 0, o = 0 | r.length; a < o; a++){\n        t = (t << 5) + t + r.charCodeAt(a);\n    }\n    return t;\n};\nvar i = new Set;\nvar f = new WeakMap;\nvar stringify = (r)=>{\n    if (null === r || i.has(r)) {\n        return \"null\";\n    } else if (\"object\" != typeof r) {\n        return JSON.stringify(r) || \"\";\n    } else if (r.toJSON) {\n        return stringify(r.toJSON());\n    } else if (Array.isArray(r)) {\n        var e = \"[\";\n        for (var t of r){\n            if (e.length > 1) {\n                e += \",\";\n            }\n            e += stringify(t) || \"null\";\n        }\n        return e += \"]\";\n    } else if (v !== NoopConstructor && r instanceof v || l !== NoopConstructor && r instanceof l) {\n        return \"null\";\n    }\n    var a = Object.keys(r).sort();\n    if (!a.length && r.constructor && Object.getPrototypeOf(r).constructor !== Object.prototype.constructor) {\n        var o = f.get(r) || Math.random().toString(36).slice(2);\n        f.set(r, o);\n        return stringify({\n            __key: o\n        });\n    }\n    i.add(r);\n    var n = \"{\";\n    for (var s of a){\n        var c = stringify(r[s]);\n        if (c) {\n            if (n.length > 1) {\n                n += \",\";\n            }\n            n += stringify(s) + \":\" + c;\n        }\n    }\n    i.delete(r);\n    return n += \"}\";\n};\nvar extract = (r, e, t)=>{\n    if (null == t || \"object\" != typeof t || t.toJSON || i.has(t)) {} else if (Array.isArray(t)) {\n        for(var a = 0, o = t.length; a < o; a++){\n            extract(r, `${e}.${a}`, t[a]);\n        }\n    } else if (t instanceof v || t instanceof l) {\n        r.set(e, t);\n    } else {\n        i.add(t);\n        for (var n of Object.keys(t)){\n            extract(r, `${e}.${n}`, t[n]);\n        }\n    }\n};\nvar stringifyVariables = (r)=>{\n    i.clear();\n    return stringify(r);\n};\nclass NoopConstructor {\n}\nvar v = \"undefined\" != typeof File ? File : NoopConstructor;\nvar l = \"undefined\" != typeof Blob ? Blob : NoopConstructor;\nvar c = /(\"{3}[\\s\\S]*\"{3}|\"(?:\\\\.|[^\"])*\")/g;\nvar p = /(?:#[^\\n\\r]+)?(?:[\\r\\n]+|$)/g;\nvar replaceOutsideStrings = (r, e)=>e % 2 == 0 ? r.replace(p, \"\\n\") : r;\nvar sanitizeDocument = (r)=>r.split(c).map(replaceOutsideStrings).join(\"\").trim();\nvar d = new Map;\nvar u = new Map;\nvar stringifyDocument = (r)=>{\n    var t;\n    if (\"string\" == typeof r) {\n        t = sanitizeDocument(r);\n    } else if (r.loc && u.get(r.__key) === r) {\n        t = r.loc.source.body;\n    } else {\n        t = d.get(r) || sanitizeDocument((0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.print)(r));\n        d.set(r, t);\n    }\n    if (\"string\" != typeof r && !r.loc) {\n        r.loc = {\n            start: 0,\n            end: t.length,\n            source: {\n                body: t,\n                name: \"gql\",\n                locationOffset: {\n                    line: 1,\n                    column: 1\n                }\n            }\n        };\n    }\n    return t;\n};\nvar hashDocument = (r)=>{\n    var e = phash(stringifyDocument(r));\n    if (r.definitions) {\n        var t = getOperationName(r);\n        if (t) {\n            e = phash(`\\n# ${t}`, e);\n        }\n    }\n    return e;\n};\nvar keyDocument = (r)=>{\n    var e;\n    var a;\n    if (\"string\" == typeof r) {\n        e = hashDocument(r);\n        a = u.get(e) || (0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.parse)(r, {\n            noLocation: !0\n        });\n    } else {\n        e = r.__key || hashDocument(r);\n        a = u.get(e) || r;\n    }\n    if (!a.loc) {\n        stringifyDocument(a);\n    }\n    a.__key = e;\n    u.set(e, a);\n    return a;\n};\nvar createRequest = (r, e, t)=>{\n    var a = e || {};\n    var o = keyDocument(r);\n    var n = stringifyVariables(a);\n    var s = o.__key;\n    if (\"{}\" !== n) {\n        s = phash(n, s);\n    }\n    return {\n        key: s,\n        query: o,\n        variables: a,\n        extensions: t\n    };\n};\nvar getOperationName = (r)=>{\n    for (var e of r.definitions){\n        if (e.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.OPERATION_DEFINITION) {\n            return e.name ? e.name.value : void 0;\n        }\n    }\n};\nvar getOperationType = (r)=>{\n    for (var e of r.definitions){\n        if (e.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.OPERATION_DEFINITION) {\n            return e.operation;\n        }\n    }\n};\nvar makeResult = (r, e, t)=>{\n    if (!(\"data\" in e || \"errors\" in e && Array.isArray(e.errors))) {\n        throw new Error(\"No Content\");\n    }\n    var a = \"subscription\" === r.kind;\n    return {\n        operation: r,\n        data: e.data,\n        error: Array.isArray(e.errors) ? new CombinedError({\n            graphQLErrors: e.errors,\n            response: t\n        }) : void 0,\n        extensions: e.extensions ? {\n            ...e.extensions\n        } : void 0,\n        hasNext: null == e.hasNext ? a : e.hasNext,\n        stale: !1\n    };\n};\nvar deepMerge = (r, e)=>{\n    if (\"object\" == typeof r && null != r) {\n        if (!r.constructor || r.constructor === Object || Array.isArray(r)) {\n            r = Array.isArray(r) ? [\n                ...r\n            ] : {\n                ...r\n            };\n            for (var t of Object.keys(e)){\n                r[t] = deepMerge(r[t], e[t]);\n            }\n            return r;\n        }\n    }\n    return e;\n};\nvar mergeResultPatch = (r, e, t, a)=>{\n    var o = r.error ? r.error.graphQLErrors : [];\n    var n = !!r.extensions || !!e.extensions;\n    var s = {\n        ...r.extensions,\n        ...e.extensions\n    };\n    var i = e.incremental;\n    if (\"path\" in e) {\n        i = [\n            e\n        ];\n    }\n    var f = {\n        data: r.data\n    };\n    if (i) {\n        var _loop = function(r) {\n            if (Array.isArray(r.errors)) {\n                o.push(...r.errors);\n            }\n            if (r.extensions) {\n                Object.assign(s, r.extensions);\n                n = !0;\n            }\n            var e = \"data\";\n            var t = f;\n            var i = [];\n            if (r.path) {\n                i = r.path;\n            } else if (a) {\n                var v = a.find((e)=>e.id === r.id);\n                if (r.subPath) {\n                    i = [\n                        ...v.path,\n                        ...r.subPath\n                    ];\n                } else {\n                    i = v.path;\n                }\n            }\n            for(var l = 0, c = i.length; l < c; e = i[l++]){\n                t = t[e] = Array.isArray(t[e]) ? [\n                    ...t[e]\n                ] : {\n                    ...t[e]\n                };\n            }\n            if (r.items) {\n                var p = +e >= 0 ? e : 0;\n                for(var d = 0, u = r.items.length; d < u; d++){\n                    t[p + d] = deepMerge(t[p + d], r.items[d]);\n                }\n            } else if (void 0 !== r.data) {\n                t[e] = deepMerge(t[e], r.data);\n            }\n        };\n        for (var v of i){\n            _loop(v);\n        }\n    } else {\n        f.data = e.data || r.data;\n        o = e.errors || o;\n    }\n    return {\n        operation: r.operation,\n        data: f.data,\n        error: o.length ? new CombinedError({\n            graphQLErrors: o,\n            response: t\n        }) : void 0,\n        extensions: n ? s : void 0,\n        hasNext: null != e.hasNext ? e.hasNext : r.hasNext,\n        stale: !1\n    };\n};\nvar makeErrorResult = (r, e, t)=>({\n        operation: r,\n        data: void 0,\n        error: new CombinedError({\n            networkError: e,\n            response: t\n        }),\n        extensions: void 0,\n        hasNext: !1,\n        stale: !1\n    });\nfunction makeFetchBody(r) {\n    return {\n        query: r.extensions && r.extensions.persistedQuery && !r.extensions.persistedQuery.miss ? void 0 : stringifyDocument(r.query),\n        operationName: getOperationName(r.query),\n        variables: r.variables || void 0,\n        extensions: r.extensions\n    };\n}\nvar makeFetchURL = (r, e)=>{\n    var t = \"query\" === r.kind && r.context.preferGetMethod;\n    if (!t || !e) {\n        return r.context.url;\n    }\n    var a = new URL(r.context.url);\n    for(var o in e){\n        var n = e[o];\n        if (n) {\n            a.searchParams.set(o, \"object\" == typeof n ? stringifyVariables(n) : n);\n        }\n    }\n    var s = a.toString();\n    if (s.length > 2047 && \"force\" !== t) {\n        r.context.preferGetMethod = !1;\n        return r.context.url;\n    }\n    return s;\n};\nvar serializeBody = (r, e)=>{\n    if (e && !(\"query\" === r.kind && !!r.context.preferGetMethod)) {\n        var t = stringifyVariables(e);\n        var a = ((r)=>{\n            var e = new Map;\n            if (v !== NoopConstructor || l !== NoopConstructor) {\n                i.clear();\n                extract(e, \"variables\", r);\n            }\n            return e;\n        })(e.variables);\n        if (a.size) {\n            var o = new FormData;\n            o.append(\"operations\", t);\n            o.append(\"map\", stringifyVariables({\n                ...[\n                    ...a.keys()\n                ].map((r)=>[\n                        r\n                    ])\n            }));\n            var n = 0;\n            for (var s of a.values()){\n                o.append(\"\" + n++, s);\n            }\n            return o;\n        }\n        return t;\n    }\n};\nvar makeFetchOptions = (r, e)=>{\n    var t = {\n        accept: \"subscription\" === r.kind ? \"text/event-stream, multipart/mixed\" : \"application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed\"\n    };\n    var a = (\"function\" == typeof r.context.fetchOptions ? r.context.fetchOptions() : r.context.fetchOptions) || {};\n    if (a.headers) {\n        for(var o in a.headers){\n            t[o.toLowerCase()] = a.headers[o];\n        }\n    }\n    var n = serializeBody(r, e);\n    if (\"string\" == typeof n && !t[\"content-type\"]) {\n        t[\"content-type\"] = \"application/json\";\n    }\n    return {\n        ...a,\n        method: n ? \"POST\" : \"GET\",\n        body: n,\n        headers: t\n    };\n};\nvar y = \"undefined\" != typeof TextDecoder ? new TextDecoder : null;\nvar h = /boundary=\"?([^=\";]+)\"?/i;\nvar x = /data: ?([^\\n]+)/;\nvar toString = (r)=>\"Buffer\" === r.constructor.name ? r.toString() : y.decode(r);\nasync function* streamBody(r) {\n    if (r.body[Symbol.asyncIterator]) {\n        for await (var e of r.body){\n            yield toString(e);\n        }\n    } else {\n        var t = r.body.getReader();\n        var a;\n        try {\n            while(!(a = await t.read()).done){\n                yield toString(a.value);\n            }\n        } finally{\n            t.cancel();\n        }\n    }\n}\nasync function* split(r, e) {\n    var t = \"\";\n    var a;\n    for await (var o of r){\n        t += o;\n        while((a = t.indexOf(e)) > -1){\n            yield t.slice(0, a);\n            t = t.slice(a + e.length);\n        }\n    }\n}\nasync function* fetchOperation(r, e, t) {\n    var a = !0;\n    var o = null;\n    var n;\n    try {\n        yield await Promise.resolve();\n        var s = (n = await (r.context.fetch || fetch)(e, t)).headers.get(\"Content-Type\") || \"\";\n        var i;\n        if (/multipart\\/mixed/i.test(s)) {\n            i = async function* parseMultipartMixed(r, e) {\n                var t = r.match(h);\n                var a = \"--\" + (t ? t[1] : \"-\");\n                var o = !0;\n                var n;\n                for await (var s of split(streamBody(e), \"\\r\\n\" + a)){\n                    if (o) {\n                        o = !1;\n                        var i = s.indexOf(a);\n                        if (i > -1) {\n                            s = s.slice(i + a.length);\n                        } else {\n                            continue;\n                        }\n                    }\n                    try {\n                        yield n = JSON.parse(s.slice(s.indexOf(\"\\r\\n\\r\\n\") + 4));\n                    } catch (r) {\n                        if (!n) {\n                            throw r;\n                        }\n                    }\n                    if (n && !1 === n.hasNext) {\n                        break;\n                    }\n                }\n                if (n && !1 !== n.hasNext) {\n                    yield {\n                        hasNext: !1\n                    };\n                }\n            }(s, n);\n        } else if (/text\\/event-stream/i.test(s)) {\n            i = async function* parseEventStream(r) {\n                var e;\n                for await (var t of split(streamBody(r), \"\\n\\n\")){\n                    var a = t.match(x);\n                    if (a) {\n                        var o = a[1];\n                        try {\n                            yield e = JSON.parse(o);\n                        } catch (r) {\n                            if (!e) {\n                                throw r;\n                            }\n                        }\n                        if (e && !1 === e.hasNext) {\n                            break;\n                        }\n                    }\n                }\n                if (e && !1 !== e.hasNext) {\n                    yield {\n                        hasNext: !1\n                    };\n                }\n            }(n);\n        } else if (!/text\\//i.test(s)) {\n            i = async function* parseJSON(r) {\n                yield JSON.parse(await r.text());\n            }(n);\n        } else {\n            i = async function* parseMaybeJSON(r) {\n                var e = await r.text();\n                try {\n                    var t = JSON.parse(e);\n                    if (true) {\n                        console.warn('Found response with content-type \"text/plain\" but it had a valid \"application/json\" response.');\n                    }\n                    yield t;\n                } catch (r) {\n                    throw new Error(e);\n                }\n            }(n);\n        }\n        var f;\n        for await (var v of i){\n            if (v.pending && !o) {\n                f = v.pending;\n            } else if (v.pending) {\n                f = [\n                    ...f,\n                    ...v.pending\n                ];\n            }\n            o = o ? mergeResultPatch(o, v, n, f) : makeResult(r, v, n);\n            a = !1;\n            yield o;\n            a = !0;\n        }\n        if (!o) {\n            yield o = makeResult(r, {}, n);\n        }\n    } catch (e) {\n        if (!a) {\n            throw e;\n        }\n        yield makeErrorResult(r, n && (n.status < 200 || n.status >= 300) && n.statusText ? new Error(n.statusText) : e, n);\n    }\n}\nfunction makeFetchSource(r, e, t) {\n    var a;\n    if (\"undefined\" != typeof AbortController) {\n        t.signal = (a = new AbortController).signal;\n    }\n    return (0,wonka__WEBPACK_IMPORTED_MODULE_1__.onEnd)(()=>{\n        if (a) {\n            a.abort();\n        }\n    })((0,wonka__WEBPACK_IMPORTED_MODULE_1__.filter)((r)=>!!r)((0,wonka__WEBPACK_IMPORTED_MODULE_1__.fromAsyncIterable)(fetchOperation(r, e, t))));\n}\n //# sourceMappingURL=urql-core-chunk.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@urql/core/dist/urql-core-chunk.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@urql/core/dist/urql-core.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@urql/core/dist/urql-core.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ C),\n/* harmony export */   CombinedError: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   cacheExchange: () => (/* binding */ cacheExchange),\n/* harmony export */   composeExchanges: () => (/* binding */ composeExchanges),\n/* harmony export */   createClient: () => (/* binding */ j),\n/* harmony export */   createRequest: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   debugExchange: () => (/* binding */ debugExchange),\n/* harmony export */   dedupExchange: () => (/* binding */ dedupExchange),\n/* harmony export */   errorExchange: () => (/* binding */ mapExchange),\n/* harmony export */   fetchExchange: () => (/* binding */ fetchExchange),\n/* harmony export */   formatDocument: () => (/* binding */ formatDocument),\n/* harmony export */   gql: () => (/* binding */ gql),\n/* harmony export */   makeErrorResult: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   makeOperation: () => (/* binding */ makeOperation),\n/* harmony export */   makeResult: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   mapExchange: () => (/* binding */ mapExchange),\n/* harmony export */   maskTypename: () => (/* binding */ maskTypename),\n/* harmony export */   mergeResultPatch: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   ssrExchange: () => (/* binding */ ssrExchange),\n/* harmony export */   stringifyDocument: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   stringifyVariables: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   subscriptionExchange: () => (/* binding */ subscriptionExchange)\n/* harmony export */ });\n/* harmony import */ var _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @0no-co/graphql.web */ \"(ssr)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs\");\n/* harmony import */ var _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./urql-core-chunk.mjs */ \"(ssr)/./node_modules/@urql/core/dist/urql-core-chunk.mjs\");\n/* harmony import */ var wonka__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! wonka */ \"(ssr)/./node_modules/wonka/dist/wonka.mjs\");\n\n\n\n\nvar collectTypes = (e, r)=>{\n    if (Array.isArray(e)) {\n        for (var t of e){\n            collectTypes(t, r);\n        }\n    } else if (\"object\" == typeof e && null !== e) {\n        for(var n in e){\n            if (\"__typename\" === n && \"string\" == typeof e[n]) {\n                r.add(e[n]);\n            } else {\n                collectTypes(e[n], r);\n            }\n        }\n    }\n    return r;\n};\nvar formatNode = (r)=>{\n    if (\"definitions\" in r) {\n        var t = [];\n        for (var n of r.definitions){\n            var a = formatNode(n);\n            t.push(a);\n        }\n        return {\n            ...r,\n            definitions: t\n        };\n    }\n    if (\"directives\" in r && r.directives && r.directives.length) {\n        var o = [];\n        var i = {};\n        for (var s of r.directives){\n            var c = s.name.value;\n            if (\"_\" !== c[0]) {\n                o.push(s);\n            } else {\n                c = c.slice(1);\n            }\n            i[c] = s;\n        }\n        r = {\n            ...r,\n            directives: o,\n            _directives: i\n        };\n    }\n    if (\"selectionSet\" in r) {\n        var u = [];\n        var p = r.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION;\n        if (r.selectionSet) {\n            for (var d of r.selectionSet.selections || []){\n                p = p || d.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD && \"__typename\" === d.name.value && !d.alias;\n                var v = formatNode(d);\n                u.push(v);\n            }\n            if (!p) {\n                u.push({\n                    kind: _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD,\n                    name: {\n                        kind: _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.NAME,\n                        value: \"__typename\"\n                    },\n                    _generated: !0\n                });\n            }\n            return {\n                ...r,\n                selectionSet: {\n                    ...r.selectionSet,\n                    selections: u\n                }\n            };\n        }\n    }\n    return r;\n};\nvar I = new Map;\nvar formatDocument = (e)=>{\n    var t = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(e);\n    var n = I.get(t.__key);\n    if (!n) {\n        I.set(t.__key, n = formatNode(t));\n        Object.defineProperty(n, \"__key\", {\n            value: t.__key,\n            enumerable: !1\n        });\n    }\n    return n;\n};\nvar maskTypename = (e, r)=>{\n    if (!e || \"object\" != typeof e) {\n        return e;\n    } else if (Array.isArray(e)) {\n        return e.map((e)=>maskTypename(e));\n    } else if (e && \"object\" == typeof e && (r || \"__typename\" in e)) {\n        var t = {};\n        for(var n in e){\n            if (\"__typename\" === n) {\n                Object.defineProperty(t, \"__typename\", {\n                    enumerable: !1,\n                    value: e.__typename\n                });\n            } else {\n                t[n] = maskTypename(e[n]);\n            }\n        }\n        return t;\n    } else {\n        return e;\n    }\n};\nfunction withPromise(e) {\n    var source$ = (r)=>e(r);\n    source$.toPromise = ()=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.toPromise)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.take)(1)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>!e.stale && !e.hasNext)(source$)));\n    source$.then = (e, r)=>source$.toPromise().then(e, r);\n    source$.subscribe = (e)=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.subscribe)(e)(source$);\n    return source$;\n}\nfunction makeOperation(e, r, t) {\n    return {\n        ...r,\n        kind: e,\n        context: r.context ? {\n            ...r.context,\n            ...t\n        } : t || r.context\n    };\n}\nvar addMetadata = (e, r)=>makeOperation(e.kind, e, {\n        meta: {\n            ...e.context.meta,\n            ...r\n        }\n    });\nvar noop = ()=>{};\nfunction gql(n) {\n    var a = new Map;\n    var o = [];\n    var i = [];\n    var s = Array.isArray(n) ? n[0] : n || \"\";\n    for(var c = 1; c < arguments.length; c++){\n        var u = arguments[c];\n        if (u && u.definitions) {\n            i.push(u);\n        } else {\n            s += u;\n        }\n        s += arguments[0][c];\n    }\n    i.unshift((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(s));\n    for (var p of i){\n        for (var d of p.definitions){\n            if (d.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION) {\n                var v = d.name.value;\n                var f = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(d);\n                if (!a.has(v)) {\n                    a.set(v, f);\n                    o.push(d);\n                } else if ( true && a.get(v) !== f) {\n                    console.warn(\"[WARNING: Duplicate Fragment] A fragment with name `\" + v + \"` already exists in this document.\\nWhile fragment names may not be unique across your source, each name must be unique per document.\");\n                }\n            } else {\n                o.push(d);\n            }\n        }\n    }\n    return (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.k)({\n        kind: _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.DOCUMENT,\n        definitions: o\n    });\n}\nvar shouldSkip = ({ kind: e })=>\"mutation\" !== e && \"query\" !== e;\nvar mapTypeNames = (e)=>{\n    var r = formatDocument(e.query);\n    if (r !== e.query) {\n        var t = makeOperation(e.kind, e);\n        t.query = r;\n        return t;\n    } else {\n        return e;\n    }\n};\nvar cacheExchange = ({ forward: e, client: r, dispatchDebug: t })=>{\n    var a = new Map;\n    var o = new Map;\n    var isOperationCached = (e)=>\"query\" === e.kind && \"network-only\" !== e.context.requestPolicy && (\"cache-only\" === e.context.requestPolicy || a.has(e.key));\n    return (i)=>{\n        var s = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)((e)=>{\n            var o = a.get(e.key);\n             true && t({\n                operation: e,\n                ...o ? {\n                    type: \"cacheHit\",\n                    message: \"The result was successfully retried from the cache\"\n                } : {\n                    type: \"cacheMiss\",\n                    message: \"The result could not be retrieved from the cache\"\n                },\n                source: \"cacheExchange\"\n            });\n            var i = o || (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.m)(e, {\n                data: null\n            });\n            i = {\n                ...i,\n                operation:  true ? addMetadata(e, {\n                    cacheOutcome: o ? \"hit\" : \"miss\"\n                }) : 0\n            };\n            if (\"cache-and-network\" === e.context.requestPolicy) {\n                i.stale = !0;\n                reexecuteOperation(r, e);\n            }\n            return i;\n        })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>!shouldSkip(e) && isOperationCached(e))(i));\n        var c = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((e)=>{\n            var { operation: n } = e;\n            if (!n) {\n                return;\n            }\n            var i = n.context.additionalTypenames || [];\n            if (\"subscription\" !== e.operation.kind) {\n                i = ((e)=>[\n                        ...collectTypes(e, new Set)\n                    ])(e.data).concat(i);\n            }\n            if (\"mutation\" === e.operation.kind || \"subscription\" === e.operation.kind) {\n                var s = new Set;\n                 true && t({\n                    type: \"cacheInvalidation\",\n                    message: `The following typenames have been invalidated: ${i}`,\n                    operation: n,\n                    data: {\n                        typenames: i,\n                        response: e\n                    },\n                    source: \"cacheExchange\"\n                });\n                for(var c = 0; c < i.length; c++){\n                    var u = i[c];\n                    var p = o.get(u);\n                    if (!p) {\n                        o.set(u, p = new Set);\n                    }\n                    for (var d of p.values()){\n                        s.add(d);\n                    }\n                    p.clear();\n                }\n                for (var v of s.values()){\n                    if (a.has(v)) {\n                        n = a.get(v).operation;\n                        a.delete(v);\n                        reexecuteOperation(r, n);\n                    }\n                }\n            } else if (\"query\" === n.kind && e.data) {\n                a.set(n.key, e);\n                for(var f = 0; f < i.length; f++){\n                    var l = i[f];\n                    var h = o.get(l);\n                    if (!h) {\n                        o.set(l, h = new Set);\n                    }\n                    h.add(n.key);\n                }\n            }\n        })(e((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"query\" !== e.kind || \"cache-only\" !== e.context.requestPolicy)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)((e)=> true ? addMetadata(e, {\n                cacheOutcome: \"miss\"\n            }) : 0)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n            (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)(mapTypeNames)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>!shouldSkip(e) && !isOperationCached(e))(i)),\n            (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>shouldSkip(e))(i)\n        ])))));\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n            s,\n            c\n        ]);\n    };\n};\nvar reexecuteOperation = (e, r)=>e.reexecuteOperation(makeOperation(r.kind, r, {\n        requestPolicy: \"network-only\"\n    }));\nvar T = new Set;\nvar ssrExchange = (e = {})=>{\n    var r = !!e.staleWhileRevalidate;\n    var t = !!e.includeExtensions;\n    var n = {};\n    var o = [];\n    var invalidate = (e)=>{\n        o.push(e.operation.key);\n        if (1 === o.length) {\n            Promise.resolve().then(()=>{\n                var e;\n                while(e = o.shift()){\n                    n[e] = null;\n                }\n            });\n        }\n    };\n    var ssr = ({ client: o, forward: i })=>(s)=>{\n            var c = e && \"boolean\" == typeof e.isClient ? !!e.isClient : !o.suspense;\n            var u = i((0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)(mapTypeNames)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" === e.kind || !n[e.key] || !!n[e.key].hasNext || \"network-only\" === e.context.requestPolicy)(s)));\n            var p = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)((e)=>{\n                var i = ((e, r, t)=>({\n                        operation: e,\n                        data: r.data ? JSON.parse(r.data) : void 0,\n                        extensions: t && r.extensions ? JSON.parse(r.extensions) : void 0,\n                        error: r.error ? new _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.C({\n                            networkError: r.error.networkError ? new Error(r.error.networkError) : void 0,\n                            graphQLErrors: r.error.graphQLErrors\n                        }) : void 0,\n                        stale: !1,\n                        hasNext: !!r.hasNext\n                    }))(e, n[e.key], t);\n                if (r && !T.has(e.key)) {\n                    i.stale = !0;\n                    T.add(e.key);\n                    reexecuteOperation(o, e);\n                }\n                return {\n                    ...i,\n                    operation:  true ? addMetadata(e, {\n                        cacheOutcome: \"hit\"\n                    }) : 0\n                };\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" !== e.kind && !!n[e.key] && \"network-only\" !== e.context.requestPolicy)(s));\n            if (!c) {\n                u = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((e)=>{\n                    var { operation: r } = e;\n                    if (\"mutation\" !== r.kind) {\n                        var a = ((e, r)=>{\n                            var t = {\n                                data: JSON.stringify(e.data),\n                                hasNext: e.hasNext\n                            };\n                            if (void 0 !== e.data) {\n                                t.data = JSON.stringify(e.data);\n                            }\n                            if (r && void 0 !== e.extensions) {\n                                t.extensions = JSON.stringify(e.extensions);\n                            }\n                            if (e.error) {\n                                t.error = {\n                                    graphQLErrors: e.error.graphQLErrors.map((e)=>{\n                                        if (!e.path && !e.extensions) {\n                                            return e.message;\n                                        }\n                                        return {\n                                            message: e.message,\n                                            path: e.path,\n                                            extensions: e.extensions\n                                        };\n                                    })\n                                };\n                                if (e.error.networkError) {\n                                    t.error.networkError = \"\" + e.error.networkError;\n                                }\n                            }\n                            return t;\n                        })(e, t);\n                        n[r.key] = a;\n                    }\n                })(u);\n            } else {\n                p = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)(invalidate)(p);\n            }\n            return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n                u,\n                p\n            ]);\n        };\n    ssr.restoreData = (e)=>{\n        for(var r in e){\n            if (null !== n[r]) {\n                n[r] = e[r];\n            }\n        }\n    };\n    ssr.extractData = ()=>{\n        var e = {};\n        for(var r in n){\n            if (null != n[r]) {\n                e[r] = n[r];\n            }\n        }\n        return e;\n    };\n    if (e && e.initialState) {\n        ssr.restoreData(e.initialState);\n    }\n    return ssr;\n};\nvar subscriptionExchange = ({ forwardSubscription: e, enableAllOperations: r, isSubscriptionOperation: t })=>({ client: a, forward: i })=>{\n        var u = t || ((e)=>\"subscription\" === e.kind || !!r && (\"query\" === e.kind || \"mutation\" === e.kind));\n        return (r)=>{\n            var t = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.mergeMap)((t)=>{\n                var { key: i } = t;\n                var u = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" === e.kind && e.key === i)(r);\n                return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.takeUntil)(u)(((r)=>{\n                    var t = e((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(r), r);\n                    return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.make)((e)=>{\n                        var o = !1;\n                        var i;\n                        var u;\n                        function nextResult(t) {\n                            e.next(u = u ? (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(u, t) : (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.m)(r, t));\n                        }\n                        Promise.resolve().then(()=>{\n                            if (o) {\n                                return;\n                            }\n                            i = t.subscribe({\n                                next: nextResult,\n                                error (t) {\n                                    if (Array.isArray(t)) {\n                                        nextResult({\n                                            errors: t\n                                        });\n                                    } else {\n                                        e.next((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(r, t));\n                                    }\n                                    e.complete();\n                                },\n                                complete () {\n                                    if (!o) {\n                                        o = !0;\n                                        if (\"subscription\" === r.kind) {\n                                            a.reexecuteOperation(makeOperation(\"teardown\", r, r.context));\n                                        }\n                                        if (u && u.hasNext) {\n                                            nextResult({\n                                                hasNext: !1\n                                            });\n                                        }\n                                        e.complete();\n                                    }\n                                }\n                            });\n                        });\n                        return ()=>{\n                            o = !0;\n                            if (i) {\n                                i.unsubscribe();\n                            }\n                        };\n                    });\n                })(t));\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" !== e.kind && u(e))(r));\n            var p = i((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" === e.kind || !u(e))(r));\n            return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n                t,\n                p\n            ]);\n        };\n    };\nvar debugExchange = ({ forward: e })=>{\n    if (false) {} else {\n        return (r)=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((e)=>console.log(\"[Exchange debug]: Completed operation: \", e))(e((0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((e)=>console.log(\"[Exchange debug]: Incoming operation: \", e))(r)));\n    }\n};\nvar dedupExchange = ({ forward: e })=>(r)=>e(r);\nvar fetchExchange = ({ forward: e, dispatchDebug: r })=>(t)=>{\n        var n = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.mergeMap)((e)=>{\n            var n = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(e);\n            var a = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(e, n);\n            var i = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(e, n);\n             true && r({\n                type: \"fetchRequest\",\n                message: \"A fetch request is being executed.\",\n                operation: e,\n                data: {\n                    url: a,\n                    fetchOptions: i\n                },\n                source: \"fetchExchange\"\n            });\n            var s = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.takeUntil)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((r)=>\"teardown\" === r.kind && r.key === e.key)(t))((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(e, a, i));\n            if (true) {\n                return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.onPush)((t)=>{\n                    var n = !t.data ? t.error : void 0;\n                     true && r({\n                        type: n ? \"fetchError\" : \"fetchSuccess\",\n                        message: `A ${n ? \"failed\" : \"successful\"} fetch response has been returned.`,\n                        operation: e,\n                        data: {\n                            url: a,\n                            fetchOptions: i,\n                            value: n || t\n                        },\n                        source: \"fetchExchange\"\n                    });\n                })(s);\n            }\n            return s;\n        })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" !== e.kind && (\"subscription\" !== e.kind || !!e.context.fetchSubscriptions))(t));\n        var a = e((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" === e.kind || \"subscription\" === e.kind && !e.context.fetchSubscriptions)(t));\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n            n,\n            a\n        ]);\n    };\nvar composeExchanges = (e)=>({ client: r, forward: t, dispatchDebug: n })=>e.reduceRight((e, t)=>{\n            var a = !1;\n            return t({\n                client: r,\n                forward (r) {\n                    if (true) {\n                        if (a) {\n                            throw new Error(\"forward() must only be called once in each Exchange.\");\n                        }\n                        a = !0;\n                    }\n                    return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(e((0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(r)));\n                },\n                dispatchDebug (e) {\n                     true && n({\n                        timestamp: Date.now(),\n                        source: t.name,\n                        ...e\n                    });\n                }\n            });\n        }, t);\nvar mapExchange = ({ onOperation: e, onResult: r, onError: t })=>({ forward: n })=>(a)=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.mergeMap)((e)=>{\n                if (t && e.error) {\n                    t(e.error, e.operation);\n                }\n                var n = r && r(e) || e;\n                return \"then\" in n ? (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromPromise)(n) : (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)(n);\n            })(n((0,wonka__WEBPACK_IMPORTED_MODULE_2__.mergeMap)((r)=>{\n                var t = e && e(r) || r;\n                return \"then\" in t ? (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromPromise)(t) : (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)(t);\n            })(a)));\nvar fallbackExchange = ({ dispatchDebug: e })=>(r)=>{\n        if (true) {\n            r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((r)=>{\n                if (\"teardown\" !== r.kind && \"production\" !== \"development\") {\n                    var t = `No exchange has handled operations of kind \"${r.kind}\". Check whether you've added an exchange responsible for these operations.`;\n                     true && e({\n                        type: \"fallbackCatch\",\n                        message: t,\n                        operation: r,\n                        source: \"fallbackExchange\"\n                    });\n                    console.warn(t);\n                }\n            })(r);\n        }\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>!1)(r);\n    };\nvar C = function Client(e) {\n    if ( true && !e.url) {\n        throw new Error(\"You are creating an urql-client without a url.\");\n    }\n    var r = 0;\n    var t = new Map;\n    var n = new Map;\n    var a = new Set;\n    var o = [];\n    var i = {\n        url: e.url,\n        fetchSubscriptions: e.fetchSubscriptions,\n        fetchOptions: e.fetchOptions,\n        fetch: e.fetch,\n        preferGetMethod: e.preferGetMethod,\n        requestPolicy: e.requestPolicy || \"cache-first\"\n    };\n    var s = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.makeSubject)();\n    function nextOperation(e) {\n        if (\"mutation\" === e.kind || \"teardown\" === e.kind || !a.has(e.key)) {\n            if (\"teardown\" === e.kind) {\n                a.delete(e.key);\n            } else if (\"mutation\" !== e.kind) {\n                a.add(e.key);\n            }\n            s.next(e);\n        }\n    }\n    var c = !1;\n    function dispatchOperation(e) {\n        if (e) {\n            nextOperation(e);\n        }\n        if (!c) {\n            c = !0;\n            while(c && (e = o.shift())){\n                nextOperation(e);\n            }\n            c = !1;\n        }\n    }\n    var makeResultSource = (r)=>{\n        var i = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.takeUntil)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" === e.kind && e.key === r.key)(s.source))((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>e.operation.kind === r.kind && e.operation.key === r.key && (!e.operation.context._instance || e.operation.context._instance === r.context._instance))(O));\n        if (e.maskTypename) {\n            i = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)((e)=>({\n                    ...e,\n                    data: maskTypename(e.data, !0)\n                }))(i);\n        }\n        if (\"query\" !== r.kind) {\n            i = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.takeWhile)((e)=>!!e.hasNext, !0)(i);\n        } else {\n            i = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.switchMap)((e)=>{\n                var t = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)(e);\n                return e.stale || e.hasNext ? t : (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n                    t,\n                    (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)(()=>{\n                        e.stale = !0;\n                        return e;\n                    })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.take)(1)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>e.key === r.key)(s.source)))\n                ]);\n            })(i);\n        }\n        if (\"mutation\" !== r.kind) {\n            i = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.onEnd)(()=>{\n                a.delete(r.key);\n                t.delete(r.key);\n                n.delete(r.key);\n                c = !1;\n                for(var e = o.length - 1; e >= 0; e--){\n                    if (o[e].key === r.key) {\n                        o.splice(e, 1);\n                    }\n                }\n                nextOperation(makeOperation(\"teardown\", r, r.context));\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.onPush)((e)=>{\n                if (e.stale) {\n                    for (var n of o){\n                        if (n.key === e.operation.key) {\n                            a.delete(n.key);\n                            break;\n                        }\n                    }\n                } else if (!e.hasNext) {\n                    a.delete(r.key);\n                }\n                t.set(r.key, e);\n            })(i));\n        } else {\n            i = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.onStart)(()=>{\n                nextOperation(r);\n            })(i);\n        }\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(i);\n    };\n    var u = this instanceof Client ? this : Object.create(Client.prototype);\n    var p = Object.assign(u, {\n        suspense: !!e.suspense,\n        operations$: s.source,\n        reexecuteOperation (e) {\n            if (\"teardown\" === e.kind) {\n                dispatchOperation(e);\n            } else if (\"mutation\" === e.kind || n.has(e.key)) {\n                var r = !1;\n                for(var t = 0; t < o.length; t++){\n                    r = r || o[t].key === e.key;\n                }\n                if (!r) {\n                    a.delete(e.key);\n                }\n                o.push(e);\n                Promise.resolve().then(dispatchOperation);\n            }\n        },\n        createRequestOperation (e, t, n) {\n            if (!n) {\n                n = {};\n            }\n            var a;\n            if ( true && \"teardown\" !== e && (a = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(t.query)) !== e) {\n                throw new Error(`Expected operation of type \"${e}\" but found \"${a}\"`);\n            }\n            return makeOperation(e, t, {\n                _instance: \"mutation\" === e ? r = r + 1 | 0 : void 0,\n                ...i,\n                ...n,\n                requestPolicy: n.requestPolicy || i.requestPolicy,\n                suspense: n.suspense || !1 !== n.suspense && p.suspense\n            });\n        },\n        executeRequestOperation (e) {\n            if (\"mutation\" === e.kind) {\n                return withPromise(makeResultSource(e));\n            }\n            return withPromise((0,wonka__WEBPACK_IMPORTED_MODULE_2__.lazy)(()=>{\n                var r = n.get(e.key);\n                if (!r) {\n                    n.set(e.key, r = makeResultSource(e));\n                }\n                r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.onStart)(()=>{\n                    dispatchOperation(e);\n                })(r);\n                var a = t.get(e.key);\n                if (\"query\" === e.kind && a && (a.stale || a.hasNext)) {\n                    return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.switchMap)(wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n                        r,\n                        (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((r)=>r === t.get(e.key))((0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)(a))\n                    ]));\n                } else {\n                    return r;\n                }\n            }));\n        },\n        executeQuery (e, r) {\n            var t = p.createRequestOperation(\"query\", e, r);\n            return p.executeRequestOperation(t);\n        },\n        executeSubscription (e, r) {\n            var t = p.createRequestOperation(\"subscription\", e, r);\n            return p.executeRequestOperation(t);\n        },\n        executeMutation (e, r) {\n            var t = p.createRequestOperation(\"mutation\", e, r);\n            return p.executeRequestOperation(t);\n        },\n        readQuery (e, r, t) {\n            var n = null;\n            (0,wonka__WEBPACK_IMPORTED_MODULE_2__.subscribe)((e)=>{\n                n = e;\n            })(p.query(e, r, t)).unsubscribe();\n            return n;\n        },\n        query: (e, r, t)=>p.executeQuery((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(e, r), t),\n        subscription: (e, r, t)=>p.executeSubscription((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(e, r), t),\n        mutation: (e, r, t)=>p.executeMutation((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(e, r), t)\n    });\n    var d = noop;\n    if (true) {\n        var { next: l, source: x } = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.makeSubject)();\n        p.subscribeToDebugTarget = (e)=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.subscribe)(e)(x);\n        d = l;\n    }\n    var g = composeExchanges(e.exchanges);\n    var O = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(g({\n        client: p,\n        dispatchDebug: d,\n        forward: fallbackExchange({\n            dispatchDebug: d\n        })\n    })(s.source));\n    (0,wonka__WEBPACK_IMPORTED_MODULE_2__.publish)(O);\n    return p;\n};\nvar j = C;\n //# sourceMappingURL=urql-core.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@urql/core/dist/urql-core.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@urql/exchange-auth/dist/urql-exchange-auth.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@urql/exchange-auth/dist/urql-exchange-auth.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authExchange: () => (/* binding */ authExchange)\n/* harmony export */ });\n/* harmony import */ var wonka__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wonka */ \"(ssr)/./node_modules/wonka/dist/wonka.mjs\");\n/* harmony import */ var _urql_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @urql/core */ \"(ssr)/./node_modules/@urql/core/dist/urql-core.mjs\");\n/* harmony import */ var _urql_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @urql/core */ \"(ssr)/./node_modules/@urql/core/dist/urql-core-chunk.mjs\");\n\n\nvar addAuthAttemptToOperation = (t, e)=>(0,_urql_core__WEBPACK_IMPORTED_MODULE_0__.makeOperation)(t.kind, t, {\n        ...t.context,\n        authAttempt: e\n    });\nfunction authExchange(s) {\n    return ({ client: f, forward: d })=>{\n        var l = new Set;\n        var p = (0,wonka__WEBPACK_IMPORTED_MODULE_1__.makeSubject)();\n        var x = (0,wonka__WEBPACK_IMPORTED_MODULE_1__.makeSubject)();\n        var A = new Map;\n        function flushQueue() {\n            v = void 0;\n            var t = A;\n            A = new Map;\n            t.forEach(p.next);\n        }\n        function errorQueue(t) {\n            v = void 0;\n            var e = A;\n            A = new Map;\n            e.forEach((e)=>{\n                x.next((0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.b)(e, t));\n            });\n        }\n        var v;\n        var w = null;\n        return (t)=>{\n            function initAuth() {\n                v = Promise.resolve().then(()=>s({\n                        mutate (t, n, r) {\n                            var u = f.createRequestOperation(\"mutation\", (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.h)(t, n), r);\n                            return (0,wonka__WEBPACK_IMPORTED_MODULE_1__.toPromise)((0,wonka__WEBPACK_IMPORTED_MODULE_1__.take)(1)((0,wonka__WEBPACK_IMPORTED_MODULE_1__.filter)((t)=>t.operation.key === u.key && u.context._instance === t.operation.context._instance)((0,wonka__WEBPACK_IMPORTED_MODULE_1__.onStart)(()=>{\n                                var t = addAuthToOperation(u);\n                                l.add(t.context._instance);\n                                p.next(t);\n                            })(E))));\n                        },\n                        appendHeaders (t, e) {\n                            var n = \"function\" == typeof t.context.fetchOptions ? t.context.fetchOptions() : t.context.fetchOptions || {};\n                            return (0,_urql_core__WEBPACK_IMPORTED_MODULE_0__.makeOperation)(t.kind, t, {\n                                ...t.context,\n                                fetchOptions: {\n                                    ...n,\n                                    headers: {\n                                        ...n.headers,\n                                        ...e\n                                    }\n                                }\n                            });\n                        }\n                    })).then((t)=>{\n                    if (t) {\n                        w = t;\n                    }\n                    flushQueue();\n                }).catch((t)=>{\n                    if (true) {\n                        console.warn(\"authExchange()’s initialization function has failed, which is unexpected.\\nIf your initialization function is expected to throw/reject, catch this error and handle it explicitly.\\nUnless this error is handled it’ll be passed onto any `OperationResult` instantly and authExchange() will block further operations and retry.\", t);\n                    }\n                    errorQueue(t);\n                });\n            }\n            initAuth();\n            function refreshAuth(t) {\n                A.set(t.key, addAuthAttemptToOperation(t, !0));\n                if (w && !v) {\n                    v = w.refreshAuth().then(flushQueue).catch(errorQueue);\n                }\n            }\n            function addAuthToOperation(t) {\n                return w ? w.addAuthToOperation(t) : t;\n            }\n            var h = (0,wonka__WEBPACK_IMPORTED_MODULE_1__.filter)(Boolean)((0,wonka__WEBPACK_IMPORTED_MODULE_1__.map)((t)=>{\n                if (\"teardown\" === t.kind) {\n                    A.delete(t.key);\n                    return t;\n                } else if (t.context._instance && l.has(t.context._instance)) {\n                    return t;\n                } else if (t.context.authAttempt) {\n                    return addAuthToOperation(t);\n                } else if (v || !w) {\n                    if (!v) {\n                        initAuth();\n                    }\n                    if (!A.has(t.key)) {\n                        A.set(t.key, addAuthAttemptToOperation(t, !1));\n                    }\n                    return null;\n                } else if (function willAuthError(t) {\n                    return !t.context.authAttempt && w && w.willAuthError && w.willAuthError(t);\n                }(t)) {\n                    refreshAuth(t);\n                    return null;\n                }\n                return addAuthToOperation(addAuthAttemptToOperation(t, !1));\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_1__.merge)([\n                p.source,\n                t\n            ])));\n            var E = d(h);\n            return (0,wonka__WEBPACK_IMPORTED_MODULE_1__.merge)([\n                x.source,\n                (0,wonka__WEBPACK_IMPORTED_MODULE_1__.filter)((t)=>{\n                    if (!l.has(t.operation.context._instance) && t.error && function didAuthError(t) {\n                        return w && w.didAuthError && w.didAuthError(t.error, t.operation);\n                    }(t) && !t.operation.context.authAttempt) {\n                        refreshAuth(t.operation);\n                        return !1;\n                    }\n                    if (l.has(t.operation.context._instance)) {\n                        l.delete(t.operation.context._instance);\n                    }\n                    return !0;\n                })(E)\n            ]);\n        };\n    };\n}\n //# sourceMappingURL=urql-exchange-auth.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@urql/exchange-auth/dist/urql-exchange-auth.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache-extras.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache-extras.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   relayPagination: () => (/* binding */ relayPagination),\n/* harmony export */   simplePagination: () => (/* binding */ simplePagination)\n/* harmony export */ });\n/* harmony import */ var _urql_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @urql/core */ \"(ssr)/./node_modules/@urql/core/dist/urql-core-chunk.mjs\");\n\nvar r = {\n    __typename: \"PageInfo\",\n    endCursor: null,\n    startCursor: null,\n    hasNextPage: !1,\n    hasPreviousPage: !1\n};\nvar ensureKey = (e)=>\"string\" == typeof e ? e : null;\nvar concatEdges = (e, r, a)=>{\n    var n = new Set;\n    for(var t = 0, s = r.length; t < s; t++){\n        var o = e.resolve(r[t], \"node\");\n        if (\"string\" == typeof o) {\n            n.add(o);\n        }\n    }\n    var f = r.slice();\n    for(var i = 0, v = a.length; i < v; i++){\n        var l = a[i];\n        var u = e.resolve(l, \"node\");\n        if (\"string\" == typeof u && !n.has(u)) {\n            n.add(u);\n            f.push(l);\n        }\n    }\n    return f;\n};\nvar concatNodes = (e, r)=>{\n    var a = new Set;\n    for(var n = 0, t = e.length; n < t; n++){\n        var s = e[n];\n        if (\"string\" == typeof s) {\n            a.add(s);\n        }\n    }\n    var o = e.slice();\n    for(var f = 0, i = r.length; f < i; f++){\n        var v = r[f];\n        if (\"string\" == typeof v && !a.has(v)) {\n            a.add(v);\n            o.push(v);\n        }\n    }\n    return o;\n};\nvar compareArgs = (r, a)=>{\n    for(var n in a){\n        if (\"first\" === n || \"last\" === n || \"after\" === n || \"before\" === n) {\n            continue;\n        } else if (!(n in r)) {\n            return !1;\n        }\n        var t = r[n];\n        var s = a[n];\n        if (typeof t != typeof s || \"object\" != typeof t ? t !== s : (0,_urql_core__WEBPACK_IMPORTED_MODULE_0__.i)(t) !== (0,_urql_core__WEBPACK_IMPORTED_MODULE_0__.i)(s)) {\n            return !1;\n        }\n    }\n    for(var o in r){\n        if (\"first\" === o || \"last\" === o || \"after\" === o || \"before\" === o) {\n            continue;\n        }\n        if (!(o in a)) {\n            return !1;\n        }\n    }\n    return !0;\n};\nvar getPage = (e, a, n)=>{\n    var t = ensureKey(e.resolve(a, n));\n    if (!t) {\n        return null;\n    }\n    var s = e.resolve(t, \"__typename\");\n    var o = e.resolve(t, \"edges\") || [];\n    var f = e.resolve(t, \"nodes\") || [];\n    if (\"string\" != typeof s) {\n        return null;\n    }\n    var i = {\n        __typename: s,\n        edges: o,\n        nodes: f,\n        pageInfo: r\n    };\n    var v = e.resolve(t, \"pageInfo\");\n    if (\"string\" == typeof v) {\n        var l = ensureKey(e.resolve(v, \"__typename\"));\n        var u = ensureKey(e.resolve(v, \"endCursor\"));\n        var g = ensureKey(e.resolve(v, \"startCursor\"));\n        var p = e.resolve(v, \"hasNextPage\");\n        var d = e.resolve(v, \"hasPreviousPage\");\n        var y = i.pageInfo = {\n            __typename: \"string\" == typeof l ? l : \"PageInfo\",\n            hasNextPage: \"boolean\" == typeof p ? p : !!u,\n            hasPreviousPage: \"boolean\" == typeof d ? d : !!g,\n            endCursor: u,\n            startCursor: g\n        };\n        if (null === y.endCursor) {\n            var m = o[o.length - 1];\n            if (m) {\n                var h = e.resolve(m, \"cursor\");\n                y.endCursor = ensureKey(h);\n            }\n        }\n        if (null === y.startCursor) {\n            var _ = o[0];\n            if (_) {\n                var c = e.resolve(_, \"cursor\");\n                y.startCursor = ensureKey(c);\n            }\n        }\n    }\n    return i;\n};\nvar relayPagination = (e = {})=>{\n    var a = e.mergeMode || \"inwards\";\n    return (e, n, t, s)=>{\n        var { parentKey: o, fieldName: f } = s;\n        var i = t.inspectFields(o).filter((e)=>e.fieldName === f);\n        var v = i.length;\n        if (0 === v) {\n            return;\n        }\n        var l = null;\n        var u = [];\n        var g = [];\n        var p = [];\n        var d = [];\n        var y = {\n            ...r\n        };\n        for(var m = 0; m < v; m++){\n            var { fieldKey: h, arguments: _ } = i[m];\n            if (null === _ || !compareArgs(n, _)) {\n                continue;\n            }\n            var c = getPage(t, o, h);\n            if (null === c) {\n                continue;\n            }\n            if (0 === c.nodes.length && 0 === c.edges.length && l) {\n                continue;\n            }\n            if (\"inwards\" === a && \"number\" == typeof _.last && \"number\" == typeof _.first) {\n                var P = c.edges.slice(0, _.first + 1);\n                var C = c.edges.slice(-_.last);\n                var I = c.nodes.slice(0, _.first + 1);\n                var b = c.nodes.slice(-_.last);\n                u = concatEdges(t, u, P);\n                g = concatEdges(t, C, g);\n                p = concatNodes(p, I);\n                d = concatNodes(b, d);\n                y = c.pageInfo;\n            } else if (_.after) {\n                u = concatEdges(t, u, c.edges);\n                p = concatNodes(p, c.nodes);\n                y.endCursor = c.pageInfo.endCursor;\n                y.hasNextPage = c.pageInfo.hasNextPage;\n            } else if (_.before) {\n                g = concatEdges(t, c.edges, g);\n                d = concatNodes(c.nodes, d);\n                y.startCursor = c.pageInfo.startCursor;\n                y.hasPreviousPage = c.pageInfo.hasPreviousPage;\n            } else if (\"number\" == typeof _.last) {\n                g = concatEdges(t, c.edges, g);\n                d = concatNodes(c.nodes, d);\n                y = c.pageInfo;\n            } else {\n                u = concatEdges(t, u, c.edges);\n                p = concatNodes(p, c.nodes);\n                y = c.pageInfo;\n            }\n            if (c.pageInfo.__typename !== y.__typename) {\n                y.__typename = c.pageInfo.__typename;\n            }\n            if (l !== c.__typename) {\n                l = c.__typename;\n            }\n        }\n        if (\"string\" != typeof l) {\n            return;\n        }\n        if (!!!ensureKey(t.resolve(o, f, n))) {\n            if (!s.store.schema) {\n                return;\n            } else {\n                s.partial = !0;\n            }\n        }\n        return {\n            __typename: l,\n            edges: \"inwards\" === a ? concatEdges(t, u, g) : concatEdges(t, g, u),\n            nodes: \"inwards\" === a ? concatNodes(p, d) : concatNodes(d, p),\n            pageInfo: {\n                __typename: y.__typename,\n                endCursor: y.endCursor,\n                startCursor: y.startCursor,\n                hasNextPage: y.hasNextPage,\n                hasPreviousPage: y.hasPreviousPage\n            }\n        };\n    };\n};\nvar simplePagination = ({ offsetArgument: r = \"skip\", limitArgument: a = \"limit\", mergeMode: n = \"after\" } = {})=>{\n    var compareArgs = (n, t)=>{\n        for(var s in t){\n            if (s === r || s === a) {\n                continue;\n            } else if (!(s in n)) {\n                return !1;\n            }\n            var o = n[s];\n            var f = t[s];\n            if (typeof o != typeof f || \"object\" != typeof o ? o !== f : (0,_urql_core__WEBPACK_IMPORTED_MODULE_0__.i)(o) !== (0,_urql_core__WEBPACK_IMPORTED_MODULE_0__.i)(f)) {\n                return !1;\n            }\n        }\n        for(var i in n){\n            if (i === r || i === a) {\n                continue;\n            }\n            if (!(i in t)) {\n                return !1;\n            }\n        }\n        return !0;\n    };\n    return (e, a, t, s)=>{\n        var { parentKey: o, fieldName: f } = s;\n        var i = t.inspectFields(o).filter((e)=>e.fieldName === f);\n        var v = i.length;\n        if (0 === v) {\n            return;\n        }\n        var l = new Set;\n        var u = [];\n        var g = null;\n        for(var p = 0; p < v; p++){\n            var { fieldKey: d, arguments: y } = i[p];\n            if (null === y || !compareArgs(a, y)) {\n                continue;\n            }\n            var m = t.resolve(o, d);\n            var h = y[r];\n            if (null === m || 0 === m.length || \"number\" != typeof h) {\n                continue;\n            }\n            var _ = [];\n            for(var c = 0; c < m.length; c++){\n                var P = m[c];\n                if (l.has(P)) {\n                    continue;\n                }\n                _.push(P);\n                l.add(P);\n            }\n            if ((!g || h > g) == (\"after\" === n)) {\n                u = [\n                    ...u,\n                    ..._\n                ];\n            } else {\n                u = [\n                    ..._,\n                    ...u\n                ];\n            }\n            g = h;\n        }\n        if (t.resolve(o, f, a)) {\n            return u;\n        } else if (!s.store.schema) {\n            return;\n        } else {\n            s.partial = !0;\n            return u;\n        }\n    };\n};\n //# sourceMappingURL=urql-exchange-graphcache-extras.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache-extras.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Store: () => (/* binding */ Store),\n/* harmony export */   cacheExchange: () => (/* binding */ cacheExchange),\n/* harmony export */   offlineExchange: () => (/* binding */ offlineExchange)\n/* harmony export */ });\n/* harmony import */ var _urql_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @urql/core */ \"(ssr)/./node_modules/@urql/core/dist/urql-core-chunk.mjs\");\n/* harmony import */ var _urql_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @urql/core */ \"(ssr)/./node_modules/@urql/core/dist/urql-core.mjs\");\n/* harmony import */ var _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @0no-co/graphql.web */ \"(ssr)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs\");\n/* harmony import */ var wonka__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! wonka */ \"(ssr)/./node_modules/wonka/dist/wonka.mjs\");\n\n\n\nvar h = \"\\nhttps://bit.ly/2XbVrpR#\";\nvar m = new Set;\nvar g = [];\nvar popDebugNode = ()=>g.pop();\nvar pushDebugNode = (e, r)=>{\n    var t = \"\";\n    if (r.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.INLINE_FRAGMENT) {\n        t = e ? `Inline Fragment on \"${e}\"` : \"Inline Fragment\";\n    } else if (r.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.OPERATION_DEFINITION) {\n        t = `${r.name ? `\"${r.name.value}\"` : \"Unnamed\"} ${r.operation}`;\n    } else if (r.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.FRAGMENT_DEFINITION) {\n        t = `\"${r.name.value}\" Fragment`;\n    }\n    if (t) {\n        g.push(t);\n    }\n};\nvar getDebugOutput = ()=>g.length ? \"\\n(Caused At: \" + g.join(\", \") + \")\" : \"\";\nfunction invariant(e, r, t) {\n    if (!e) {\n        var a = r || \"Minfied Error #\" + t + \"\\n\";\n        if (true) {\n            a += getDebugOutput();\n        }\n        var i = new Error(a + h + t);\n        i.name = \"Graphcache Error\";\n        throw i;\n    }\n}\nfunction warn(e, r, t) {\n    if (!m.has(e)) {\n        if (t) {\n            t(\"warn\", e + getDebugOutput() + h + r);\n        } else {\n            console.warn(e + getDebugOutput() + h + r);\n        }\n        m.add(e);\n    }\n}\nvar N = {};\nvar getDirectives = (e)=>e._directives || N;\nvar getName = (e)=>e.name.value;\nvar getFragmentTypeName = (e)=>e.typeCondition.name.value;\nvar getFieldAlias = (e)=>e.alias ? e.alias.value : e.name.value;\nvar _ = [];\nvar getSelectionSet = (e)=>e.selectionSet ? e.selectionSet.selections : _;\nvar getTypeCondition = (e)=>e.typeCondition ? e.typeCondition.name.value : null;\nvar getFieldArguments = (e, r)=>{\n    var t = null;\n    if (e.arguments) {\n        for(var a = 0, i = e.arguments.length; a < i; a++){\n            var n = e.arguments[a];\n            var s = (0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.valueFromASTUntyped)(n.value, r);\n            if (null != s) {\n                if (!t) {\n                    t = {};\n                }\n                t[getName(n)] = s;\n            }\n        }\n    }\n    return t;\n};\nvar filterVariables = (e, r)=>{\n    if (!r || !e.variableDefinitions) {\n        return;\n    }\n    var t = {};\n    for(var a = 0, i = e.variableDefinitions.length; a < i; a++){\n        var n = getName(e.variableDefinitions[a].variable);\n        t[n] = r[n];\n    }\n    return t;\n};\nvar normalizeVariables = (e, r)=>{\n    var t = {};\n    if (!r) {\n        return t;\n    }\n    if (e.variableDefinitions) {\n        for(var a = 0, i = e.variableDefinitions.length; a < i; a++){\n            var n = e.variableDefinitions[a];\n            var s = getName(n.variable);\n            t[s] = void 0 === r[s] && n.defaultValue ? (0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.valueFromASTUntyped)(n.defaultValue, r) : r[s];\n        }\n    }\n    for(var l in r){\n        if (!(l in t)) {\n            t[l] = r[l];\n        }\n    }\n    return t;\n};\nfunction getMainOperation(e) {\n    for(var r = 0; r < e.definitions.length; r++){\n        if (e.definitions[r].kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.OPERATION_DEFINITION) {\n            return e.definitions[r];\n        }\n    }\n    invariant(!1,  true ? \"Invalid GraphQL document: All GraphQL documents must contain an OperationDefinitionnode for a query, subscription, or mutation.\" : 0, 1);\n}\nvar getFragments = (e)=>{\n    var r = {};\n    for(var t = 0; t < e.definitions.length; t++){\n        var a = e.definitions[t];\n        if (a.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.FRAGMENT_DEFINITION) {\n            r[getName(a)] = a;\n        }\n    }\n    return r;\n};\nvar shouldInclude = (e, r)=>{\n    var t = getDirectives(e);\n    if (t.include || t.skip) {\n        for(var a in t){\n            var i = t[a];\n            if (i && (\"include\" === a || \"skip\" === a) && i.arguments && i.arguments[0] && \"if\" === getName(i.arguments[0])) {\n                var n = (0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.valueFromASTUntyped)(i.arguments[0].value, r);\n                return \"include\" === a ? !!n : !n;\n            }\n        }\n    }\n    return !0;\n};\nvar isDeferred = (e, r)=>{\n    var { defer: t } = getDirectives(e);\n    if (t) {\n        for (var a of t.arguments || []){\n            if (\"if\" === getName(a)) {\n                return !!(0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.valueFromASTUntyped)(a.value, r);\n            }\n        }\n        return !0;\n    }\n    return !1;\n};\nvar k = \"__\";\nvar isFieldNullable = (e, r, t, a)=>{\n    var i = getField(e, r, t, a);\n    return !!i && \"NON_NULL\" !== i.type.kind;\n};\nvar isListNullable = (e, r, t, a)=>{\n    var i = getField(e, r, t, a);\n    if (!i) {\n        return !1;\n    }\n    var n = \"NON_NULL\" === i.type.kind ? i.type.ofType : i.type;\n    return \"LIST\" === n.kind && \"NON_NULL\" !== n.ofType.kind;\n};\nvar isFieldAvailableOnType = (e, r, t, a)=>0 === t.indexOf(k) || 0 === r.indexOf(k) || !!getField(e, r, t, a);\nvar isInterfaceOfType = (e, r, t)=>{\n    if (!t) {\n        return !1;\n    }\n    var a = getTypeCondition(r);\n    if (!a || t === a) {\n        return !0;\n    } else if (e.types.has(a) && \"OBJECT\" === e.types.get(a).kind) {\n        return a === t;\n    }\n    !function expectAbstractType(e, r) {\n        invariant(e.types.has(r) && (\"INTERFACE\" === e.types.get(r).kind || \"UNION\" === e.types.get(r).kind),  true ? \"Invalid Abstract type: The type `\" + r + \"` is not an Interface or Union type in the defined schema, but a fragment in the GraphQL document is using it as a type condition.\" : 0, 5);\n    }(e, a);\n    expectObjectType(e, t);\n    return e.isSubType(a, t);\n};\nvar getField = (e, r, t, a)=>{\n    if (0 === t.indexOf(k) || 0 === r.indexOf(k)) {\n        return;\n    }\n    expectObjectType(e, r);\n    var i = e.types.get(r).fields()[t];\n    if (true) {\n        if (!i) {\n            warn(\"Invalid field: The field `\" + t + \"` does not exist on `\" + r + \"`, but the GraphQL document expects it to exist.\\nTraversal will continue, however this may lead to undefined behavior!\", 4, a);\n        }\n    }\n    return i;\n};\nfunction expectObjectType(e, r) {\n    invariant(e.types.has(r) && \"OBJECT\" === e.types.get(r).kind,  true ? \"Invalid Object type: The type `\" + r + \"` is not an object in the defined schema, but the GraphQL document is traversing it.\" : 0, 3);\n}\nfunction warnAboutResolver(e, r) {\n     true && warn(`Invalid resolver: \\`${e}\\` is not in the defined schema, but the \\`resolvers\\` option is referencing it.`, 23, r);\n}\nfunction warnAboutAbstractResolver(e, r, t) {\n     true && warn(`Invalid resolver: \\`${e}\\` does not match to a concrete type in the schema, but the \\`resolvers\\` option is referencing it. Implement the resolver for the types that ${\"UNION\" === r ? \"make up the union\" : \"implement the interface\"} instead.`, 26, t);\n}\nvar keyOfField = (r, t)=>t ? `${r}(${(0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.i)(t)})` : r;\nvar joinKeys = (e, r)=>`${e}.${r}`;\nvar fieldInfoOfKey = (e)=>{\n    var r = e.indexOf(\"(\");\n    if (r > -1) {\n        return {\n            fieldKey: e,\n            fieldName: e.slice(0, r),\n            arguments: JSON.parse(e.slice(r + 1, -1))\n        };\n    } else {\n        return {\n            fieldKey: e,\n            fieldName: e,\n            arguments: null\n        };\n    }\n};\nvar deserializeKeyInfo = (e)=>{\n    var r = e.indexOf(\".\");\n    return {\n        entityKey: e.slice(0, r).replace(/%2e/g, \".\"),\n        fieldKey: e.slice(r + 1)\n    };\n};\nvar E = null;\nvar O = null;\nvar w = null;\nvar b = null;\nvar D = null;\nvar x = null;\nvar V = !1;\nvar I = !1;\nfunction makeData(e, r) {\n    var t;\n    if (e) {\n        if (E.has(e)) {\n            return e;\n        }\n        t = O.get(e);\n    }\n    if (null == t) {\n        t = r ? [] : {};\n    }\n    if (e) {\n        O.set(e, t);\n    }\n    E.add(t);\n    return t;\n}\nvar ownsData = (e)=>!!e && E.has(e);\nvar initDataState = (e, r, t, a, i)=>{\n    E = new WeakSet;\n    O = new WeakMap;\n    D = e;\n    w = r;\n    x = new Set;\n    I = !!a;\n    V = !!i;\n    if (true) {\n        g.length = 0;\n    }\n    if (!t) {\n        b = null;\n    } else if (\"read\" === D) {\n        b = t;\n    } else if (a || r.hydrating || r.optimisticOrder.length > 1) {\n        if (!a && !r.commutativeKeys.has(t)) {\n            reserveLayer(r, t);\n        } else if (a) {\n            if (-1 !== r.optimisticOrder.indexOf(t) && !r.commutativeKeys.has(t)) {\n                r.optimisticOrder.splice(r.optimisticOrder.indexOf(t), 1);\n            }\n            r.commutativeKeys.delete(t);\n        }\n        b = t;\n        createLayer(r, t);\n    } else {\n        b = null;\n        deleteLayer(r, t);\n    }\n};\nvar clearDataState = ()=>{\n    if (true) {\n        getCurrentDependencies();\n    }\n    var e = w;\n    var r = b;\n    I = !1;\n    b = null;\n    if (!e.hydrating && r && e.optimisticOrder.indexOf(r) > -1) {\n        var t = e.optimisticOrder.length;\n        while(--t >= 0 && e.dirtyKeys.has(e.optimisticOrder[t]) && e.commutativeKeys.has(e.optimisticOrder[t])){\n            squashLayer(e.optimisticOrder[t]);\n        }\n    }\n    E = null;\n    O = null;\n    D = null;\n    w = null;\n    x = null;\n    if (true) {\n        g.length = 0;\n    }\n    if (true) {\n        if (!e.defer && (e.storage || !e.optimisticOrder.length)) {\n            e.defer = !0;\n            setTimeout(()=>{\n                initDataState(\"read\", e, null);\n                gc();\n                persistData();\n                clearDataState();\n                e.defer = !1;\n            });\n        }\n    }\n};\nvar noopDataState = (e, r, t)=>{\n    if (r && !t) {\n        e.deferredKeys.delete(r);\n    }\n    initDataState(\"write\", e, r, t);\n    clearDataState();\n};\nvar getCurrentDependencies = ()=>{\n    invariant(null !== x,  true ? \"Invalid Cache call: The cache may only be accessed or mutated duringoperations like write or query, or as part of its resolvers, updaters, or optimistic configs.\" : 0, 2);\n    return x;\n};\nvar setNode = (e, r, t, a)=>{\n    if (true) {\n        invariant(\"read\" !== D,  true ? \"Invalid Cache write: You may not write to the cache during cache reads.  Accesses to `cache.writeFragment`, `cache.updateQuery`, and `cache.link` may  not be made inside `resolvers` for instance.\" : 0, 27);\n    }\n    var i = b ? e.optimistic.get(b) : e.base;\n    var n = i.get(r);\n    if (void 0 === n) {\n        i.set(r, n = Object.create(null));\n    }\n    if (void 0 === a && !b) {\n        delete n[t];\n    } else {\n        n[t] = a;\n    }\n};\nvar getNode = (e, r, t)=>{\n    var a;\n    var i = !I && \"read\" === D && b && w.commutativeKeys.has(b);\n    for(var n = 0, o = w.optimisticOrder.length; n < o; n++){\n        var s = w.optimisticOrder[n];\n        var l = e.optimistic.get(s);\n        i = i && s !== b;\n        if (l && (!i || !w.commutativeKeys.has(s)) && (!I || \"write\" === D || w.commutativeKeys.has(s)) && void 0 !== (a = l.get(r)) && t in a) {\n            return a[t];\n        }\n    }\n    return void 0 !== (a = e.base.get(r)) ? a[t] : void 0;\n};\nvar updateRCForLink = (e, r)=>{\n    if (Array.isArray(e)) {\n        for(var t = 0, a = e.length; t < a; t++){\n            updateRCForLink(e[t], r);\n        }\n    } else if (\"string\" == typeof e) {\n        ((e, r)=>{\n            var t = w.refCount.get(e) || 0;\n            var a = t + r > 0 ? t + r : 0;\n            w.refCount.set(e, a);\n            if (!a) {\n                w.gc.add(e);\n            } else if (!t && a) {\n                w.gc.delete(e);\n            }\n        })(e, r);\n    }\n};\nvar extractNodeFields = (e, r, t)=>{\n    if (void 0 !== t) {\n        for(var a in t){\n            if (!r.has(a)) {\n                e.push(fieldInfoOfKey(a));\n                r.add(a);\n            }\n        }\n    }\n};\nvar extractNodeMapFields = (e, r, t, a)=>{\n    extractNodeFields(e, r, a.base.get(t));\n    for(var i = 0, n = w.optimisticOrder.length; i < n; i++){\n        var o = a.optimistic.get(w.optimisticOrder[i]);\n        if (void 0 !== o) {\n            extractNodeFields(e, r, o.get(t));\n        }\n    }\n};\nvar gc = ()=>{\n    if (w.optimisticOrder.length) {\n        return;\n    }\n    for (var e of w.gc.keys()){\n        w.gc.delete(e);\n        if ((w.refCount.get(e) || 0) > 0) {\n            continue;\n        }\n        w.refCount.delete(e);\n        w.records.base.delete(e);\n        var r = w.links.base.get(e);\n        if (r) {\n            w.links.base.delete(e);\n            for(var t in r){\n                updateRCForLink(r[t], -1);\n            }\n        }\n    }\n};\nvar updateDependencies = (e, r)=>{\n    if (e !== w.queryRootKey) {\n        x.add(e);\n    } else if (void 0 !== r && \"__typename\" !== r) {\n        x.add(joinKeys(e, r));\n    }\n};\nvar updatePersist = (e, r)=>{\n    if (!I && w.storage) {\n        w.persist.add(((e, r)=>`${e.replace(/\\./g, \"%2e\")}.${r}`)(e, r));\n    }\n};\nvar readRecord = (e, r)=>{\n    updateDependencies(e, r);\n    return getNode(w.records, e, r);\n};\nvar readLink = (e, r)=>{\n    updateDependencies(e, r);\n    return getNode(w.links, e, r);\n};\nvar writeRecord = (e, r, t)=>{\n    updateDependencies(e, r);\n    updatePersist(e, r);\n    setNode(w.records, e, r, t);\n};\nvar hasField = (e, r)=>void 0 !== readRecord(e, r) || void 0 !== readLink(e, r);\nvar writeLink = (e, r, t)=>{\n    var a = b ? w.links.optimistic.get(b) : w.links.base;\n    if (!b) {\n        var i = a && a.get(e);\n        updateRCForLink(i && i[r], -1);\n        updateRCForLink(t, 1);\n    }\n    updateDependencies(e, r);\n    updatePersist(e, r);\n    setNode(w.links, e, r, t);\n};\nvar reserveLayer = (e, r, t)=>{\n    var a = e.optimisticOrder.indexOf(r);\n    if (a > -1) {\n        e.optimisticOrder.splice(a, 1);\n    }\n    if (t) {\n        e.deferredKeys.add(r);\n        for(a = a > -1 ? a : 0; a < e.optimisticOrder.length && !e.deferredKeys.has(e.optimisticOrder[a]) && (!e.dirtyKeys.has(e.optimisticOrder[a]) || !e.commutativeKeys.has(e.optimisticOrder[a])); a++){}\n    } else {\n        e.deferredKeys.delete(r);\n        if (a > -1 && !e.commutativeKeys.has(r)) {\n            clearLayer(e, r);\n        }\n        a = 0;\n    }\n    e.optimisticOrder.splice(a, 0, r);\n    e.commutativeKeys.add(r);\n};\nvar createLayer = (e, r)=>{\n    if (-1 === e.optimisticOrder.indexOf(r)) {\n        e.optimisticOrder.unshift(r);\n    }\n    if (!e.dirtyKeys.has(r)) {\n        e.dirtyKeys.add(r);\n        e.links.optimistic.set(r, new Map);\n        e.records.optimistic.set(r, new Map);\n    }\n};\nvar clearLayer = (e, r)=>{\n    if (e.dirtyKeys.has(r)) {\n        e.dirtyKeys.delete(r);\n        e.records.optimistic.delete(r);\n        e.links.optimistic.delete(r);\n        e.deferredKeys.delete(r);\n    }\n};\nvar deleteLayer = (e, r)=>{\n    var t = e.optimisticOrder.indexOf(r);\n    if (t > -1) {\n        e.optimisticOrder.splice(t, 1);\n        e.commutativeKeys.delete(r);\n    }\n    clearLayer(e, r);\n};\nvar squashLayer = (e)=>{\n    var r = x;\n    x = new Set;\n    D = \"write\";\n    var t = w.links.optimistic.get(e);\n    if (t) {\n        for (var a of t.entries()){\n            var i = a[0];\n            var n = a[1];\n            for(var o in n){\n                writeLink(i, o, n[o]);\n            }\n        }\n    }\n    var s = w.records.optimistic.get(e);\n    if (s) {\n        for (var l of s.entries()){\n            var v = l[0];\n            var d = l[1];\n            for(var u in d){\n                writeRecord(v, u, d[u]);\n            }\n        }\n    }\n    x = r;\n    deleteLayer(w, e);\n};\nvar inspectFields = (e)=>{\n    var { links: r, records: t } = w;\n    var a = [];\n    var i = new Set;\n    updateDependencies(e);\n    extractNodeMapFields(a, i, e, r);\n    extractNodeMapFields(a, i, e, t);\n    return a;\n};\nvar persistData = ()=>{\n    if (w.storage) {\n        I = !0;\n        D = \"read\";\n        var r = {};\n        for (var t of w.persist.keys()){\n            var { entityKey: a, fieldKey: i } = deserializeKeyInfo(t);\n            var n = void 0;\n            if (void 0 !== (n = readLink(a, i))) {\n                r[t] = `:${(0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.i)(n)}`;\n            } else if (void 0 !== (n = readRecord(a, i))) {\n                r[t] = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.i)(n);\n            } else {\n                r[t] = void 0;\n            }\n        }\n        I = !1;\n        w.storage.writeData(r);\n        w.persist.clear();\n    }\n};\nvar q = null;\nvar T = !1;\nvar getFieldError = (e)=>e.__internal.path.length > 0 && e.__internal.errorMap ? e.__internal.errorMap[e.__internal.path.join(\".\")] : void 0;\nvar makeContext = (e, r, t, a, i, n)=>{\n    T = !1;\n    var o = {\n        store: e,\n        variables: r,\n        fragments: t,\n        parent: {\n            __typename: a\n        },\n        parentTypeName: a,\n        parentKey: i,\n        parentFieldKey: \"\",\n        fieldName: \"\",\n        error: void 0,\n        partial: !1,\n        hasNext: !1,\n        optimistic: I,\n        __internal: {\n            path: [],\n            errorMap: void 0\n        }\n    };\n    if (n && n.graphQLErrors) {\n        for(var s = 0; s < n.graphQLErrors.length; s++){\n            var l = n.graphQLErrors[s];\n            if (l.path && l.path.length) {\n                if (!o.__internal.errorMap) {\n                    o.__internal.errorMap = Object.create(null);\n                }\n                o.__internal.errorMap[l.path.join(\".\")] = l;\n            }\n        }\n    }\n    return o;\n};\nvar updateContext = (e, r, t, a, i, n)=>{\n    q = e;\n    e.parent = r;\n    e.parentTypeName = t;\n    e.parentKey = a;\n    e.parentFieldKey = i;\n    e.fieldName = n;\n    e.error = getFieldError(e);\n};\nvar isFragmentHeuristicallyMatching = (e, r, t, a, i)=>{\n    if (!r) {\n        return !1;\n    }\n    var o = getTypeCondition(e);\n    if (!o || r === o) {\n        return !0;\n    }\n     true && warn(\"Heuristic Fragment Matching: A fragment is trying to match against the `\" + r + \"` type, but the type condition is `\" + o + \"`. Since GraphQL allows for interfaces `\" + o + \"` may be an interface.\\nA schema needs to be defined for this match to be deterministic, otherwise the fragment will be matched heuristically!\", 16, i);\n    return \"write\" === D || !getSelectionSet(e).some((e)=>{\n        if (e.kind !== _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.FIELD) {\n            return !1;\n        }\n        var r = keyOfField(getName(e), getFieldArguments(e, a));\n        return !hasField(t, r);\n    });\n};\nvar makeSelectionIterator = (e, r, t, a, i)=>{\n    var o;\n    var s = 0;\n    return function next() {\n        var l;\n        while(o || s < a.length){\n            l = void 0;\n            T = t;\n            if (o) {\n                if (l = o()) {\n                    return l;\n                } else {\n                    o = void 0;\n                    if (true) {\n                        popDebugNode();\n                    }\n                }\n            } else {\n                var v = a[s++];\n                if (!shouldInclude(v, i.variables)) {} else if (v.kind !== _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.FIELD) {\n                    var d = v.kind !== _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.INLINE_FRAGMENT ? i.fragments[getName(v)] : v;\n                    if (d) {\n                        if (!d.typeCondition || (i.store.schema ? isInterfaceOfType(i.store.schema, d, e) : isFragmentHeuristicallyMatching(d, e, r, i.variables, i.store.logger))) {\n                            if (true) {\n                                pushDebugNode(e, d);\n                            }\n                            o = makeSelectionIterator(e, r, t || isDeferred(v, i.variables), getSelectionSet(d), i);\n                        }\n                    }\n                } else if (\"write\" === D || !v._generated) {\n                    return v;\n                }\n            }\n        }\n    };\n};\nvar ensureData = (e)=>null == e ? null : e;\nvar ensureLink = (e, r)=>{\n    if (!r) {\n        return r || null;\n    } else if (Array.isArray(r)) {\n        var t = new Array(r.length);\n        for(var a = 0, i = t.length; a < i; a++){\n            t[a] = ensureLink(e, r[a]);\n        }\n        return t;\n    }\n    var n = e.keyOfEntity(r);\n    if (true) {\n        if (!n && r && \"object\" == typeof r) {\n            warn(\"Can't generate a key for link(...) item.\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `\" + r.__typename + \"`.\", 12, e.logger);\n        }\n    }\n    return n;\n};\nvar _query = (e, t, a, i)=>{\n    var n = (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.formatDocument)(t.query);\n    var o = getMainOperation(n);\n    var s = e.rootFields[o.operation];\n    var l = getSelectionSet(o);\n    var v = makeContext(e, normalizeVariables(o, t.variables), getFragments(n), s, s, i);\n    if (true) {\n        pushDebugNode(s, o);\n    }\n    var d = s !== v.store.rootFields.query ? readRoot(v, s, l, a || makeData()) : readSelection(v, s, l, a || makeData());\n    if (true) {\n        popDebugNode();\n        getCurrentDependencies();\n    }\n    return {\n        dependencies: x,\n        partial: v.partial || !d,\n        hasNext: v.hasNext,\n        data: d || null\n    };\n};\nvar readRoot = (e, r, t, a)=>{\n    if (\"string\" != typeof (e.store.rootNames[r] ? r : a.__typename)) {\n        return a;\n    }\n    var i = makeSelectionIterator(r, r, T, t, e);\n    var n;\n    var o = V;\n    var s = makeData(a);\n    while(n = i()){\n        var l = getFieldAlias(n);\n        var v = a[l];\n        e.__internal.path.push(l);\n        var d = void 0;\n        if (n.selectionSet && null !== v) {\n            d = readRootField(e, getSelectionSet(n), ensureData(v));\n        } else {\n            d = v;\n        }\n        o = o || d !== v;\n        if (void 0 !== d) {\n            s[l] = d;\n        }\n        e.__internal.path.pop();\n    }\n    return o ? s : a;\n};\nvar readRootField = (e, r, t)=>{\n    if (Array.isArray(t)) {\n        var a = new Array(t.length);\n        var i = V;\n        for(var n = 0, o = t.length; n < o; n++){\n            e.__internal.path.push(n);\n            a[n] = readRootField(e, r, t[n]);\n            i = i || a[n] !== t[n];\n            e.__internal.path.pop();\n        }\n        return i ? a : t;\n    } else if (null === t) {\n        return null;\n    }\n    var s = e.store.keyOfEntity(t);\n    if (null !== s) {\n        return readSelection(e, s, r, t) || null;\n    } else {\n        return readRoot(e, t.__typename, r, t);\n    }\n};\nfunction getFieldResolver(e, r, t, a) {\n    var i = a.store.resolvers[r];\n    var n = i && i[t];\n    var o;\n    for(var s in e){\n        var l = e[s];\n        if (l && \"include\" !== s && \"skip\" !== s && a.store.directives[s]) {\n            o = a.store.directives[s](getFieldArguments(l, a.variables));\n            if (false) {}\n            break;\n        }\n    }\n    if (true) {\n        if (n && o) {\n            warn(`A resolver and directive is being used at \"${r}.${t}\" simultaneously. Only the directive will apply.`, 28, a.store.logger);\n        }\n    }\n    return o || n;\n}\nvar readSelection = (e, r, t, a, i)=>{\n    var { store: n } = e;\n    var o = r === n.rootFields.query;\n    var s = i && n.keyOfEntity(i) || r;\n    if (true) {\n        if (!o && e.store.rootNames[s]) {\n            warn(\"Invalid root traversal: A selection was being read on `\" + s + \"` which is an uncached root type.\\nThe `\" + e.store.rootFields.mutation + \"` and `\" + e.store.rootFields.subscription + \"` types are special Operation Root Types and cannot be read back from the cache.\", 25, n.logger);\n        }\n    }\n    var l = !o ? readRecord(s, \"__typename\") || i && i.__typename : r;\n    if (\"string\" != typeof l) {\n        return;\n    } else if (i && l !== i.__typename) {\n         true && warn(\"Invalid resolver data: The resolver at `\" + s + \"` returned an invalid typename that could not be reconciled with the cache.\", 8, n.logger);\n        return;\n    }\n    var v = makeSelectionIterator(l, s, T, t, e);\n    var d = !1;\n    var u = !1;\n    var c = V;\n    var p;\n    var f = e.partial;\n    var y = makeData(a);\n    while(void 0 !== (p = v())){\n        var h = getName(p);\n        var m = getFieldArguments(p, e.variables);\n        var g = getFieldAlias(p);\n        var N = getDirectives(p);\n        var _ = getFieldResolver(N, l, h, e);\n        var k = keyOfField(h, m);\n        var E = joinKeys(s, k);\n        var O = readRecord(s, k);\n        var w = i ? i[h] : void 0;\n        if ( true && n.schema && l) {\n            isFieldAvailableOnType(n.schema, l, h, e.store.logger);\n        }\n        e.__internal.path.push(g);\n        var b = void 0;\n        if (\"__typename\" === h) {\n            b = l;\n        } else if (void 0 !== w && void 0 === p.selectionSet) {\n            b = w;\n        } else if (\"read\" === D && _) {\n            var x = y;\n            if (void 0 === p.selectionSet && void 0 !== O) {\n                x = {\n                    ...y,\n                    [g]: O,\n                    [h]: O\n                };\n            }\n            updateContext(e, x, l, s, k, h);\n            b = _(x, m || {}, n, e);\n            if (p.selectionSet) {\n                b = resolveResolverResult(e, l, h, E, getSelectionSet(p), void 0 !== y[g] ? y[g] : a[g], b, ownsData(a));\n            }\n            if (n.schema && null === b && !isFieldNullable(n.schema, l, h, e.store.logger)) {\n                return;\n            }\n        } else if (!p.selectionSet) {\n            b = O;\n        } else if (void 0 !== w) {\n            b = resolveResolverResult(e, l, h, E, getSelectionSet(p), void 0 !== y[g] ? y[g] : a[g], w, ownsData(a));\n        } else {\n            var I = readLink(s, k);\n            if (void 0 !== I) {\n                b = resolveLink(e, I, l, h, getSelectionSet(p), void 0 !== y[g] ? y[g] : a[g], ownsData(a));\n            } else if (\"object\" == typeof O && null !== O) {\n                b = O;\n            }\n        }\n        if (!T && void 0 === b && (N.optional || getFieldError(e) || n.schema && isFieldNullable(n.schema, l, h, e.store.logger))) {\n            e.partial = !0;\n            b = null;\n        } else if (null === b && N.required) {\n            if (e.store.logger && \"production\" !== \"development\" && \"read\" === D) {\n                e.store.logger(\"debug\", `Got value \"null\" for required field \"${h}\"${m ? ` with args ${JSON.stringify(m)}` : \"\"} on entity \"${s}\"`);\n            }\n            b = void 0;\n        } else {\n            d = d || \"__typename\" !== h;\n        }\n        e.__internal.path.pop();\n        c = c || b !== a[g];\n        if (void 0 !== b) {\n            y[g] = b;\n        } else if (T) {\n            u = !0;\n        } else {\n            if (e.store.logger && \"production\" !== \"development\" && \"read\" === D) {\n                e.store.logger(\"debug\", `No value for field \"${h}\"${m ? ` with args ${JSON.stringify(m)}` : \"\"} on entity \"${s}\"`);\n            }\n            e.partial = f;\n            return;\n        }\n    }\n    e.partial = e.partial || f;\n    e.hasNext = e.hasNext || u;\n    return o && e.partial && !d ? void 0 : c ? y : a;\n};\nvar resolveResolverResult = (e, r, t, a, i, n, o, s)=>{\n    if (Array.isArray(o)) {\n        var { store: l } = e;\n        var v = l.schema ? isListNullable(l.schema, r, t, e.store.logger) : !1;\n        var d = e.partial;\n        var u = makeData(n, !0);\n        var c = V || !Array.isArray(n) || o.length !== n.length;\n        for(var p = 0, f = o.length; p < f; p++){\n            e.__internal.path.push(p);\n            var y = resolveResolverResult(e, r, t, joinKeys(a, `${p}`), i, null != n ? n[p] : void 0, o[p], s);\n            e.__internal.path.pop();\n            if (void 0 === y && !v) {\n                e.partial = d;\n                return;\n            } else {\n                e.partial = e.partial || void 0 === y && v;\n                u[p] = null != y ? y : null;\n                c = c || u[p] !== n[p];\n            }\n        }\n        return c ? u : n;\n    } else if (null == o) {\n        return o;\n    } else if (s && null === n) {\n        return null;\n    } else if (isDataOrKey(o)) {\n        var h = n || makeData(n);\n        return \"string\" == typeof o ? readSelection(e, o, i, h) : readSelection(e, a, i, h, o);\n    } else {\n         true && warn(\"Invalid resolver value: The field at `\" + a + \"` is a scalar (number, boolean, etc), but the GraphQL query expects a selection set for this field.\", 9, e.store.logger);\n        return;\n    }\n};\nvar resolveLink = (e, r, t, a, i, n, o)=>{\n    if (Array.isArray(r)) {\n        var { store: s } = e;\n        var l = s.schema ? isListNullable(s.schema, t, a, e.store.logger) : !1;\n        var v = makeData(n, !0);\n        var d = e.partial;\n        var u = V || !Array.isArray(n) || r.length !== n.length;\n        for(var c = 0, p = r.length; c < p; c++){\n            e.__internal.path.push(c);\n            var f = resolveLink(e, r[c], t, a, i, null != n ? n[c] : void 0, o);\n            e.__internal.path.pop();\n            if (void 0 === f && !l) {\n                e.partial = d;\n                return;\n            } else {\n                e.partial = e.partial || void 0 === f && l;\n                v[c] = f || null;\n                u = u || v[c] !== n[c];\n            }\n        }\n        return u ? v : n;\n    } else if (null === r || null === n && o) {\n        return null;\n    }\n    return readSelection(e, r, i, n || makeData(n));\n};\nvar isDataOrKey = (e)=>\"string\" == typeof e || \"object\" == typeof e && \"string\" == typeof e.__typename;\nvar _write = (e, t, a, i)=>{\n    if (true) {\n        getCurrentDependencies();\n    }\n    var n = (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.formatDocument)(t.query);\n    var o = getMainOperation(n);\n    var s = {\n        data: a || makeData(),\n        dependencies: x\n    };\n    var l = e.rootFields[o.operation];\n    var v = makeContext(e, normalizeVariables(o, t.variables), getFragments(n), l, l, i);\n    if (true) {\n        pushDebugNode(l, o);\n    }\n    writeSelection(v, l, getSelectionSet(o), s.data);\n    if (true) {\n        popDebugNode();\n    }\n    return s;\n};\nvar writeSelection = (e, r, t, a)=>{\n    var i = e.store.rootNames[r] || \"query\";\n    var n = !!e.store.rootNames[r];\n    var o = n ? r : a.__typename;\n    if (!o && r && e.optimistic) {\n        o = readRecord(r, \"__typename\");\n    }\n    if (!o) {\n         true && warn(\"Couldn't find __typename when writing.\\nIf you're writing to the cache manually have to pass a `__typename` property on each entity in your data.\", 14, e.store.logger);\n        return;\n    } else if (!n && r) {\n        writeRecord(r, \"__typename\", o);\n    }\n    var s = e.store.updates[o];\n    var l = makeSelectionIterator(o, r || o, T, t, e);\n    var v;\n    while(v = l()){\n        var d = getName(v);\n        var u = getFieldArguments(v, e.variables);\n        var c = keyOfField(d, u);\n        var p = getFieldAlias(v);\n        var f = a[e.optimistic ? d : p];\n        if (\"__typename\" === d || void 0 === f && (T || e.optimistic && \"query\" === i)) {\n            continue;\n        }\n        if (true) {\n            if (e.store.schema && o && \"__typename\" !== d) {\n                isFieldAvailableOnType(e.store.schema, o, d, e.store.logger);\n            }\n        }\n        e.__internal.path.push(p);\n        var y = void 0;\n        if (e.optimistic && \"mutation\" === i) {\n            if (!(y = e.store.optimisticMutations[d])) {\n                continue;\n            }\n        } else if (e.optimistic && \"function\" == typeof f) {\n            y = f;\n        }\n        if (y) {\n            updateContext(e, a, o, r || o, c, d);\n            f = ensureData(y(u || {}, e.store, e));\n        }\n        if (void 0 === f) {\n            if (true) {\n                if (!r || !hasField(r, c) || e.optimistic && !readRecord(r, \"__typename\")) {\n                     true && warn(\"Invalid undefined: The field at `\" + c + \"` is `undefined`, but the GraphQL query expects a \" + (void 0 === v.selectionSet ? \"scalar (number, boolean, etc)\" : \"selection set\") + \" for this field.\", 13, e.store.logger);\n                }\n            }\n            continue;\n        }\n        if (v.selectionSet) {\n            if (r && \"query\" === i) {\n                var h = joinKeys(r, c);\n                var m = writeField(e, getSelectionSet(v), ensureData(f), h, e.optimistic ? readLink(r || o, c) : void 0);\n                writeLink(r || o, c, m);\n            } else {\n                writeField(e, getSelectionSet(v), ensureData(f));\n            }\n        } else if (r && \"query\" === i) {\n            writeRecord(r || o, c, null !== f || !getFieldError(e) ? f : void 0);\n        }\n        var g = s && s[d];\n        if (g) {\n            updateContext(e, a, o, r || o, c, d);\n            a[d] = f;\n            g(a, u || {}, e.store, e);\n        }\n        e.__internal.path.pop();\n    }\n};\nvar A = /^__|PageInfo|(Connection|Edge)$/;\nvar writeField = (e, r, t, a, i)=>{\n    if (Array.isArray(t)) {\n        var n = new Array(t.length);\n        for(var o = 0, s = t.length; o < s; o++){\n            e.__internal.path.push(o);\n            var l = a ? joinKeys(a, `${o}`) : void 0;\n            var v = writeField(e, r, t[o], l, null != i ? i[o] : void 0);\n            n[o] = v;\n            e.__internal.path.pop();\n        }\n        return n;\n    } else if (null === t) {\n        return getFieldError(e) ? void 0 : null;\n    }\n    var d = e.store.keyOfEntity(t) || (\"string\" == typeof i ? i : null);\n    var u = t.__typename;\n    if (true) {\n        if (a && !e.store.keys[t.__typename] && null === d && \"string\" == typeof u && !A.test(u)) {\n            warn(\"Invalid key: The GraphQL query at the field at `\" + a + \"` has a selection set, but no key could be generated for the data at this field.\\nYou have to request `id` or `_id` fields for all selection sets or create a custom `keys` config for `\" + u + \"`.\\nEntities without keys will be embedded directly on the parent entity. If this is intentional, create a `keys` config for `\" + u + \"` that always returns null.\", 15, e.store.logger);\n        }\n    }\n    var c = d || a;\n    writeSelection(e, c, r, t);\n    return c || null;\n};\nclass Store {\n    constructor(e){\n        if (!e) {\n            e = {};\n        }\n        this.logger = e.logger;\n        this.resolvers = e.resolvers || {};\n        this.directives = e.directives || {};\n        this.optimisticMutations = e.optimistic || {};\n        this.keys = e.keys || {};\n        this.globalIDs = Array.isArray(e.globalIDs) ? new Set(e.globalIDs) : !!e.globalIDs;\n        var r = \"Query\";\n        var t = \"Mutation\";\n        var a = \"Subscription\";\n        if (e.schema) {\n            var i = (({ __schema: e })=>{\n                var r = new Map;\n                var buildNameMap = (e)=>{\n                    var r;\n                    return ()=>{\n                        if (!r) {\n                            r = {};\n                            for(var t = 0; t < e.length; t++){\n                                r[e[t].name] = e[t];\n                            }\n                        }\n                        return r;\n                    };\n                };\n                var buildType = (e)=>{\n                    switch(e.kind){\n                        case \"OBJECT\":\n                        case \"INTERFACE\":\n                            return {\n                                name: e.name,\n                                kind: e.kind,\n                                interfaces: buildNameMap(e.interfaces || []),\n                                fields: buildNameMap(e.fields.map((e)=>({\n                                        name: e.name,\n                                        type: e.type,\n                                        args: buildNameMap(e.args)\n                                    })))\n                            };\n                        case \"UNION\":\n                            return {\n                                name: e.name,\n                                kind: e.kind,\n                                types: buildNameMap(e.possibleTypes || [])\n                            };\n                    }\n                };\n                var t = {\n                    query: e.queryType ? e.queryType.name : null,\n                    mutation: e.mutationType ? e.mutationType.name : null,\n                    subscription: e.subscriptionType ? e.subscriptionType.name : null,\n                    types: void 0,\n                    isSubType (e, t) {\n                        var a = r.get(e);\n                        var i = r.get(t);\n                        if (!a || !i) {\n                            return !1;\n                        } else if (\"UNION\" === a.kind) {\n                            return !!a.types()[t];\n                        } else if (\"OBJECT\" !== a.kind && \"OBJECT\" === i.kind) {\n                            return !!i.interfaces()[e];\n                        } else {\n                            return e === t;\n                        }\n                    }\n                };\n                if (e.types) {\n                    t.types = r;\n                    for(var a = 0; a < e.types.length; a++){\n                        var i = e.types[a];\n                        if (i && i.name) {\n                            var n = buildType(i);\n                            if (n) {\n                                r.set(i.name, n);\n                            }\n                        }\n                    }\n                }\n                return t;\n            })(e.schema);\n            r = i.query || r;\n            t = i.mutation || t;\n            a = i.subscription || a;\n            if (i.types) {\n                this.schema = i;\n            }\n        }\n        this.updates = e.updates || {};\n        this.rootFields = {\n            query: r,\n            mutation: t,\n            subscription: a\n        };\n        this.rootNames = {\n            [r]: \"query\",\n            [t]: \"mutation\",\n            [a]: \"subscription\"\n        };\n        this.data = (n = r, {\n            hydrating: !1,\n            defer: !1,\n            gc: new Set,\n            persist: new Set,\n            queryRootKey: n,\n            refCount: new Map,\n            links: {\n                optimistic: new Map,\n                base: new Map\n            },\n            records: {\n                optimistic: new Map,\n                base: new Map\n            },\n            deferredKeys: new Set,\n            commutativeKeys: new Set,\n            dirtyKeys: new Set,\n            optimisticOrder: [],\n            storage: null\n        });\n        var n;\n        if (this.schema && \"production\" !== \"development\") {\n            !function expectValidKeyingConfig(e, r, t) {\n                if (true) {\n                    for(var a in r){\n                        if (true) {\n                            if (!e.types.has(a)) {\n                                warn(\"Invalid Object type: The type `\" + a + \"` is not an object in the defined schema, but the `keys` option is referencing it.\", 20, t);\n                            }\n                        }\n                    }\n                }\n            }(this.schema, this.keys, this.logger);\n            !function expectValidUpdatesConfig(e, r, t) {\n                if (false) {}\n                for(var a in r){\n                    if (!r[a]) {\n                        continue;\n                    } else if (!e.types.has(a)) {\n                        var i = \"\";\n                        if (\"Mutation\" === a && e.mutation && \"Mutation\" !== e.mutation) {\n                            i += \"\\nMaybe your config should reference `\" + e.mutation + \"`?\";\n                        } else if (\"Subscription\" === a && e.subscription && \"Subscription\" !== e.subscription) {\n                            i += \"\\nMaybe your config should reference `\" + e.subscription + \"`?\";\n                        }\n                        return  true ? warn(\"Invalid updates type: The type `\" + a + \"` is not an object in the defined schema, but the `updates` config is referencing it.\" + i, 21, t) : 0;\n                    }\n                    var n = e.types.get(a).fields();\n                    for(var o in r[a]){\n                        if (true) {\n                            if (!n[o]) {\n                                warn(\"Invalid updates field: `\" + o + \"` on `\" + a + \"` is not in the defined schema, but the `updates` config is referencing it.\", 22, t);\n                            }\n                        }\n                    }\n                }\n            }(this.schema, this.updates, this.logger);\n            !function expectValidResolversConfig(e, r, t) {\n                if (false) {}\n                for(var a in r){\n                    if (\"Query\" === a) {\n                        if (e.query) {\n                            var i = e.types.get(e.query).fields();\n                            for(var n in r.Query || {}){\n                                if (!i[n]) {\n                                    warnAboutResolver(\"Query.\" + n, t);\n                                }\n                            }\n                        } else {\n                            warnAboutResolver(\"Query\", t);\n                        }\n                    } else if (!e.types.has(a)) {\n                        warnAboutResolver(a, t);\n                    } else if (\"INTERFACE\" === e.types.get(a).kind || \"UNION\" === e.types.get(a).kind) {\n                        warnAboutAbstractResolver(a, e.types.get(a).kind, t);\n                    } else {\n                        var o = e.types.get(a).fields();\n                        for(var s in r[a] || {}){\n                            if (!o[s]) {\n                                warnAboutResolver(a + \".\" + s, t);\n                            }\n                        }\n                    }\n                }\n            }(this.schema, this.resolvers, this.logger);\n            !function expectValidOptimisticMutationsConfig(e, r, t) {\n                if (false) {}\n                if (e.mutation) {\n                    var a = e.types.get(e.mutation).fields();\n                    for(var i in r){\n                        if (true) {\n                            if (!a[i]) {\n                                warn(`Invalid optimistic mutation field: \\`${i}\\` is not a mutation field in the defined schema, but the \\`optimistic\\` option is referencing it.`, 24, t);\n                            }\n                        }\n                    }\n                }\n            }(this.schema, this.optimisticMutations, this.logger);\n        }\n    }\n    keyOfField(e, r) {\n        return keyOfField(e, r);\n    }\n    keyOfEntity(e) {\n        if (q && e === q.parent) {\n            return q.parentKey;\n        } else if (null == e || \"string\" == typeof e) {\n            return e || null;\n        } else if (!e.__typename) {\n            return null;\n        } else if (this.rootNames[e.__typename]) {\n            return e.__typename;\n        }\n        var r = null;\n        if (this.keys[e.__typename]) {\n            r = this.keys[e.__typename](e) || null;\n        } else if (null != e.id) {\n            r = `${e.id}`;\n        } else if (null != e._id) {\n            r = `${e._id}`;\n        }\n        var t = e.__typename;\n        return !0 === this.globalIDs || this.globalIDs && this.globalIDs.has(t) || !r ? r : `${t}:${r}`;\n    }\n    resolve(e, r, t) {\n        var a = null;\n        var i = this.keyOfEntity(e);\n        if (i) {\n            var n = keyOfField(r, t);\n            if (void 0 === (a = readRecord(i, n))) {\n                a = readLink(i, n);\n            }\n        }\n        return a;\n    }\n    resolveFieldByKey(e, r, t) {\n        return this.resolve(e, r, t);\n    }\n    invalidate(e, r, t) {\n        var a = this.keyOfEntity(e);\n        invariant(a,  true ? \"Can't generate a key for invalidate(...).\\nYou have to pass an id or _id field or create a custom `keys` field for `\" + (\"object\" == typeof e ? e.__typename : e + \"`.\") : 0, 19);\n        ((e, r, t)=>{\n            var a = r ? [\n                {\n                    fieldKey: keyOfField(r, t)\n                }\n            ] : inspectFields(e);\n            for(var i = 0, n = a.length; i < n; i++){\n                var { fieldKey: o } = a[i];\n                if (void 0 !== readLink(e, o)) {\n                    writeLink(e, o, void 0);\n                } else {\n                    writeRecord(e, o, void 0);\n                }\n            }\n        })(a, r, t);\n    }\n    inspectFields(e) {\n        var r = this.keyOfEntity(e);\n        return r ? inspectFields(r) : [];\n    }\n    updateQuery(e, r) {\n        var a = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.h)(e.query, e.variables);\n        var i = r(this.readQuery(a));\n        if (null !== i) {\n            _write(this, a, i, void 0);\n        }\n    }\n    readQuery(e) {\n        var r = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.h)(e.query, e.variables);\n        return _query(this, r, void 0, void 0).data;\n    }\n    readFragment(e, t, a, i) {\n        return ((e, r, t, a, i)=>{\n            var n = getFragments(r);\n            var o;\n            if (i) {\n                if (!(o = n[i])) {\n                     true && warn(\"readFragment(...) was called with a fragment name that does not exist.\\nYou provided \" + i + \" but could only find \" + Object.keys(n).join(\", \") + \".\", 6, e.logger);\n                    return null;\n                }\n            } else if (!(o = n[Object.keys(n)[0]])) {\n                 true && warn(\"readFragment(...) was called with an empty fragment.\\nYou have to call it with at least one fragment in your GraphQL document.\", 6, e.logger);\n                return null;\n            }\n            var s = getFragmentTypeName(o);\n            if (\"string\" != typeof t && !t.__typename) {\n                t.__typename = s;\n            }\n            var l = e.keyOfEntity(t);\n            if (!l) {\n                 true && warn(\"Can't generate a key for readFragment(...).\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `\" + s + \"`.\", 7, e.logger);\n                return null;\n            }\n            if (true) {\n                pushDebugNode(s, o);\n            }\n            var v = makeContext(e, a || {}, n, s, l, void 0);\n            var d = readSelection(v, l, getSelectionSet(o), makeData()) || null;\n            if (true) {\n                popDebugNode();\n            }\n            return d;\n        })(this, (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.formatDocument)(e), t, a, i);\n    }\n    writeFragment(e, t, a, i) {\n        ((e, r, t, a, i)=>{\n            var n = getFragments(r);\n            var o;\n            if (i) {\n                if (!(o = n[i])) {\n                     true && warn(\"writeFragment(...) was called with a fragment name that does not exist.\\nYou provided \" + i + \" but could only find \" + Object.keys(n).join(\", \") + \".\", 11, e.logger);\n                    return null;\n                }\n            } else if (!(o = n[Object.keys(n)[0]])) {\n                 true && warn(\"writeFragment(...) was called with an empty fragment.\\nYou have to call it with at least one fragment in your GraphQL document.\", 11, e.logger);\n                return null;\n            }\n            var s = getFragmentTypeName(o);\n            var l = {\n                __typename: s,\n                ...t\n            };\n            var v = e.keyOfEntity(l);\n            if (!v) {\n                return  true ? warn(\"Can't generate a key for writeFragment(...) data.\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `\" + s + \"`.\", 12, e.logger) : 0;\n            }\n            if (true) {\n                pushDebugNode(s, o);\n            }\n            var d = makeContext(e, a || {}, n, s, v, void 0);\n            writeSelection(d, v, getSelectionSet(o), l);\n            if (true) {\n                popDebugNode();\n            }\n        })(this, (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.formatDocument)(e), t, a, i);\n    }\n    link(e, r, ...t) {\n        var a = 2 === t.length ? t[0] : null;\n        var i = 2 === t.length ? t[1] : t[0];\n        var n = this.keyOfEntity(e);\n        if (n) {\n            writeLink(n, keyOfField(r, a), ensureLink(this, i));\n        }\n    }\n}\nvar addMetadata = (e, r)=>(0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.makeOperation)(e.kind, e, {\n        ...e.context,\n        meta: {\n            ...e.context.meta,\n            ...r\n        }\n    });\nvar toRequestPolicy = (e, r)=>(0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.makeOperation)(e.kind, e, {\n        ...e.context,\n        requestPolicy: r\n    });\nvar cacheExchange = (e)=>({ forward: t, client: i, dispatchDebug: n })=>{\n        var o = new Store(e);\n        if (e && e.storage) {\n            o.data.hydrating = !0;\n            e.storage.readData().then((r)=>{\n                ((e, r, t)=>{\n                    initDataState(\"write\", e, null);\n                    for(var a in t){\n                        var i = t[a];\n                        if (void 0 !== i) {\n                            var { entityKey: n, fieldKey: o } = deserializeKeyInfo(a);\n                            if (\":\" === i[0]) {\n                                if (void 0 === readLink(n, o)) {\n                                    writeLink(n, o, JSON.parse(i.slice(1)));\n                                }\n                            } else if (void 0 === readRecord(n, o)) {\n                                writeRecord(n, o, JSON.parse(i));\n                            }\n                        }\n                    }\n                    e.storage = r;\n                    e.hydrating = !1;\n                    clearDataState();\n                })(o.data, e.storage, r);\n                if (e.storage.onCacheHydrated) {\n                    e.storage.onCacheHydrated();\n                }\n            });\n        }\n        var f = new Map;\n        var y = [];\n        var h = new Map;\n        var m = new Map;\n        var g = new Set;\n        var N = new Set;\n        var _ = new Map;\n        var k = new Set;\n        var E = new Set;\n        var isBlockedByOptimisticUpdate = (e)=>{\n            for (var r of e.values()){\n                if (g.has(r)) {\n                    return !0;\n                }\n            }\n            return !1;\n        };\n        var collectPendingOperations = (e, r)=>{\n            if (r) {\n                for (var t of r.values()){\n                    var a = _.get(t);\n                    if (a) {\n                        for (var i of a.values()){\n                            e.add(i);\n                        }\n                    }\n                }\n            }\n        };\n        var executePendingOperations = (e, r, t)=>{\n            for (var a of r.values()){\n                if (a !== e.key) {\n                    var n = h.get(a);\n                    if (n) {\n                        if (\"query\" === e.kind) {\n                            E.add(a);\n                        }\n                        var o = \"cache-first\";\n                        if (N.has(a)) {\n                            N.delete(a);\n                            o = \"cache-and-network\";\n                        }\n                        i.reexecuteOperation(toRequestPolicy(n, o));\n                    }\n                }\n            }\n            if (!t) {\n                var s = k;\n                if (\"query\" === e.kind) {\n                    (k = E).add(e.key);\n                }\n                (E = s).clear();\n            }\n        };\n        var prepareForwardedOperation = (e)=>{\n            var t = !1;\n            if (\"query\" === e.kind) {\n                reserveLayer(o.data, e.key);\n                h.set(e.key, e);\n            } else if (\"teardown\" === e.kind) {\n                h.delete(e.key);\n                m.delete(e.key);\n                k.delete(e.key);\n                noopDataState(o.data, e.key);\n                return e;\n            } else if (\"mutation\" === e.kind && \"network-only\" !== e.context.requestPolicy) {\n                h.set(e.key, e);\n                initDataState(\"write\", o.data, e.key, !0, !1);\n                var { dependencies: i } = _write(o, e, void 0, void 0);\n                clearDataState();\n                if (i.size) {\n                    for (var n of i.values()){\n                        g.add(n);\n                    }\n                    f.set(e.key, i);\n                    var s = new Set;\n                    collectPendingOperations(s, i);\n                    executePendingOperations(e, s, !0);\n                    t = !0;\n                }\n            }\n            return (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.makeOperation)(e.kind, {\n                key: e.key,\n                query: (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.formatDocument)(e.query),\n                variables: e.variables ? filterVariables(getMainOperation(e.query), e.variables) : e.variables\n            }, {\n                ...e.context,\n                optimistic: t\n            });\n        };\n        var updateDependencies = (e, r)=>{\n            for (var t of r.values()){\n                var a = _.get(t);\n                if (!a) {\n                    _.set(t, a = new Set);\n                }\n                a.add(e.key);\n            }\n        };\n        var operationResultFromCache = (e)=>{\n            initDataState(\"read\", o.data, void 0, !1, !1);\n            var r = _query(o, e, m.get(e.key), void 0);\n            clearDataState();\n            var t = r.data ? !r.partial && !r.hasNext ? \"hit\" : \"partial\" : \"miss\";\n            m.set(e.key, r.data);\n            h.set(e.key, e);\n            updateDependencies(e, r.dependencies);\n            return {\n                outcome: t,\n                operation: e,\n                data: r.data,\n                dependencies: r.dependencies,\n                hasNext: r.hasNext\n            };\n        };\n        var updateCacheWithResult = (e, r)=>{\n            var t = h.get(e.operation.key) || e.operation;\n            if (\"mutation\" === t.kind) {\n                var a = f.get(t.key);\n                collectPendingOperations(r, a);\n                f.delete(t.key);\n            }\n            if (\"subscription\" === t.kind || e.hasNext) {\n                reserveLayer(o.data, t.key, !0);\n            }\n            var i;\n            var n = e.data;\n            if (n) {\n                initDataState(\"write\", o.data, t.key, !1, !1);\n                var s = _write(o, t, n, e.error).dependencies;\n                clearDataState();\n                collectPendingOperations(r, s);\n                var l = \"query\" === t.kind ? m.get(t.key) : null;\n                initDataState(\"read\", o.data, t.key, !1, l !== n);\n                var v = _query(o, t, l || n, e.error);\n                clearDataState();\n                n = v.data;\n                if (\"query\" === t.kind) {\n                    collectPendingOperations(r, i = v.dependencies);\n                    m.set(t.key, n);\n                }\n            } else {\n                noopDataState(o.data, t.key);\n            }\n            if (i) {\n                updateDependencies(e.operation, i);\n            }\n            return {\n                operation: t,\n                data: n,\n                error: e.error,\n                extensions: e.extensions,\n                hasNext: e.hasNext,\n                stale: e.stale\n            };\n        };\n        return (e)=>{\n            var r = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.share)((0,wonka__WEBPACK_IMPORTED_MODULE_3__.map)(operationResultFromCache)((0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e)=>\"query\" === e.kind && \"network-only\" !== e.context.requestPolicy)(e)));\n            var a = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e)=>\"query\" !== e.kind || \"network-only\" === e.context.requestPolicy)(e);\n            var m = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.map)((e)=>{\n                 true && n({\n                    type: \"cacheMiss\",\n                    message: \"The result could not be retrieved from the cache\",\n                    operation: e.operation,\n                    source: \"cacheExchange\"\n                });\n                return  true ? addMetadata(e.operation, {\n                    cacheOutcome: \"miss\"\n                }) : 0;\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e)=>\"miss\" === e.outcome && \"cache-only\" !== e.operation.context.requestPolicy && !isBlockedByOptimisticUpdate(e.dependencies) && !k.has(e.operation.key))(r));\n            var _ = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.map)((e)=>{\n                var { requestPolicy: r } = e.operation.context;\n                var t = \"cache-only\" !== r && (e.hasNext || \"cache-and-network\" === r || \"cache-first\" === r && \"partial\" === e.outcome && !k.has(e.operation.key));\n                var a = \"cache-only\" !== r && (t || \"partial\" === e.outcome && k.has(e.operation.key) && ((s = o.data).commutativeKeys.has(l = e.operation.key) || s.optimisticOrder.indexOf(l) > -1));\n                var s, l;\n                var v = {\n                    operation:  true ? addMetadata(e.operation, {\n                        cacheOutcome: e.outcome\n                    }) : 0,\n                    data: e.data,\n                    error: e.error,\n                    extensions: e.extensions,\n                    stale: a && !e.hasNext,\n                    hasNext: t && e.hasNext\n                };\n                if (!t) {} else if (!isBlockedByOptimisticUpdate(e.dependencies)) {\n                    i.reexecuteOperation(toRequestPolicy(h.get(e.operation.key) || e.operation, \"network-only\"));\n                } else if (\"cache-and-network\" === r) {\n                    N.add(e.operation.key);\n                }\n                 true && n({\n                    type: \"cacheHit\",\n                    message: \"A requested operation was found and returned from the cache.\",\n                    operation: e.operation,\n                    data: {\n                        value: v\n                    },\n                    source: \"cacheExchange\"\n                });\n                return v;\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e)=>\"miss\" !== e.outcome || \"cache-only\" === e.operation.context.requestPolicy)(r));\n            var E = t((0,wonka__WEBPACK_IMPORTED_MODULE_3__.map)(prepareForwardedOperation)((0,wonka__WEBPACK_IMPORTED_MODULE_3__.merge)([\n                a,\n                m\n            ])));\n            var O = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.map)((e)=>{\n                var r = new Set;\n                var t = updateCacheWithResult(e, r);\n                executePendingOperations(e.operation, r, !1);\n                return t;\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e)=>!f.has(e.operation.key))(E));\n            var w = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.mergeMap)((e)=>{\n                if (y.push(e) < f.size) {\n                    return wonka__WEBPACK_IMPORTED_MODULE_3__.empty;\n                }\n                for(var r = 0; r < y.length; r++){\n                    reserveLayer(o.data, y[r].operation.key);\n                }\n                g.clear();\n                var t = [];\n                var a = new Set;\n                var i;\n                while(i = y.shift()){\n                    t.push(updateCacheWithResult(i, a));\n                }\n                executePendingOperations(e.operation, a, !1);\n                return (0,wonka__WEBPACK_IMPORTED_MODULE_3__.fromArray)(t);\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e)=>f.has(e.operation.key))(E));\n            return (0,wonka__WEBPACK_IMPORTED_MODULE_3__.merge)([\n                O,\n                w,\n                _\n            ]);\n        };\n    };\nvar K = {\n    \"cache-only\": 0,\n    \"cache-first\": 1,\n    \"network-only\": 2,\n    \"cache-and-network\": 3\n};\nvar offlineExchange = (e)=>(r)=>{\n        var { storage: n } = e;\n        var o = e.isOfflineError || ((e)=>e && e.networkError && !e.response && (\"undefined\" != typeof navigator && !1 === navigator.onLine || /request failed|failed to fetch|network\\s?error/i.test(e.networkError.message)));\n        if (n && n.onOnline && n.readMetadata && n.writeMetadata) {\n            var { forward: l, client: u, dispatchDebug: c } = r;\n            var { source: p, next: h } = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.makeSubject)();\n            var m = [];\n            var g = !1;\n            var N = !1;\n            var updateMetadata = ()=>{\n                if (g) {\n                    var e = [];\n                    for(var r = 0; r < m.length; r++){\n                        var t = m[r];\n                        if (\"mutation\" === t.kind) {\n                            e.push({\n                                query: (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.s)(t.query),\n                                variables: t.variables,\n                                extensions: t.extensions\n                            });\n                        }\n                    }\n                    n.writeMetadata(e);\n                }\n            };\n            var filterQueue = (e)=>{\n                for(var r = m.length - 1; r >= 0; r--){\n                    if (m[r].key === e) {\n                        m.splice(r, 1);\n                    }\n                }\n            };\n            var flushQueue = ()=>{\n                if (!N) {\n                    var e = new Set;\n                    N = !0;\n                    for(var r = 0; r < m.length; r++){\n                        var t = m[r];\n                        if (\"mutation\" === t.kind || !e.has(t.key)) {\n                            e.add(t.key);\n                            if (\"subscription\" !== t.kind) {\n                                h((0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.makeOperation)(\"teardown\", t));\n                                var i = \"cache-first\";\n                                for(var n = 0; n < m.length; n++){\n                                    var { requestPolicy: o } = m[n].context;\n                                    if (K[o] > K[i]) {\n                                        i = o;\n                                    }\n                                }\n                                h(toRequestPolicy(t, i));\n                            } else {\n                                h(toRequestPolicy(t, \"cache-first\"));\n                            }\n                        }\n                    }\n                    N = !1;\n                    m.length = 0;\n                    updateMetadata();\n                }\n            };\n            var _ = cacheExchange({\n                ...e,\n                storage: {\n                    ...n,\n                    readData () {\n                        var e = n.readData();\n                        return {\n                            async then (r) {\n                                var a = await n.readMetadata();\n                                for(var i = 0; a && i < a.length; i++){\n                                    m.push(u.createRequestOperation(\"mutation\", (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.h)(a[i].query, a[i].variables), a[i].extensions));\n                                }\n                                r(await e);\n                                n.onOnline(flushQueue);\n                                g = !0;\n                                flushQueue();\n                            }\n                        };\n                    }\n                }\n            })({\n                client: u,\n                dispatchDebug: c,\n                forward: (e)=>(0,wonka__WEBPACK_IMPORTED_MODULE_3__.share)((0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e)=>{\n                        if (g && \"mutation\" === e.operation.kind && e.operation.context.optimistic && o(e.error, e)) {\n                            m.push(e.operation);\n                            updateMetadata();\n                            return !1;\n                        }\n                        return !0;\n                    })(l(e)))\n            });\n            return (e)=>{\n                var r = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.merge)([\n                    p,\n                    (0,wonka__WEBPACK_IMPORTED_MODULE_3__.onPush)((e)=>{\n                        if (\"query\" === e.kind && !g) {\n                            m.push(e);\n                        } else if (\"teardown\" === e.kind) {\n                            filterQueue(e.key);\n                        }\n                    })(e)\n                ]);\n                return (0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e)=>{\n                    if (\"query\" === e.operation.kind) {\n                        if (o(e.error, e)) {\n                            h(toRequestPolicy(e.operation, \"cache-only\"));\n                            m.push(e.operation);\n                            return !1;\n                        } else if (!g) {\n                            filterQueue(e.operation.key);\n                        }\n                    }\n                    return !0;\n                })(_(r));\n            };\n        }\n        return cacheExchange(e)(r);\n    };\n //# sourceMappingURL=urql-exchange-graphcache.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@urql/exchange-persisted/dist/urql-exchange-persisted.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@urql/exchange-persisted/dist/urql-exchange-persisted.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   persistedExchange: () => (/* binding */ persistedExchange)\n/* harmony export */ });\n/* harmony import */ var wonka__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wonka */ \"(ssr)/./node_modules/wonka/dist/wonka.mjs\");\n/* harmony import */ var _urql_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @urql/core */ \"(ssr)/./node_modules/@urql/core/dist/urql-core.mjs\");\n/* harmony import */ var _urql_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @urql/core */ \"(ssr)/./node_modules/@urql/core/dist/urql-core-chunk.mjs\");\n\n\nvar d =  false ? 0 : \"undefined\" != typeof self ? self.crypto : null;\nvar p;\nvar hash = async (e)=>{\n    if (d && d.subtle) {\n        var r = await d.subtle.digest({\n            name: \"SHA-256\"\n        }, (new TextEncoder).encode(e));\n        return new Uint8Array(r).reduce((e, r)=>e + r.toString(16).padStart(2, \"0\"), \"\");\n    } else if (await (async ()=>{\n        if (!p) {\n            try {\n                p = new Function(\"require\", 'return require(\"crypto\")')(require);\n            } catch (e) {\n                try {\n                    p = new Function('return import(\"crypto\")')();\n                } catch (e) {}\n            }\n        }\n        return p;\n    })()) {\n        return (await p).createHash(\"sha256\").update(e).digest(\"hex\");\n    }\n    if (true) {\n        console.warn(\"[@urql/exchange-persisted-fetch]: The Node Crypto and Web Crypto APIs are not available.\\nThis is an unexpected error. Please report it by filing a GitHub Issue.\");\n    }\n    return \"\";\n};\nvar persistedExchange = (d)=>({ forward: p })=>{\n        if (!d) {\n            d = {};\n        }\n        var c = d.preferGetForPersistedQueries;\n        var y = !!d.enforcePersistedQueries;\n        var f = d.generateHash || hash;\n        var h = !!d.enableForMutation;\n        var l = !0;\n        var operationFilter = (e)=>l && !e.context.persistAttempt && (h && \"mutation\" === e.kind || \"query\" === e.kind);\n        return (d)=>{\n            var h = (0,wonka__WEBPACK_IMPORTED_MODULE_0__.makeSubject)();\n            var x = (0,wonka__WEBPACK_IMPORTED_MODULE_0__.filter)((e)=>!operationFilter(e))(d);\n            var v = (0,wonka__WEBPACK_IMPORTED_MODULE_0__.mergeMap)((e)=>{\n                var t = (async (e)=>{\n                    var r = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.makeOperation)(e.kind, e, {\n                        ...e.context,\n                        persistAttempt: !0\n                    });\n                    var t = await f((0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.s)(e.query), e.query);\n                    if (t) {\n                        r.extensions = {\n                            ...r.extensions,\n                            persistedQuery: {\n                                version: 1,\n                                sha256Hash: t\n                            }\n                        };\n                        if (\"query\" === r.kind && c) {\n                            r.context.preferGetMethod = c;\n                        }\n                    }\n                    return r;\n                })(e);\n                return (0,wonka__WEBPACK_IMPORTED_MODULE_0__.takeUntil)((0,wonka__WEBPACK_IMPORTED_MODULE_0__.filter)((r)=>\"teardown\" === r.kind && r.key === e.key)(d))((0,wonka__WEBPACK_IMPORTED_MODULE_0__.fromPromise)(t));\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_0__.filter)(operationFilter)(d));\n            return (0,wonka__WEBPACK_IMPORTED_MODULE_0__.filter)((e)=>!!e)((0,wonka__WEBPACK_IMPORTED_MODULE_0__.map)((e)=>{\n                if (!y && e.operation.extensions && e.operation.extensions.persistedQuery) {\n                    if (e.error && e.error.graphQLErrors.some((e)=>\"PersistedQueryNotSupported\" === e.message)) {\n                        l = !1;\n                        var r = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.makeOperation)(e.operation.kind, e.operation);\n                        if (r.extensions) {\n                            delete r.extensions.persistedQuery;\n                        }\n                        h.next(r);\n                        return null;\n                    } else if (e.error && ((e)=>e.graphQLErrors.some((e)=>\"PersistedQueryNotFound\" === e.message))(e.error)) {\n                        if (e.operation.extensions.persistedQuery.miss) {\n                            if (true) {\n                                console.warn(\"persistedExchange()’s results include two misses for the same operation.\\nThis is not expected as it means a persisted error has been delivered for a non-persisted query!\\nAnother exchange with a cache may be delivering an outdated result. For example, a server-side ssrExchange() may be caching an errored result.\\nTry moving the persistedExchange() in past these exchanges, for example in front of your fetchExchange.\");\n                            }\n                            return e;\n                        }\n                        var t = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.makeOperation)(e.operation.kind, e.operation);\n                        t.extensions = {\n                            ...t.extensions,\n                            persistedQuery: {\n                                ...(t.extensions || {}).persistedQuery,\n                                miss: !0\n                            }\n                        };\n                        h.next(t);\n                        return null;\n                    }\n                }\n                return e;\n            })(p((0,wonka__WEBPACK_IMPORTED_MODULE_0__.merge)([\n                v,\n                x,\n                h.source\n            ]))));\n        };\n    };\n //# sourceMappingURL=urql-exchange-persisted.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@urql/exchange-persisted/dist/urql-exchange-persisted.mjs\n");

/***/ })

};
;