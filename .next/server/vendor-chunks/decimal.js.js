"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/decimal.js";
exports.ids = ["vendor-chunks/decimal.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/decimal.js/decimal.mjs":
/*!*********************************************!*\
  !*** ./node_modules/decimal.js/decimal.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Decimal: () => (/* binding */ Decimal),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\r\n *  decimal.js v10.4.3\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */ // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n// The maximum exponent magnitude.\n// The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\nvar EXP_LIMIT = 9e15, // The limit on the value of `precision`, and on the value of the first argument to\n// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\nMAX_DIGITS = 1e9, // Base conversion alphabet.\nNUMERALS = \"0123456789abcdef\", // The natural logarithm of 10 (1025 digits).\nLN10 = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", // Pi (1025 digits).\nPI = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", // The initial configuration properties of the Decimal constructor.\nDEFAULTS = {\n    // These values must be integers within the stated ranges (inclusive).\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\n    // The maximum number of significant digits of the result of a calculation or base conversion.\n    // E.g. `Decimal.config({ precision: 20 });`\n    precision: 20,\n    // The rounding mode used when rounding to `precision`.\n    //\n    // ROUND_UP         0 Away from zero.\n    // ROUND_DOWN       1 Towards zero.\n    // ROUND_CEIL       2 Towards +Infinity.\n    // ROUND_FLOOR      3 Towards -Infinity.\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    //\n    // E.g.\n    // `Decimal.rounding = 4;`\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n    rounding: 4,\n    // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN  6 The IEEE 754 remainder function.\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\n    //\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\n    // be used, but they may not give useful results.\n    modulo: 1,\n    // The exponent value at and beneath which `toString` returns exponential notation.\n    // JavaScript numbers: -7\n    toExpNeg: -7,\n    // The exponent value at and above which `toString` returns exponential notation.\n    // JavaScript numbers: 21\n    toExpPos: 21,\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // JavaScript numbers: -324  (5e-324)\n    minE: -EXP_LIMIT,\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\n    maxE: EXP_LIMIT,\n    // Whether to use cryptographically-secure random number generation, if available.\n    crypto: false // true/false\n}, // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\ninexact, quadrant, external = true, decimalError = \"[DecimalError] \", invalidArgument = decimalError + \"Invalid argument: \", precisionLimitExceeded = decimalError + \"Precision limit exceeded\", cryptoUnavailable = decimalError + \"crypto unavailable\", tag = \"[object Decimal]\", mathfloor = Math.floor, mathpow = Math.pow, isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, LN10_PRECISION = LN10.length - 1, PI_PRECISION = PI.length - 1, // Decimal.prototype object\nP = {\n    toStringTag: tag\n};\n// Decimal prototype methods\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */ /*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */ P.absoluteValue = P.abs = function() {\n    var x = new this.constructor(this);\n    if (x.s < 0) x.s = 1;\n    return finalise(x);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */ P.ceil = function() {\n    return finalise(new this.constructor(this), this.e + 1, 2);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */ P.clampedTo = P.clamp = function(min, max) {\n    var k, x = this, Ctor = x.constructor;\n    min = new Ctor(min);\n    max = new Ctor(max);\n    if (!min.s || !max.s) return new Ctor(NaN);\n    if (min.gt(max)) throw Error(invalidArgument + max);\n    k = x.cmp(min);\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\n};\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */ P.comparedTo = P.cmp = function(y) {\n    var i, j, xdL, ydL, x = this, xd = x.d, yd = (y = new x.constructor(y)).d, xs = x.s, ys = y.s;\n    // Either NaN or ±Infinity?\n    if (!xd || !yd) {\n        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\n    }\n    // Either zero?\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\n    // Signs differ?\n    if (xs !== ys) return xs;\n    // Compare exponents.\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\n    xdL = xd.length;\n    ydL = yd.length;\n    // Compare digit by digit.\n    for(i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i){\n        if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\n    }\n    // Compare lengths.\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\n};\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */ P.cosine = P.cos = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.d) return new Ctor(NaN);\n    // cos(0) = cos(-0) = 1\n    if (!x.d[0]) return new Ctor(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\n};\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */ P.cubeRoot = P.cbrt = function() {\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx, x = this, Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    external = false;\n    // Initial estimate.\n    s = x.s * mathpow(x.s * x, 1 / 3);\n    // Math.cbrt underflow/overflow?\n    // Pass x to Math.pow as integer, then adjust the exponent of the result.\n    if (!s || Math.abs(s) == 1 / 0) {\n        n = digitsToString(x.d);\n        e = x.e;\n        // Adjust n exponent so it is a multiple of 3 away from x exponent.\n        if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? \"0\" : \"00\";\n        s = mathpow(n, 1 / 3);\n        // Rarely, e may be one less than the result exponent value.\n        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\n        if (s == 1 / 0) {\n            n = \"5e\" + e;\n        } else {\n            n = s.toExponential();\n            n = n.slice(0, n.indexOf(\"e\") + 1) + e;\n        }\n        r = new Ctor(n);\n        r.s = x.s;\n    } else {\n        r = new Ctor(s.toString());\n    }\n    sd = (e = Ctor.precision) + 3;\n    // Halley's method.\n    // TODO? Compare Newton's method.\n    for(;;){\n        t = r;\n        t3 = t.times(t).times(t);\n        t3plusx = t3.plus(x);\n        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\n        // TODO? Replace with for-loop and checkRoundingDigits.\n        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n            n = n.slice(sd - 3, sd + 1);\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\n            // , i.e. approaching a rounding boundary, continue the iteration.\n            if (n == \"9999\" || !rep && n == \"4999\") {\n                // On the first iteration only, check to see if rounding up gives the exact result as the\n                // nines may infinitely repeat.\n                if (!rep) {\n                    finalise(t, e + 1, 0);\n                    if (t.times(t).times(t).eq(x)) {\n                        r = t;\n                        break;\n                    }\n                }\n                sd += 4;\n                rep = 1;\n            } else {\n                // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n                // If not, then there are further digits and m will be truthy.\n                if (!+n || !+n.slice(1) && n.charAt(0) == \"5\") {\n                    // Truncate to the first rounding digit.\n                    finalise(r, e + 1, 1);\n                    m = !r.times(r).times(r).eq(x);\n                }\n                break;\n            }\n        }\n    }\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n};\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */ P.decimalPlaces = P.dp = function() {\n    var w, d = this.d, n = NaN;\n    if (d) {\n        w = d.length - 1;\n        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\n        // Subtract the number of trailing zeros of the last word.\n        w = d[w];\n        if (w) for(; w % 10 == 0; w /= 10)n--;\n        if (n < 0) n = 0;\n    }\n    return n;\n};\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */ P.dividedBy = P.div = function(y) {\n    return divide(this, new this.constructor(y));\n};\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */ P.dividedToIntegerBy = P.divToInt = function(y) {\n    var x = this, Ctor = x.constructor;\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\n};\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */ P.equals = P.eq = function(y) {\n    return this.cmp(y) === 0;\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */ P.floor = function() {\n    return finalise(new this.constructor(this), this.e + 1, 3);\n};\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */ P.greaterThan = P.gt = function(y) {\n    return this.cmp(y) > 0;\n};\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */ P.greaterThanOrEqualTo = P.gte = function(y) {\n    var k = this.cmp(y);\n    return k == 1 || k === 0;\n};\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */ P.hyperbolicCosine = P.cosh = function() {\n    var k, n, pr, rm, len, x = this, Ctor = x.constructor, one = new Ctor(1);\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\n    if (x.isZero()) return one;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\n    // Estimate the optimum number of times to use the argument reduction.\n    // TODO? Estimation reused from cosine() and may not be optimal here.\n    if (len < 32) {\n        k = Math.ceil(len / 3);\n        n = (1 / tinyPow(4, k)).toString();\n    } else {\n        k = 16;\n        n = \"2.3283064365386962890625e-10\";\n    }\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\n    // Reverse argument reduction\n    var cosh2_x, i = k, d8 = new Ctor(8);\n    for(; i--;){\n        cosh2_x = x.times(x);\n        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\n    }\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\n};\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */ P.hyperbolicSine = P.sinh = function() {\n    var k, pr, rm, len, x = this, Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n    if (len < 3) {\n        x = taylorSeries(Ctor, 2, x, x, true);\n    } else {\n        // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\n        // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\n        // 3 multiplications and 1 addition\n        // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\n        // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\n        // 4 multiplications and 2 additions\n        // Estimate the optimum number of times to use the argument reduction.\n        k = 1.4 * Math.sqrt(len);\n        k = k > 16 ? 16 : k | 0;\n        x = x.times(1 / tinyPow(5, k));\n        x = taylorSeries(Ctor, 2, x, x, true);\n        // Reverse argument reduction\n        var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);\n        for(; k--;){\n            sinh2_x = x.times(x);\n            x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\n        }\n    }\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(x, pr, rm, true);\n};\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */ P.hyperbolicTangent = P.tanh = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(x.s);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 7;\n    Ctor.rounding = 1;\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\n};\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */ P.inverseCosine = P.acos = function() {\n    var halfPi, x = this, Ctor = x.constructor, k = x.abs().cmp(1), pr = Ctor.precision, rm = Ctor.rounding;\n    if (k !== -1) {\n        return k === 0 ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) : new Ctor(NaN);\n    }\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n    x = x.asin();\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return halfPi.minus(x);\n};\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */ P.inverseHyperbolicCosine = P.acosh = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\n    if (!x.isFinite()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).minus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n};\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */ P.inverseHyperbolicSine = P.asinh = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).plus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n};\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */ P.inverseHyperbolicTangent = P.atanh = function() {\n    var pr, rm, wpr, xsd, x = this, Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    xsd = x.sd();\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\n    Ctor.precision = wpr = xsd - x.e;\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\n    Ctor.precision = pr + 4;\n    Ctor.rounding = 1;\n    x = x.ln();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(0.5);\n};\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */ P.inverseSine = P.asin = function() {\n    var halfPi, k, pr, rm, x = this, Ctor = x.constructor;\n    if (x.isZero()) return new Ctor(x);\n    k = x.abs().cmp(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (k !== -1) {\n        // |x| is 1\n        if (k === 0) {\n            halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n            halfPi.s = x.s;\n            return halfPi;\n        }\n        // |x| > 1 or x is NaN\n        return new Ctor(NaN);\n    }\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(2);\n};\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */ P.inverseTangent = P.atan = function() {\n    var i, j, k, n, px, t, r, wpr, x2, x = this, Ctor = x.constructor, pr = Ctor.precision, rm = Ctor.rounding;\n    if (!x.isFinite()) {\n        if (!x.s) return new Ctor(NaN);\n        if (pr + 4 <= PI_PRECISION) {\n            r = getPi(Ctor, pr + 4, rm).times(0.5);\n            r.s = x.s;\n            return r;\n        }\n    } else if (x.isZero()) {\n        return new Ctor(x);\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\n        r = getPi(Ctor, pr + 4, rm).times(0.25);\n        r.s = x.s;\n        return r;\n    }\n    Ctor.precision = wpr = pr + 10;\n    Ctor.rounding = 1;\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\n    // Argument reduction\n    // Ensure |x| < 0.42\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\n    for(i = k; i; --i)x = x.div(x.times(x).plus(1).sqrt().plus(1));\n    external = false;\n    j = Math.ceil(wpr / LOG_BASE);\n    n = 1;\n    x2 = x.times(x);\n    r = new Ctor(x);\n    px = x;\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n    for(; i !== -1;){\n        px = px.times(x2);\n        t = r.minus(px.div(n += 2));\n        px = px.times(x2);\n        r = t.plus(px.div(n += 2));\n        if (r.d[j] !== void 0) for(i = j; r.d[i] === t.d[i] && i--;);\n    }\n    if (k) r = r.times(2 << k - 1);\n    external = true;\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\n};\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */ P.isFinite = function() {\n    return !!this.d;\n};\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */ P.isInteger = P.isInt = function() {\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\n};\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */ P.isNaN = function() {\n    return !this.s;\n};\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */ P.isNegative = P.isNeg = function() {\n    return this.s < 0;\n};\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */ P.isPositive = P.isPos = function() {\n    return this.s > 0;\n};\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */ P.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */ P.lessThan = P.lt = function(y) {\n    return this.cmp(y) < 0;\n};\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */ P.lessThanOrEqualTo = P.lte = function(y) {\n    return this.cmp(y) < 1;\n};\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */ P.logarithm = P.log = function(base) {\n    var isBase10, d, denominator, k, inf, num, sd, r, arg = this, Ctor = arg.constructor, pr = Ctor.precision, rm = Ctor.rounding, guard = 5;\n    // Default base is 10.\n    if (base == null) {\n        base = new Ctor(10);\n        isBase10 = true;\n    } else {\n        base = new Ctor(base);\n        d = base.d;\n        // Return NaN if base is negative, or non-finite, or is 0 or 1.\n        if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\n        isBase10 = base.eq(10);\n    }\n    d = arg.d;\n    // Is arg negative, non-finite, 0 or 1?\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\n        return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\n    }\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\n    // integer power of 10.\n    if (isBase10) {\n        if (d.length > 1) {\n            inf = true;\n        } else {\n            for(k = d[0]; k % 10 === 0;)k /= 10;\n            inf = k !== 1;\n        }\n    }\n    external = false;\n    sd = pr + guard;\n    num = naturalLogarithm(arg, sd);\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n    // The result will have 5 rounding digits.\n    r = divide(num, denominator, sd, 1);\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\n    // calculate 10 further digits.\n    //\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\n    // further digits, the last 14 are nines, round up and assume the result is exact.\n    // Also assume the result is exact if the last 14 are zero.\n    //\n    // Example of a result that will be incorrectly rounded:\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\n    // place is still 2.6.\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\n        do {\n            sd += 10;\n            num = naturalLogarithm(arg, sd);\n            denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n            r = divide(num, denominator, sd, 1);\n            if (!inf) {\n                // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\n                if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\n                    r = finalise(r, pr + 1, 0);\n                }\n                break;\n            }\n        }while (checkRoundingDigits(r.d, k += 10, rm));\n    }\n    external = true;\n    return finalise(r, pr, rm);\n};\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */ /*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */ /*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */ P.minus = P.sub = function(y) {\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd, x = this, Ctor = x.constructor;\n    y = new Ctor(y);\n    // If either is not finite...\n    if (!x.d || !y.d) {\n        // Return NaN if either is NaN.\n        if (!x.s || !y.s) y = new Ctor(NaN);\n        else if (x.d) y.s = -y.s;\n        else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\n        return y;\n    }\n    // If signs differ...\n    if (x.s != y.s) {\n        y.s = -y.s;\n        return x.plus(y);\n    }\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    // If either is zero...\n    if (!xd[0] || !yd[0]) {\n        // Return y negated if x is zero and y is non-zero.\n        if (yd[0]) y.s = -y.s;\n        else if (xd[0]) y = new Ctor(x);\n        else return new Ctor(rm === 3 ? -0 : 0);\n        return external ? finalise(y, pr, rm) : y;\n    }\n    // x and y are finite, non-zero numbers with the same sign.\n    // Calculate base 1e7 exponents.\n    e = mathfloor(y.e / LOG_BASE);\n    xe = mathfloor(x.e / LOG_BASE);\n    xd = xd.slice();\n    k = xe - e;\n    // If base 1e7 exponents differ...\n    if (k) {\n        xLTy = k < 0;\n        if (xLTy) {\n            d = xd;\n            k = -k;\n            len = yd.length;\n        } else {\n            d = yd;\n            e = xe;\n            len = xd.length;\n        }\n        // Numbers with massively different exponents would result in a very high number of\n        // zeros needing to be prepended, but this can be avoided while still ensuring correct\n        // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n        if (k > i) {\n            k = i;\n            d.length = 1;\n        }\n        // Prepend zeros to equalise exponents.\n        d.reverse();\n        for(i = k; i--;)d.push(0);\n        d.reverse();\n    // Base 1e7 exponents equal.\n    } else {\n        // Check digits to determine which is the bigger number.\n        i = xd.length;\n        len = yd.length;\n        xLTy = i < len;\n        if (xLTy) len = i;\n        for(i = 0; i < len; i++){\n            if (xd[i] != yd[i]) {\n                xLTy = xd[i] < yd[i];\n                break;\n            }\n        }\n        k = 0;\n    }\n    if (xLTy) {\n        d = xd;\n        xd = yd;\n        yd = d;\n        y.s = -y.s;\n    }\n    len = xd.length;\n    // Append zeros to `xd` if shorter.\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\n    for(i = yd.length - len; i > 0; --i)xd[len++] = 0;\n    // Subtract yd from xd.\n    for(i = yd.length; i > k;){\n        if (xd[--i] < yd[i]) {\n            for(j = i; j && xd[--j] === 0;)xd[j] = BASE - 1;\n            --xd[j];\n            xd[i] += BASE;\n        }\n        xd[i] -= yd[i];\n    }\n    // Remove trailing zeros.\n    for(; xd[--len] === 0;)xd.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for(; xd[0] === 0; xd.shift())--e;\n    // Zero?\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n};\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */ P.modulo = P.mod = function(y) {\n    var q, x = this, Ctor = x.constructor;\n    y = new Ctor(y);\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\n    // Return x if y is ±Infinity or x is ±0.\n    if (!y.d || x.d && !x.d[0]) {\n        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\n    }\n    // Prevent rounding of intermediate calculations.\n    external = false;\n    if (Ctor.modulo == 9) {\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // result = x - q * y    where  0 <= result < abs(y)\n        q = divide(x, y.abs(), 0, 3, 1);\n        q.s *= y.s;\n    } else {\n        q = divide(x, y, 0, Ctor.modulo, 1);\n    }\n    q = q.times(y);\n    external = true;\n    return x.minus(q);\n};\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */ P.naturalExponential = P.exp = function() {\n    return naturalExponential(this);\n};\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */ P.naturalLogarithm = P.ln = function() {\n    return naturalLogarithm(this);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */ P.negated = P.neg = function() {\n    var x = new this.constructor(this);\n    x.s = -x.s;\n    return finalise(x);\n};\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */ P.plus = P.add = function(y) {\n    var carry, d, e, i, k, len, pr, rm, xd, yd, x = this, Ctor = x.constructor;\n    y = new Ctor(y);\n    // If either is not finite...\n    if (!x.d || !y.d) {\n        // Return NaN if either is NaN.\n        if (!x.s || !y.s) y = new Ctor(NaN);\n        else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\n        return y;\n    }\n    // If signs differ...\n    if (x.s != y.s) {\n        y.s = -y.s;\n        return x.minus(y);\n    }\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    // If either is zero...\n    if (!xd[0] || !yd[0]) {\n        // Return x if y is zero.\n        // Return y if y is non-zero.\n        if (!yd[0]) y = new Ctor(x);\n        return external ? finalise(y, pr, rm) : y;\n    }\n    // x and y are finite, non-zero numbers with the same sign.\n    // Calculate base 1e7 exponents.\n    k = mathfloor(x.e / LOG_BASE);\n    e = mathfloor(y.e / LOG_BASE);\n    xd = xd.slice();\n    i = k - e;\n    // If base 1e7 exponents differ...\n    if (i) {\n        if (i < 0) {\n            d = xd;\n            i = -i;\n            len = yd.length;\n        } else {\n            d = yd;\n            e = k;\n            len = xd.length;\n        }\n        // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n        k = Math.ceil(pr / LOG_BASE);\n        len = k > len ? k + 1 : len + 1;\n        if (i > len) {\n            i = len;\n            d.length = 1;\n        }\n        // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n        d.reverse();\n        for(; i--;)d.push(0);\n        d.reverse();\n    }\n    len = xd.length;\n    i = yd.length;\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n    if (len - i < 0) {\n        i = len;\n        d = yd;\n        yd = xd;\n        xd = d;\n    }\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n    for(carry = 0; i;){\n        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n        xd[i] %= BASE;\n    }\n    if (carry) {\n        xd.unshift(carry);\n        ++e;\n    }\n    // Remove trailing zeros.\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    for(len = xd.length; xd[--len] == 0;)xd.pop();\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n};\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */ P.precision = P.sd = function(z) {\n    var k, x = this;\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n    if (x.d) {\n        k = getPrecision(x.d);\n        if (z && x.e + 1 > k) k = x.e + 1;\n    } else {\n        k = NaN;\n    }\n    return k;\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */ P.round = function() {\n    var x = this, Ctor = x.constructor;\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\n};\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */ P.sine = P.sin = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\n};\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */ P.squareRoot = P.sqrt = function() {\n    var m, n, sd, r, rep, t, x = this, d = x.d, e = x.e, s = x.s, Ctor = x.constructor;\n    // Negative/NaN/Infinity/zero?\n    if (s !== 1 || !d || !d[0]) {\n        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\n    }\n    external = false;\n    // Initial estimate.\n    s = Math.sqrt(+x);\n    // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n    if (s == 0 || s == 1 / 0) {\n        n = digitsToString(d);\n        if ((n.length + e) % 2 == 0) n += \"0\";\n        s = Math.sqrt(n);\n        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n        if (s == 1 / 0) {\n            n = \"5e\" + e;\n        } else {\n            n = s.toExponential();\n            n = n.slice(0, n.indexOf(\"e\") + 1) + e;\n        }\n        r = new Ctor(n);\n    } else {\n        r = new Ctor(s.toString());\n    }\n    sd = (e = Ctor.precision) + 3;\n    // Newton-Raphson iteration.\n    for(;;){\n        t = r;\n        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\n        // TODO? Replace with for-loop and checkRoundingDigits.\n        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n            n = n.slice(sd - 3, sd + 1);\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n            // 4999, i.e. approaching a rounding boundary, continue the iteration.\n            if (n == \"9999\" || !rep && n == \"4999\") {\n                // On the first iteration only, check to see if rounding up gives the exact result as the\n                // nines may infinitely repeat.\n                if (!rep) {\n                    finalise(t, e + 1, 0);\n                    if (t.times(t).eq(x)) {\n                        r = t;\n                        break;\n                    }\n                }\n                sd += 4;\n                rep = 1;\n            } else {\n                // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n                // If not, then there are further digits and m will be truthy.\n                if (!+n || !+n.slice(1) && n.charAt(0) == \"5\") {\n                    // Truncate to the first rounding digit.\n                    finalise(r, e + 1, 1);\n                    m = !r.times(r).eq(x);\n                }\n                break;\n            }\n        }\n    }\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n};\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */ P.tangent = P.tan = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 10;\n    Ctor.rounding = 1;\n    x = x.sin();\n    x.s = 1;\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\n};\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */ P.times = P.mul = function(y) {\n    var carry, e, i, k, r, rL, t, xdL, ydL, x = this, Ctor = x.constructor, xd = x.d, yd = (y = new Ctor(y)).d;\n    y.s *= x.s;\n    // If either is NaN, ±Infinity or ±0...\n    if (!xd || !xd[0] || !yd || !yd[0]) {\n        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd ? NaN : !xd || !yd ? y.s / 0 : y.s * 0);\n    }\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\n    xdL = xd.length;\n    ydL = yd.length;\n    // Ensure xd points to the longer array.\n    if (xdL < ydL) {\n        r = xd;\n        xd = yd;\n        yd = r;\n        rL = xdL;\n        xdL = ydL;\n        ydL = rL;\n    }\n    // Initialise the result array with zeros.\n    r = [];\n    rL = xdL + ydL;\n    for(i = rL; i--;)r.push(0);\n    // Multiply!\n    for(i = ydL; --i >= 0;){\n        carry = 0;\n        for(k = xdL + i; k > i;){\n            t = r[k] + yd[i] * xd[k - i - 1] + carry;\n            r[k--] = t % BASE | 0;\n            carry = t / BASE | 0;\n        }\n        r[k] = (r[k] + carry) % BASE | 0;\n    }\n    // Remove trailing zeros.\n    for(; !r[--rL];)r.pop();\n    if (carry) ++e;\n    else r.shift();\n    y.d = r;\n    y.e = getBase10Exponent(r, e);\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\n};\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */ P.toBinary = function(sd, rm) {\n    return toStringBinary(this, 2, sd, rm);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */ P.toDecimalPlaces = P.toDP = function(dp, rm) {\n    var x = this, Ctor = x.constructor;\n    x = new Ctor(x);\n    if (dp === void 0) return x;\n    checkInt32(dp, 0, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;\n    else checkInt32(rm, 0, 8);\n    return finalise(x, dp + x.e + 1, rm);\n};\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */ P.toExponential = function(dp, rm) {\n    var str, x = this, Ctor = x.constructor;\n    if (dp === void 0) {\n        str = finiteToString(x, true);\n    } else {\n        checkInt32(dp, 0, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n        x = finalise(new Ctor(x), dp + 1, rm);\n        str = finiteToString(x, true, dp + 1);\n    }\n    return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n};\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */ P.toFixed = function(dp, rm) {\n    var str, y, x = this, Ctor = x.constructor;\n    if (dp === void 0) {\n        str = finiteToString(x);\n    } else {\n        checkInt32(dp, 0, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n        y = finalise(new Ctor(x), dp + x.e + 1, rm);\n        str = finiteToString(y, false, dp + y.e + 1);\n    }\n    // To determine whether to add the minus sign look at the value before it was rounded,\n    // i.e. look at `x` rather than `y`.\n    return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n};\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */ P.toFraction = function(maxD) {\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r, x = this, xd = x.d, Ctor = x.constructor;\n    if (!xd) return new Ctor(x);\n    n1 = d0 = new Ctor(1);\n    d1 = n0 = new Ctor(0);\n    d = new Ctor(d1);\n    e = d.e = getPrecision(xd) - x.e - 1;\n    k = e % LOG_BASE;\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\n    if (maxD == null) {\n        // d is 10**e, the minimum max-denominator needed.\n        maxD = e > 0 ? d : n1;\n    } else {\n        n = new Ctor(maxD);\n        if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\n        maxD = n.gt(d) ? e > 0 ? d : n1 : n;\n    }\n    external = false;\n    n = new Ctor(digitsToString(xd));\n    pr = Ctor.precision;\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\n    for(;;){\n        q = divide(n, d, 0, 1, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.cmp(maxD) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        d2 = n1;\n        n1 = n0.plus(q.times(d2));\n        n0 = d2;\n        d2 = d;\n        d = n.minus(q.times(d2));\n        n = d2;\n    }\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\n    n0 = n0.plus(d2.times(n1));\n    d0 = d0.plus(d2.times(d1));\n    n0.s = n1.s = x.s;\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [\n        n1,\n        d1\n    ] : [\n        n0,\n        d0\n    ];\n    Ctor.precision = pr;\n    external = true;\n    return r;\n};\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */ P.toHexadecimal = P.toHex = function(sd, rm) {\n    return toStringBinary(this, 16, sd, rm);\n};\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */ P.toNearest = function(y, rm) {\n    var x = this, Ctor = x.constructor;\n    x = new Ctor(x);\n    if (y == null) {\n        // If x is not finite, return x.\n        if (!x.d) return x;\n        y = new Ctor(1);\n        rm = Ctor.rounding;\n    } else {\n        y = new Ctor(y);\n        if (rm === void 0) {\n            rm = Ctor.rounding;\n        } else {\n            checkInt32(rm, 0, 8);\n        }\n        // If x is not finite, return x if y is not NaN, else NaN.\n        if (!x.d) return y.s ? x : y;\n        // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\n        if (!y.d) {\n            if (y.s) y.s = x.s;\n            return y;\n        }\n    }\n    // If y is not zero, calculate the nearest multiple of y to x.\n    if (y.d[0]) {\n        external = false;\n        x = divide(x, y, 0, rm, 1).times(y);\n        external = true;\n        finalise(x);\n    // If y is zero, return zero with the sign of x.\n    } else {\n        y.s = x.s;\n        x = y;\n    }\n    return x;\n};\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */ P.toNumber = function() {\n    return +this;\n};\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */ P.toOctal = function(sd, rm) {\n    return toStringBinary(this, 8, sd, rm);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */ P.toPower = P.pow = function(y) {\n    var e, k, pr, r, rm, s, x = this, Ctor = x.constructor, yn = +(y = new Ctor(y));\n    // Either ±Infinity, NaN or ±0?\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\n    x = new Ctor(x);\n    if (x.eq(1)) return x;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (y.eq(1)) return finalise(x, pr, rm);\n    // y exponent\n    e = mathfloor(y.e / LOG_BASE);\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n        r = intPow(Ctor, x, k, pr);\n        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\n    }\n    s = x.s;\n    // if x is negative\n    if (s < 0) {\n        // if y is not an integer\n        if (e < y.d.length - 1) return new Ctor(NaN);\n        // Result is positive if x is negative and the last digit of integer y is even.\n        if ((y.d[e] & 1) == 0) s = 1;\n        // if x.eq(-1)\n        if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\n            x.s = s;\n            return x;\n        }\n    }\n    // Estimate result exponent.\n    // x^y = 10^e,  where e = y * log10(x)\n    // log10(x) = log10(x_significand) + x_exponent\n    // log10(x_significand) = ln(x_significand) / ln(10)\n    k = mathpow(+x, yn);\n    e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log(\"0.\" + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + \"\").e;\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\n    // Overflow/underflow?\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\n    external = false;\n    Ctor.rounding = x.s = 1;\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\n    // new Decimal(2.32456).pow('2087987436534566.46411')\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\n    k = Math.min(12, (e + \"\").length);\n    // r = x^y = exp(y*ln(x))\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\n    if (r.d) {\n        // Truncate to the required precision plus five rounding digits.\n        r = finalise(r, pr + 5, 1);\n        // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\n        // the result.\n        if (checkRoundingDigits(r.d, pr, rm)) {\n            e = pr + 10;\n            // Truncate to the increased precision plus five rounding digits.\n            r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\n            // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\n            if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\n                r = finalise(r, pr + 1, 0);\n            }\n        }\n    }\n    r.s = s;\n    external = true;\n    Ctor.rounding = rm;\n    return finalise(r, pr, rm);\n};\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */ P.toPrecision = function(sd, rm) {\n    var str, x = this, Ctor = x.constructor;\n    if (sd === void 0) {\n        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    } else {\n        checkInt32(sd, 1, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n        x = finalise(new Ctor(x), sd, rm);\n        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\n    }\n    return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */ P.toSignificantDigits = P.toSD = function(sd, rm) {\n    var x = this, Ctor = x.constructor;\n    if (sd === void 0) {\n        sd = Ctor.precision;\n        rm = Ctor.rounding;\n    } else {\n        checkInt32(sd, 1, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n    }\n    return finalise(new Ctor(x), sd, rm);\n};\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */ P.toString = function() {\n    var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */ P.truncated = P.trunc = function() {\n    return finalise(new this.constructor(this), this.e + 1, 1);\n};\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */ P.valueOf = P.toJSON = function() {\n    var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() ? \"-\" + str : str;\n};\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */ function digitsToString(d) {\n    var i, k, ws, indexOfLastWord = d.length - 1, str = \"\", w = d[0];\n    if (indexOfLastWord > 0) {\n        str += w;\n        for(i = 1; i < indexOfLastWord; i++){\n            ws = d[i] + \"\";\n            k = LOG_BASE - ws.length;\n            if (k) str += getZeroString(k);\n            str += ws;\n        }\n        w = d[i];\n        ws = w + \"\";\n        k = LOG_BASE - ws.length;\n        if (k) str += getZeroString(k);\n    } else if (w === 0) {\n        return \"0\";\n    }\n    // Remove trailing zeros of last w.\n    for(; w % 10 === 0;)w /= 10;\n    return str + w;\n}\nfunction checkInt32(i, min, max) {\n    if (i !== ~~i || i < min || i > max) {\n        throw Error(invalidArgument + i);\n    }\n}\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */ function checkRoundingDigits(d, i, rm, repeating) {\n    var di, k, r, rd;\n    // Get the length of the first word of the array d.\n    for(k = d[0]; k >= 10; k /= 10)--i;\n    // Is the rounding digit in the first word of d?\n    if (--i < 0) {\n        i += LOG_BASE;\n        di = 0;\n    } else {\n        di = Math.ceil((i + 1) / LOG_BASE);\n        i %= LOG_BASE;\n    }\n    // i is the index (0 - 6) of the rounding digit.\n    // E.g. if within the word 3487563 the first rounding digit is 5,\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\n    k = mathpow(10, LOG_BASE - i);\n    rd = d[di] % k | 0;\n    if (repeating == null) {\n        if (i < 3) {\n            if (i == 0) rd = rd / 100 | 0;\n            else if (i == 1) rd = rd / 10 | 0;\n            r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\n        } else {\n            r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\n        }\n    } else {\n        if (i < 4) {\n            if (i == 0) rd = rd / 1000 | 0;\n            else if (i == 1) rd = rd / 100 | 0;\n            else if (i == 2) rd = rd / 10 | 0;\n            r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\n        } else {\n            r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\n        }\n    }\n    return r;\n}\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\n// Eg. convertBase('255', 10, 16) returns [15, 15].\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\nfunction convertBase(str, baseIn, baseOut) {\n    var j, arr = [\n        0\n    ], arrL, i = 0, strL = str.length;\n    for(; i < strL;){\n        for(arrL = arr.length; arrL--;)arr[arrL] *= baseIn;\n        arr[0] += NUMERALS.indexOf(str.charAt(i++));\n        for(j = 0; j < arr.length; j++){\n            if (arr[j] > baseOut - 1) {\n                if (arr[j + 1] === void 0) arr[j + 1] = 0;\n                arr[j + 1] += arr[j] / baseOut | 0;\n                arr[j] %= baseOut;\n            }\n        }\n    }\n    return arr.reverse();\n}\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */ function cosine(Ctor, x) {\n    var k, len, y;\n    if (x.isZero()) return x;\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\n    // Estimate the optimum number of times to use the argument reduction.\n    len = x.d.length;\n    if (len < 32) {\n        k = Math.ceil(len / 3);\n        y = (1 / tinyPow(4, k)).toString();\n    } else {\n        k = 16;\n        y = \"2.3283064365386962890625e-10\";\n    }\n    Ctor.precision += k;\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\n    // Reverse argument reduction\n    for(var i = k; i--;){\n        var cos2x = x.times(x);\n        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\n    }\n    Ctor.precision -= k;\n    return x;\n}\n/*\r\n * Perform division in the specified base.\r\n */ var divide = function() {\n    // Assumes non-zero x and k, and hence non-zero result.\n    function multiplyInteger(x, k, base) {\n        var temp, carry = 0, i = x.length;\n        for(x = x.slice(); i--;){\n            temp = x[i] * k + carry;\n            x[i] = temp % base | 0;\n            carry = temp / base | 0;\n        }\n        if (carry) x.unshift(carry);\n        return x;\n    }\n    function compare(a, b, aL, bL) {\n        var i, r;\n        if (aL != bL) {\n            r = aL > bL ? 1 : -1;\n        } else {\n            for(i = r = 0; i < aL; i++){\n                if (a[i] != b[i]) {\n                    r = a[i] > b[i] ? 1 : -1;\n                    break;\n                }\n            }\n        }\n        return r;\n    }\n    function subtract(a, b, aL, base) {\n        var i = 0;\n        // Subtract b from a.\n        for(; aL--;){\n            a[aL] -= i;\n            i = a[aL] < b[aL] ? 1 : 0;\n            a[aL] = i * base + a[aL] - b[aL];\n        }\n        // Remove leading zeros.\n        for(; !a[0] && a.length > 1;)a.shift();\n    }\n    return function(x, y, pr, rm, dp, base) {\n        var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x.constructor, sign = x.s == y.s ? 1 : -1, xd = x.d, yd = y.d;\n        // Either NaN, Infinity or 0?\n        if (!xd || !xd[0] || !yd || !yd[0]) {\n            return new Ctor(!x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\n            xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\n        }\n        if (base) {\n            logBase = 1;\n            e = x.e - y.e;\n        } else {\n            base = BASE;\n            logBase = LOG_BASE;\n            e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\n        }\n        yL = yd.length;\n        xL = xd.length;\n        q = new Ctor(sign);\n        qd = q.d = [];\n        // Result exponent may be one less than e.\n        // The digit array of a Decimal from toStringBinary may have trailing zeros.\n        for(i = 0; yd[i] == (xd[i] || 0); i++);\n        if (yd[i] > (xd[i] || 0)) e--;\n        if (pr == null) {\n            sd = pr = Ctor.precision;\n            rm = Ctor.rounding;\n        } else if (dp) {\n            sd = pr + (x.e - y.e) + 1;\n        } else {\n            sd = pr;\n        }\n        if (sd < 0) {\n            qd.push(1);\n            more = true;\n        } else {\n            // Convert precision in number of base 10 digits to base 1e7 digits.\n            sd = sd / logBase + 2 | 0;\n            i = 0;\n            // divisor < 1e7\n            if (yL == 1) {\n                k = 0;\n                yd = yd[0];\n                sd++;\n                // k is the carry.\n                for(; (i < xL || k) && sd--; i++){\n                    t = k * base + (xd[i] || 0);\n                    qd[i] = t / yd | 0;\n                    k = t % yd | 0;\n                }\n                more = k || i < xL;\n            // divisor >= 1e7\n            } else {\n                // Normalise xd and yd so highest order digit of yd is >= base/2\n                k = base / (yd[0] + 1) | 0;\n                if (k > 1) {\n                    yd = multiplyInteger(yd, k, base);\n                    xd = multiplyInteger(xd, k, base);\n                    yL = yd.length;\n                    xL = xd.length;\n                }\n                xi = yL;\n                rem = xd.slice(0, yL);\n                remL = rem.length;\n                // Add zeros to make remainder as long as divisor.\n                for(; remL < yL;)rem[remL++] = 0;\n                yz = yd.slice();\n                yz.unshift(0);\n                yd0 = yd[0];\n                if (yd[1] >= base / 2) ++yd0;\n                do {\n                    k = 0;\n                    // Compare divisor and remainder.\n                    cmp = compare(yd, rem, yL, remL);\n                    // If divisor < remainder.\n                    if (cmp < 0) {\n                        // Calculate trial digit, k.\n                        rem0 = rem[0];\n                        if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n                        // k will be how many times the divisor goes into the current remainder.\n                        k = rem0 / yd0 | 0;\n                        //  Algorithm:\n                        //  1. product = divisor * trial digit (k)\n                        //  2. if product > remainder: product -= divisor, k--\n                        //  3. remainder -= product\n                        //  4. if product was < remainder at 2:\n                        //    5. compare new remainder and divisor\n                        //    6. If remainder > divisor: remainder -= divisor, k++\n                        if (k > 1) {\n                            if (k >= base) k = base - 1;\n                            // product = divisor * trial digit.\n                            prod = multiplyInteger(yd, k, base);\n                            prodL = prod.length;\n                            remL = rem.length;\n                            // Compare product and remainder.\n                            cmp = compare(prod, rem, prodL, remL);\n                            // product > remainder.\n                            if (cmp == 1) {\n                                k--;\n                                // Subtract divisor from product.\n                                subtract(prod, yL < prodL ? yz : yd, prodL, base);\n                            }\n                        } else {\n                            // cmp is -1.\n                            // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n                            // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n                            if (k == 0) cmp = k = 1;\n                            prod = yd.slice();\n                        }\n                        prodL = prod.length;\n                        if (prodL < remL) prod.unshift(0);\n                        // Subtract product from remainder.\n                        subtract(rem, prod, remL, base);\n                        // If product was < previous remainder.\n                        if (cmp == -1) {\n                            remL = rem.length;\n                            // Compare divisor and new remainder.\n                            cmp = compare(yd, rem, yL, remL);\n                            // If divisor < new remainder, subtract divisor from remainder.\n                            if (cmp < 1) {\n                                k++;\n                                // Subtract divisor from remainder.\n                                subtract(rem, yL < remL ? yz : yd, remL, base);\n                            }\n                        }\n                        remL = rem.length;\n                    } else if (cmp === 0) {\n                        k++;\n                        rem = [\n                            0\n                        ];\n                    } // if cmp === 1, k will be 0\n                    // Add the next digit, k, to the result array.\n                    qd[i++] = k;\n                    // Update the remainder.\n                    if (cmp && rem[0]) {\n                        rem[remL++] = xd[xi] || 0;\n                    } else {\n                        rem = [\n                            xd[xi]\n                        ];\n                        remL = 1;\n                    }\n                }while ((xi++ < xL || rem[0] !== void 0) && sd--);\n                more = rem[0] !== void 0;\n            }\n            // Leading zero?\n            if (!qd[0]) qd.shift();\n        }\n        // logBase is 1 when divide is being used for base conversion.\n        if (logBase == 1) {\n            q.e = e;\n            inexact = more;\n        } else {\n            // To calculate q.e, first get the number of digits of qd[0].\n            for(i = 1, k = qd[0]; k >= 10; k /= 10)i++;\n            q.e = i + e * logBase - 1;\n            finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\n        }\n        return q;\n    };\n}();\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */ function finalise(x, sd, rm, isTruncated) {\n    var digits, i, j, k, rd, roundUp, w, xd, xdi, Ctor = x.constructor;\n    // Don't round if sd is null or undefined.\n    out: if (sd != null) {\n        xd = x.d;\n        // Infinity/NaN.\n        if (!xd) return x;\n        // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // w: the word of xd containing rd, a base 1e7 number.\n        // xdi: the index of w within xd.\n        // digits: the number of digits of w.\n        // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n        // they had leading zeros)\n        // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n        // Get the length of the first word of the digits array xd.\n        for(digits = 1, k = xd[0]; k >= 10; k /= 10)digits++;\n        i = sd - digits;\n        // Is the rounding digit in the first word of xd?\n        if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            w = xd[xdi = 0];\n            // Get the rounding digit at index j of w.\n            rd = w / mathpow(10, digits - j - 1) % 10 | 0;\n        } else {\n            xdi = Math.ceil((i + 1) / LOG_BASE);\n            k = xd.length;\n            if (xdi >= k) {\n                if (isTruncated) {\n                    // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\n                    for(; k++ <= xdi;)xd.push(0);\n                    w = rd = 0;\n                    digits = 1;\n                    i %= LOG_BASE;\n                    j = i - LOG_BASE + 1;\n                } else {\n                    break out;\n                }\n            } else {\n                w = k = xd[xdi];\n                // Get the number of digits of w.\n                for(digits = 1; k >= 10; k /= 10)digits++;\n                // Get the index of rd within w.\n                i %= LOG_BASE;\n                // Get the index of rd within w, adjusted for leading zeros.\n                // The number of leading zeros of w is given by LOG_BASE - digits.\n                j = i - LOG_BASE + digits;\n                // Get the rounding digit at index j of w.\n                rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\n            }\n        }\n        // Are there any non-zero digits after the rounding digit?\n        isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\n        // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\n        // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\n        // will give 714.\n        roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n        if (sd < 1 || !xd[0]) {\n            xd.length = 0;\n            if (roundUp) {\n                // Convert sd to decimal places.\n                sd -= x.e + 1;\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n                x.e = -sd || 0;\n            } else {\n                // Zero.\n                xd[0] = x.e = 0;\n            }\n            return x;\n        }\n        // Remove excess digits.\n        if (i == 0) {\n            xd.length = xdi;\n            k = 1;\n            xdi--;\n        } else {\n            xd.length = xdi + 1;\n            k = mathpow(10, LOG_BASE - i);\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of w.\n            xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\n        }\n        if (roundUp) {\n            for(;;){\n                // Is the digit to be rounded up in the first word of xd?\n                if (xdi == 0) {\n                    // i will be the length of xd[0] before k is added.\n                    for(i = 1, j = xd[0]; j >= 10; j /= 10)i++;\n                    j = xd[0] += k;\n                    for(k = 1; j >= 10; j /= 10)k++;\n                    // if i != k the length has increased.\n                    if (i != k) {\n                        x.e++;\n                        if (xd[0] == BASE) xd[0] = 1;\n                    }\n                    break;\n                } else {\n                    xd[xdi] += k;\n                    if (xd[xdi] != BASE) break;\n                    xd[xdi--] = 0;\n                    k = 1;\n                }\n            }\n        }\n        // Remove trailing zeros.\n        for(i = xd.length; xd[--i] === 0;)xd.pop();\n    }\n    if (external) {\n        // Overflow?\n        if (x.e > Ctor.maxE) {\n            // Infinity.\n            x.d = null;\n            x.e = NaN;\n        // Underflow?\n        } else if (x.e < Ctor.minE) {\n            // Zero.\n            x.e = 0;\n            x.d = [\n                0\n            ];\n        // Ctor.underflow = true;\n        } // else Ctor.underflow = false;\n    }\n    return x;\n}\nfunction finiteToString(x, isExp, sd) {\n    if (!x.isFinite()) return nonFiniteToString(x);\n    var k, e = x.e, str = digitsToString(x.d), len = str.length;\n    if (isExp) {\n        if (sd && (k = sd - len) > 0) {\n            str = str.charAt(0) + \".\" + str.slice(1) + getZeroString(k);\n        } else if (len > 1) {\n            str = str.charAt(0) + \".\" + str.slice(1);\n        }\n        str = str + (x.e < 0 ? \"e\" : \"e+\") + x.e;\n    } else if (e < 0) {\n        str = \"0.\" + getZeroString(-e - 1) + str;\n        if (sd && (k = sd - len) > 0) str += getZeroString(k);\n    } else if (e >= len) {\n        str += getZeroString(e + 1 - len);\n        if (sd && (k = sd - e - 1) > 0) str = str + \".\" + getZeroString(k);\n    } else {\n        if ((k = e + 1) < len) str = str.slice(0, k) + \".\" + str.slice(k);\n        if (sd && (k = sd - len) > 0) {\n            if (e + 1 === len) str += \".\";\n            str += getZeroString(k);\n        }\n    }\n    return str;\n}\n// Calculate the base 10 exponent from the base 1e7 exponent.\nfunction getBase10Exponent(digits, e) {\n    var w = digits[0];\n    // Add the number of digits of the first word of the digits array.\n    for(e *= LOG_BASE; w >= 10; w /= 10)e++;\n    return e;\n}\nfunction getLn10(Ctor, sd, pr) {\n    if (sd > LN10_PRECISION) {\n        // Reset global state in case the exception is caught.\n        external = true;\n        if (pr) Ctor.precision = pr;\n        throw Error(precisionLimitExceeded);\n    }\n    return finalise(new Ctor(LN10), sd, 1, true);\n}\nfunction getPi(Ctor, sd, rm) {\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\n    return finalise(new Ctor(PI), sd, rm, true);\n}\nfunction getPrecision(digits) {\n    var w = digits.length - 1, len = w * LOG_BASE + 1;\n    w = digits[w];\n    // If non-zero...\n    if (w) {\n        // Subtract the number of trailing zeros of the last word.\n        for(; w % 10 == 0; w /= 10)len--;\n        // Add the number of digits of the first word.\n        for(w = digits[0]; w >= 10; w /= 10)len++;\n    }\n    return len;\n}\nfunction getZeroString(k) {\n    var zs = \"\";\n    for(; k--;)zs += \"0\";\n    return zs;\n}\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */ function intPow(Ctor, x, n, pr) {\n    var isTruncated, r = new Ctor(1), // Max n of 9007199254740991 takes 53 loop iterations.\n    // Maximum digits array length; leaves [28, 34] guard digits.\n    k = Math.ceil(pr / LOG_BASE + 4);\n    external = false;\n    for(;;){\n        if (n % 2) {\n            r = r.times(x);\n            if (truncate(r.d, k)) isTruncated = true;\n        }\n        n = mathfloor(n / 2);\n        if (n === 0) {\n            // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\n            n = r.d.length - 1;\n            if (isTruncated && r.d[n] === 0) ++r.d[n];\n            break;\n        }\n        x = x.times(x);\n        truncate(x.d, k);\n    }\n    external = true;\n    return r;\n}\nfunction isOdd(n) {\n    return n.d[n.d.length - 1] & 1;\n}\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */ function maxOrMin(Ctor, args, ltgt) {\n    var y, x = new Ctor(args[0]), i = 0;\n    for(; ++i < args.length;){\n        y = new Ctor(args[i]);\n        if (!y.s) {\n            x = y;\n            break;\n        } else if (x[ltgt](y)) {\n            x = y;\n        }\n    }\n    return x;\n}\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */ function naturalExponential(x, sd) {\n    var denominator, guard, j, pow, sum, t, wpr, rep = 0, i = 0, k = 0, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;\n    // 0/NaN/Infinity?\n    if (!x.d || !x.d[0] || x.e > 17) {\n        return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);\n    }\n    if (sd == null) {\n        external = false;\n        wpr = pr;\n    } else {\n        wpr = sd;\n    }\n    t = new Ctor(0.03125);\n    // while abs(x) >= 0.1\n    while(x.e > -2){\n        // x = x / 2^5\n        x = x.times(t);\n        k += 5;\n    }\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\n    // necessary to ensure the first 4 rounding digits are correct.\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n    wpr += guard;\n    denominator = pow = sum = new Ctor(1);\n    Ctor.precision = wpr;\n    for(;;){\n        pow = finalise(pow.times(x), wpr, 1);\n        denominator = denominator.times(++i);\n        t = sum.plus(divide(pow, denominator, wpr, 1));\n        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n            j = k;\n            while(j--)sum = finalise(sum.times(sum), wpr, 1);\n            // Check to see if the first 4 rounding digits are [49]999.\n            // If so, repeat the summation with a higher precision, otherwise\n            // e.g. with precision: 18, rounding: 1\n            // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\n            // `wpr - guard` is the index of first rounding digit.\n            if (sd == null) {\n                if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n                    Ctor.precision = wpr += 10;\n                    denominator = pow = t = new Ctor(1);\n                    i = 0;\n                    rep++;\n                } else {\n                    return finalise(sum, Ctor.precision = pr, rm, external = true);\n                }\n            } else {\n                Ctor.precision = pr;\n                return sum;\n            }\n        }\n        sum = t;\n    }\n}\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */ function naturalLogarithm(y, sd) {\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2, n = 1, guard = 10, x = y, xd = x.d, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;\n    // Is x negative or Infinity, NaN, 0 or 1?\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\n        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\n    }\n    if (sd == null) {\n        external = false;\n        wpr = pr;\n    } else {\n        wpr = sd;\n    }\n    Ctor.precision = wpr += guard;\n    c = digitsToString(xd);\n    c0 = c.charAt(0);\n    if (Math.abs(e = x.e) < 1.5e15) {\n        // Argument reduction.\n        // The series converges faster the closer the argument is to 1, so using\n        // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n        // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n        // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n        // later be divided by this number, then separate out the power of 10 using\n        // ln(a*10^b) = ln(a) + b*ln(10).\n        // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n        //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n        // max n is 6 (gives 0.7 - 1.3)\n        while(c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3){\n            x = x.times(y);\n            c = digitsToString(x.d);\n            c0 = c.charAt(0);\n            n++;\n        }\n        e = x.e;\n        if (c0 > 1) {\n            x = new Ctor(\"0.\" + c);\n            e++;\n        } else {\n            x = new Ctor(c0 + \".\" + c.slice(1));\n        }\n    } else {\n        // The argument reduction method above may result in overflow if the argument y is a massive\n        // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n        // function using ln(x*10^e) = ln(x) + e*ln(10).\n        t = getLn10(Ctor, wpr + 2, pr).times(e + \"\");\n        x = naturalLogarithm(new Ctor(c0 + \".\" + c.slice(1)), wpr - guard).plus(t);\n        Ctor.precision = pr;\n        return sd == null ? finalise(x, pr, rm, external = true) : x;\n    }\n    // x1 is x reduced to a value near 1.\n    x1 = x;\n    // Taylor series.\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\n    x2 = finalise(x.times(x), wpr, 1);\n    denominator = 3;\n    for(;;){\n        numerator = finalise(numerator.times(x2), wpr, 1);\n        t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\n        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n            sum = sum.times(2);\n            // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\n            // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\n            if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + \"\"));\n            sum = divide(sum, new Ctor(n), wpr, 1);\n            // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\n            // been repeated previously) and the first 4 rounding digits 9999?\n            // If so, restart the summation with a higher precision, otherwise\n            // e.g. with precision: 12, rounding: 1\n            // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\n            // `wpr - guard` is the index of first rounding digit.\n            if (sd == null) {\n                if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n                    Ctor.precision = wpr += guard;\n                    t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\n                    x2 = finalise(x.times(x), wpr, 1);\n                    denominator = rep = 1;\n                } else {\n                    return finalise(sum, Ctor.precision = pr, rm, external = true);\n                }\n            } else {\n                Ctor.precision = pr;\n                return sum;\n            }\n        }\n        sum = t;\n        denominator += 2;\n    }\n}\n// ±Infinity, NaN.\nfunction nonFiniteToString(x) {\n    // Unsigned.\n    return String(x.s * x.s / 0);\n}\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */ function parseDecimal(x, str) {\n    var e, i, len;\n    // Decimal point?\n    if ((e = str.indexOf(\".\")) > -1) str = str.replace(\".\", \"\");\n    // Exponential form?\n    if ((i = str.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0) e = i;\n        e += +str.slice(i + 1);\n        str = str.substring(0, i);\n    } else if (e < 0) {\n        // Integer.\n        e = str.length;\n    }\n    // Determine leading zeros.\n    for(i = 0; str.charCodeAt(i) === 48; i++);\n    // Determine trailing zeros.\n    for(len = str.length; str.charCodeAt(len - 1) === 48; --len);\n    str = str.slice(i, len);\n    if (str) {\n        len -= i;\n        x.e = e = e - i - 1;\n        x.d = [];\n        // Transform base\n        // e is the base 10 exponent.\n        // i is where to slice str to get the first word of the digits array.\n        i = (e + 1) % LOG_BASE;\n        if (e < 0) i += LOG_BASE;\n        if (i < len) {\n            if (i) x.d.push(+str.slice(0, i));\n            for(len -= LOG_BASE; i < len;)x.d.push(+str.slice(i, i += LOG_BASE));\n            str = str.slice(i);\n            i = LOG_BASE - str.length;\n        } else {\n            i -= len;\n        }\n        for(; i--;)str += \"0\";\n        x.d.push(+str);\n        if (external) {\n            // Overflow?\n            if (x.e > x.constructor.maxE) {\n                // Infinity.\n                x.d = null;\n                x.e = NaN;\n            // Underflow?\n            } else if (x.e < x.constructor.minE) {\n                // Zero.\n                x.e = 0;\n                x.d = [\n                    0\n                ];\n            // x.constructor.underflow = true;\n            } // else x.constructor.underflow = false;\n        }\n    } else {\n        // Zero.\n        x.e = 0;\n        x.d = [\n            0\n        ];\n    }\n    return x;\n}\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */ function parseOther(x, str) {\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\n    if (str.indexOf(\"_\") > -1) {\n        str = str.replace(/(\\d)_(?=\\d)/g, \"$1\");\n        if (isDecimal.test(str)) return parseDecimal(x, str);\n    } else if (str === \"Infinity\" || str === \"NaN\") {\n        if (!+str) x.s = NaN;\n        x.e = NaN;\n        x.d = null;\n        return x;\n    }\n    if (isHex.test(str)) {\n        base = 16;\n        str = str.toLowerCase();\n    } else if (isBinary.test(str)) {\n        base = 2;\n    } else if (isOctal.test(str)) {\n        base = 8;\n    } else {\n        throw Error(invalidArgument + str);\n    }\n    // Is there a binary exponent part?\n    i = str.search(/p/i);\n    if (i > 0) {\n        p = +str.slice(i + 1);\n        str = str.substring(2, i);\n    } else {\n        str = str.slice(2);\n    }\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\n    // fraction part will be restored.\n    i = str.indexOf(\".\");\n    isFloat = i >= 0;\n    Ctor = x.constructor;\n    if (isFloat) {\n        str = str.replace(\".\", \"\");\n        len = str.length;\n        i = len - i;\n        // log[10](16) = 1.2041... , log[10](88) = 1.9444....\n        divisor = intPow(Ctor, new Ctor(base), i, i * 2);\n    }\n    xd = convertBase(str, base, BASE);\n    xe = xd.length - 1;\n    // Remove trailing zeros.\n    for(i = xe; xd[i] === 0; --i)xd.pop();\n    if (i < 0) return new Ctor(x.s * 0);\n    x.e = getBase10Exponent(xd, xe);\n    x.d = xd;\n    external = false;\n    // At what precision to perform the division to ensure exact conversion?\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\n    // Therefore using 4 * the number of digits of str will always be enough.\n    if (isFloat) x = divide(x, divisor, len * 4);\n    // Multiply by the binary exponent part if present.\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\n    external = true;\n    return x;\n}\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */ function sine(Ctor, x) {\n    var k, len = x.d.length;\n    if (len < 3) {\n        return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\n    }\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\n    // Estimate the optimum number of times to use the argument reduction.\n    k = 1.4 * Math.sqrt(len);\n    k = k > 16 ? 16 : k | 0;\n    x = x.times(1 / tinyPow(5, k));\n    x = taylorSeries(Ctor, 2, x, x);\n    // Reverse argument reduction\n    var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);\n    for(; k--;){\n        sin2_x = x.times(x);\n        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\n    }\n    return x;\n}\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\n    var j, t, u, x2, i = 1, pr = Ctor.precision, k = Math.ceil(pr / LOG_BASE);\n    external = false;\n    x2 = x.times(x);\n    u = new Ctor(y);\n    for(;;){\n        t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\n        u = isHyperbolic ? y.plus(t) : y.minus(t);\n        y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\n        t = u.plus(y);\n        if (t.d[k] !== void 0) {\n            for(j = k; t.d[j] === u.d[j] && j--;);\n            if (j == -1) break;\n        }\n        j = u;\n        u = y;\n        y = t;\n        t = j;\n        i++;\n    }\n    external = true;\n    t.d.length = k + 1;\n    return t;\n}\n// Exponent e must be positive and non-zero.\nfunction tinyPow(b, e) {\n    var n = b;\n    while(--e)n *= b;\n    return n;\n}\n// Return the absolute value of `x` reduced to less than or equal to half pi.\nfunction toLessThanHalfPi(Ctor, x) {\n    var t, isNeg = x.s < 0, pi = getPi(Ctor, Ctor.precision, 1), halfPi = pi.times(0.5);\n    x = x.abs();\n    if (x.lte(halfPi)) {\n        quadrant = isNeg ? 4 : 1;\n        return x;\n    }\n    t = x.divToInt(pi);\n    if (t.isZero()) {\n        quadrant = isNeg ? 3 : 2;\n    } else {\n        x = x.minus(t.times(pi));\n        // 0 <= x < pi\n        if (x.lte(halfPi)) {\n            quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;\n            return x;\n        }\n        quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;\n    }\n    return x.minus(pi).abs();\n}\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */ function toStringBinary(x, baseOut, sd, rm) {\n    var base, e, i, k, len, roundUp, str, xd, y, Ctor = x.constructor, isExp = sd !== void 0;\n    if (isExp) {\n        checkInt32(sd, 1, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n    } else {\n        sd = Ctor.precision;\n        rm = Ctor.rounding;\n    }\n    if (!x.isFinite()) {\n        str = nonFiniteToString(x);\n    } else {\n        str = finiteToString(x);\n        i = str.indexOf(\".\");\n        // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\n        // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\n        // minBinaryExponent = floor(decimalExponent * log[2](10))\n        // log[2](10) = 3.321928094887362347870319429489390175864\n        if (isExp) {\n            base = 2;\n            if (baseOut == 16) {\n                sd = sd * 4 - 3;\n            } else if (baseOut == 8) {\n                sd = sd * 3 - 2;\n            }\n        } else {\n            base = baseOut;\n        }\n        // Convert the number as an integer then divide the result by its base raised to a power such\n        // that the fraction part will be restored.\n        // Non-integer.\n        if (i >= 0) {\n            str = str.replace(\".\", \"\");\n            y = new Ctor(1);\n            y.e = str.length - i;\n            y.d = convertBase(finiteToString(y), 10, base);\n            y.e = y.d.length;\n        }\n        xd = convertBase(str, 10, base);\n        e = len = xd.length;\n        // Remove trailing zeros.\n        for(; xd[--len] == 0;)xd.pop();\n        if (!xd[0]) {\n            str = isExp ? \"0p+0\" : \"0\";\n        } else {\n            if (i < 0) {\n                e--;\n            } else {\n                x = new Ctor(x);\n                x.d = xd;\n                x.e = e;\n                x = divide(x, y, sd, rm, 0, base);\n                xd = x.d;\n                e = x.e;\n                roundUp = inexact;\n            }\n            // The rounding digit, i.e. the digit after the digit that may be rounded up.\n            i = xd[sd];\n            k = base / 2;\n            roundUp = roundUp || xd[sd + 1] !== void 0;\n            roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));\n            xd.length = sd;\n            if (roundUp) {\n                // Rounding up may mean the previous digit has to be rounded up and so on.\n                for(; ++xd[--sd] > base - 1;){\n                    xd[sd] = 0;\n                    if (!sd) {\n                        ++e;\n                        xd.unshift(1);\n                    }\n                }\n            }\n            // Determine trailing zeros.\n            for(len = xd.length; !xd[len - 1]; --len);\n            // E.g. [4, 11, 15] becomes 4bf.\n            for(i = 0, str = \"\"; i < len; i++)str += NUMERALS.charAt(xd[i]);\n            // Add binary exponent suffix?\n            if (isExp) {\n                if (len > 1) {\n                    if (baseOut == 16 || baseOut == 8) {\n                        i = baseOut == 16 ? 4 : 3;\n                        for(--len; len % i; len++)str += \"0\";\n                        xd = convertBase(str, base, baseOut);\n                        for(len = xd.length; !xd[len - 1]; --len);\n                        // xd[0] will always be be 1\n                        for(i = 1, str = \"1.\"; i < len; i++)str += NUMERALS.charAt(xd[i]);\n                    } else {\n                        str = str.charAt(0) + \".\" + str.slice(1);\n                    }\n                }\n                str = str + (e < 0 ? \"p\" : \"p+\") + e;\n            } else if (e < 0) {\n                for(; ++e;)str = \"0\" + str;\n                str = \"0.\" + str;\n            } else {\n                if (++e > len) for(e -= len; e--;)str += \"0\";\n                else if (e < len) str = str.slice(0, e) + \".\" + str.slice(e);\n            }\n        }\n        str = (baseOut == 16 ? \"0x\" : baseOut == 2 ? \"0b\" : baseOut == 8 ? \"0o\" : \"\") + str;\n    }\n    return x.s < 0 ? \"-\" + str : str;\n}\n// Does not strip trailing zeros.\nfunction truncate(arr, len) {\n    if (arr.length > len) {\n        arr.length = len;\n        return true;\n    }\n}\n// Decimal methods\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */ /*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function abs(x) {\n    return new this(x).abs();\n}\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function acos(x) {\n    return new this(x).acos();\n}\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function acosh(x) {\n    return new this(x).acosh();\n}\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */ function add(x, y) {\n    return new this(x).plus(y);\n}\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function asin(x) {\n    return new this(x).asin();\n}\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function asinh(x) {\n    return new this(x).asinh();\n}\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function atan(x) {\n    return new this(x).atan();\n}\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function atanh(x) {\n    return new this(x).atanh();\n}\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */ function atan2(y, x) {\n    y = new this(y);\n    x = new this(x);\n    var r, pr = this.precision, rm = this.rounding, wpr = pr + 4;\n    // Either NaN\n    if (!y.s || !x.s) {\n        r = new this(NaN);\n    // Both ±Infinity\n    } else if (!y.d && !x.d) {\n        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\n        r.s = y.s;\n    // x is ±Infinity or y is ±0\n    } else if (!x.d || y.isZero()) {\n        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\n        r.s = y.s;\n    // y is ±Infinity or x is ±0\n    } else if (!y.d || x.isZero()) {\n        r = getPi(this, wpr, 1).times(0.5);\n        r.s = y.s;\n    // Both non-zero and finite\n    } else if (x.s < 0) {\n        this.precision = wpr;\n        this.rounding = 1;\n        r = this.atan(divide(y, x, wpr, 1));\n        x = getPi(this, wpr, 1);\n        this.precision = pr;\n        this.rounding = rm;\n        r = y.s < 0 ? r.minus(x) : r.plus(x);\n    } else {\n        r = this.atan(divide(y, x, wpr, 1));\n    }\n    return r;\n}\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function cbrt(x) {\n    return new this(x).cbrt();\n}\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function ceil(x) {\n    return finalise(x = new this(x), x.e + 1, 2);\n}\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */ function clamp(x, min, max) {\n    return new this(x).clamp(min, max);\n}\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */ function config(obj) {\n    if (!obj || typeof obj !== \"object\") throw Error(decimalError + \"Object expected\");\n    var i, p, v, useDefaults = obj.defaults === true, ps = [\n        \"precision\",\n        1,\n        MAX_DIGITS,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -EXP_LIMIT,\n        0,\n        \"toExpPos\",\n        0,\n        EXP_LIMIT,\n        \"maxE\",\n        0,\n        EXP_LIMIT,\n        \"minE\",\n        -EXP_LIMIT,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(i = 0; i < ps.length; i += 3){\n        if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\n        if ((v = obj[p]) !== void 0) {\n            if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\n            else throw Error(invalidArgument + p + \": \" + v);\n        }\n    }\n    if (p = \"crypto\", useDefaults) this[p] = DEFAULTS[p];\n    if ((v = obj[p]) !== void 0) {\n        if (v === true || v === false || v === 0 || v === 1) {\n            if (v) {\n                if (typeof crypto != \"undefined\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                    this[p] = true;\n                } else {\n                    throw Error(cryptoUnavailable);\n                }\n            } else {\n                this[p] = false;\n            }\n        } else {\n            throw Error(invalidArgument + p + \": \" + v);\n        }\n    }\n    return this;\n}\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function cos(x) {\n    return new this(x).cos();\n}\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function cosh(x) {\n    return new this(x).cosh();\n}\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */ function clone(obj) {\n    var i, p, ps;\n    /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */ function Decimal(v) {\n        var e, i, t, x = this;\n        // Decimal called without new.\n        if (!(x instanceof Decimal)) return new Decimal(v);\n        // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n        // which points to Object.\n        x.constructor = Decimal;\n        // Duplicate.\n        if (isDecimalInstance(v)) {\n            x.s = v.s;\n            if (external) {\n                if (!v.d || v.e > Decimal.maxE) {\n                    // Infinity.\n                    x.e = NaN;\n                    x.d = null;\n                } else if (v.e < Decimal.minE) {\n                    // Zero.\n                    x.e = 0;\n                    x.d = [\n                        0\n                    ];\n                } else {\n                    x.e = v.e;\n                    x.d = v.d.slice();\n                }\n            } else {\n                x.e = v.e;\n                x.d = v.d ? v.d.slice() : v.d;\n            }\n            return;\n        }\n        t = typeof v;\n        if (t === \"number\") {\n            if (v === 0) {\n                x.s = 1 / v < 0 ? -1 : 1;\n                x.e = 0;\n                x.d = [\n                    0\n                ];\n                return;\n            }\n            if (v < 0) {\n                v = -v;\n                x.s = -1;\n            } else {\n                x.s = 1;\n            }\n            // Fast path for small integers.\n            if (v === ~~v && v < 1e7) {\n                for(e = 0, i = v; i >= 10; i /= 10)e++;\n                if (external) {\n                    if (e > Decimal.maxE) {\n                        x.e = NaN;\n                        x.d = null;\n                    } else if (e < Decimal.minE) {\n                        x.e = 0;\n                        x.d = [\n                            0\n                        ];\n                    } else {\n                        x.e = e;\n                        x.d = [\n                            v\n                        ];\n                    }\n                } else {\n                    x.e = e;\n                    x.d = [\n                        v\n                    ];\n                }\n                return;\n            // Infinity, NaN.\n            } else if (v * 0 !== 0) {\n                if (!v) x.s = NaN;\n                x.e = NaN;\n                x.d = null;\n                return;\n            }\n            return parseDecimal(x, v.toString());\n        } else if (t !== \"string\") {\n            throw Error(invalidArgument + v);\n        }\n        // Minus sign?\n        if ((i = v.charCodeAt(0)) === 45) {\n            v = v.slice(1);\n            x.s = -1;\n        } else {\n            // Plus sign?\n            if (i === 43) v = v.slice(1);\n            x.s = 1;\n        }\n        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\n    }\n    Decimal.prototype = P;\n    Decimal.ROUND_UP = 0;\n    Decimal.ROUND_DOWN = 1;\n    Decimal.ROUND_CEIL = 2;\n    Decimal.ROUND_FLOOR = 3;\n    Decimal.ROUND_HALF_UP = 4;\n    Decimal.ROUND_HALF_DOWN = 5;\n    Decimal.ROUND_HALF_EVEN = 6;\n    Decimal.ROUND_HALF_CEIL = 7;\n    Decimal.ROUND_HALF_FLOOR = 8;\n    Decimal.EUCLID = 9;\n    Decimal.config = Decimal.set = config;\n    Decimal.clone = clone;\n    Decimal.isDecimal = isDecimalInstance;\n    Decimal.abs = abs;\n    Decimal.acos = acos;\n    Decimal.acosh = acosh; // ES6\n    Decimal.add = add;\n    Decimal.asin = asin;\n    Decimal.asinh = asinh; // ES6\n    Decimal.atan = atan;\n    Decimal.atanh = atanh; // ES6\n    Decimal.atan2 = atan2;\n    Decimal.cbrt = cbrt; // ES6\n    Decimal.ceil = ceil;\n    Decimal.clamp = clamp;\n    Decimal.cos = cos;\n    Decimal.cosh = cosh; // ES6\n    Decimal.div = div;\n    Decimal.exp = exp;\n    Decimal.floor = floor;\n    Decimal.hypot = hypot; // ES6\n    Decimal.ln = ln;\n    Decimal.log = log;\n    Decimal.log10 = log10; // ES6\n    Decimal.log2 = log2; // ES6\n    Decimal.max = max;\n    Decimal.min = min;\n    Decimal.mod = mod;\n    Decimal.mul = mul;\n    Decimal.pow = pow;\n    Decimal.random = random;\n    Decimal.round = round;\n    Decimal.sign = sign; // ES6\n    Decimal.sin = sin;\n    Decimal.sinh = sinh; // ES6\n    Decimal.sqrt = sqrt;\n    Decimal.sub = sub;\n    Decimal.sum = sum;\n    Decimal.tan = tan;\n    Decimal.tanh = tanh; // ES6\n    Decimal.trunc = trunc; // ES6\n    if (obj === void 0) obj = {};\n    if (obj) {\n        if (obj.defaults !== true) {\n            ps = [\n                \"precision\",\n                \"rounding\",\n                \"toExpNeg\",\n                \"toExpPos\",\n                \"maxE\",\n                \"minE\",\n                \"modulo\",\n                \"crypto\"\n            ];\n            for(i = 0; i < ps.length;)if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n        }\n    }\n    Decimal.config(obj);\n    return Decimal;\n}\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */ function div(x, y) {\n    return new this(x).div(y);\n}\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */ function exp(x) {\n    return new this(x).exp();\n}\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function floor(x) {\n    return finalise(x = new this(x), x.e + 1, 3);\n}\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */ function hypot() {\n    var i, n, t = new this(0);\n    external = false;\n    for(i = 0; i < arguments.length;){\n        n = new this(arguments[i++]);\n        if (!n.d) {\n            if (n.s) {\n                external = true;\n                return new this(1 / 0);\n            }\n            t = n;\n        } else if (t.d) {\n            t = t.plus(n.times(n));\n        }\n    }\n    external = true;\n    return t.sqrt();\n}\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */ function isDecimalInstance(obj) {\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\n}\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function ln(x) {\n    return new this(x).ln();\n}\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */ function log(x, y) {\n    return new this(x).log(y);\n}\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function log2(x) {\n    return new this(x).log(2);\n}\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function log10(x) {\n    return new this(x).log(10);\n}\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */ function max() {\n    return maxOrMin(this, arguments, \"lt\");\n}\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */ function min() {\n    return maxOrMin(this, arguments, \"gt\");\n}\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */ function mod(x, y) {\n    return new this(x).mod(y);\n}\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */ function mul(x, y) {\n    return new this(x).mul(y);\n}\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */ function pow(x, y) {\n    return new this(x).pow(y);\n}\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */ function random(sd) {\n    var d, e, k, n, i = 0, r = new this(1), rd = [];\n    if (sd === void 0) sd = this.precision;\n    else checkInt32(sd, 1, MAX_DIGITS);\n    k = Math.ceil(sd / LOG_BASE);\n    if (!this.crypto) {\n        for(; i < k;)rd[i++] = Math.random() * 1e7 | 0;\n    // Browsers supporting crypto.getRandomValues.\n    } else if (crypto.getRandomValues) {\n        d = crypto.getRandomValues(new Uint32Array(k));\n        for(; i < k;){\n            n = d[i];\n            // 0 <= n < 4294967296\n            // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\n            if (n >= 4.29e9) {\n                d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\n            } else {\n                // 0 <= n <= 4289999999\n                // 0 <= (n % 1e7) <= 9999999\n                rd[i++] = n % 1e7;\n            }\n        }\n    // Node.js supporting crypto.randomBytes.\n    } else if (crypto.randomBytes) {\n        // buffer\n        d = crypto.randomBytes(k *= 4);\n        for(; i < k;){\n            // 0 <= n < 2147483648\n            n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\n            // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\n            if (n >= 2.14e9) {\n                crypto.randomBytes(4).copy(d, i);\n            } else {\n                // 0 <= n <= 2139999999\n                // 0 <= (n % 1e7) <= 9999999\n                rd.push(n % 1e7);\n                i += 4;\n            }\n        }\n        i = k / 4;\n    } else {\n        throw Error(cryptoUnavailable);\n    }\n    k = rd[--i];\n    sd %= LOG_BASE;\n    // Convert trailing digits to zeros according to sd.\n    if (k && sd) {\n        n = mathpow(10, LOG_BASE - sd);\n        rd[i] = (k / n | 0) * n;\n    }\n    // Remove trailing words which are zero.\n    for(; rd[i] === 0; i--)rd.pop();\n    // Zero?\n    if (i < 0) {\n        e = 0;\n        rd = [\n            0\n        ];\n    } else {\n        e = -1;\n        // Remove leading words which are zero and adjust exponent accordingly.\n        for(; rd[0] === 0; e -= LOG_BASE)rd.shift();\n        // Count the digits of the first word of rd to determine leading zeros.\n        for(k = 1, n = rd[0]; n >= 10; n /= 10)k++;\n        // Adjust the exponent for leading zeros of the first word of rd.\n        if (k < LOG_BASE) e -= LOG_BASE - k;\n    }\n    r.e = e;\n    r.d = rd;\n    return r;\n}\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function round(x) {\n    return finalise(x = new this(x), x.e + 1, this.rounding);\n}\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function sign(x) {\n    x = new this(x);\n    return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;\n}\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function sin(x) {\n    return new this(x).sin();\n}\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function sinh(x) {\n    return new this(x).sinh();\n}\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function sqrt(x) {\n    return new this(x).sqrt();\n}\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */ function sub(x, y) {\n    return new this(x).sub(y);\n}\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */ function sum() {\n    var i = 0, args = arguments, x = new this(args[i]);\n    external = false;\n    for(; x.s && ++i < args.length;)x = x.plus(args[i]);\n    external = true;\n    return finalise(x, this.precision, this.rounding);\n}\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function tan(x) {\n    return new this(x).tan();\n}\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function tanh(x) {\n    return new this(x).tanh();\n}\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function trunc(x) {\n    return finalise(x = new this(x), x.e + 1, 1);\n}\nP[Symbol.for(\"nodejs.util.inspect.custom\")] = P.toString;\nP[Symbol.toStringTag] = \"Decimal\";\n// Create and configure initial Decimal constructor.\nvar Decimal = P.constructor = clone(DEFAULTS);\n// Create the internal constants from their string values.\nLN10 = new Decimal(LN10);\nPI = new Decimal(PI);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Decimal);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/decimal.js/decimal.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/decimal.js/decimal.mjs":
/*!*********************************************!*\
  !*** ./node_modules/decimal.js/decimal.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Decimal: () => (/* binding */ Decimal),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\r\n *  decimal.js v10.4.3\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */ // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n// The maximum exponent magnitude.\n// The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\nvar EXP_LIMIT = 9e15, // The limit on the value of `precision`, and on the value of the first argument to\n// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\nMAX_DIGITS = 1e9, // Base conversion alphabet.\nNUMERALS = \"0123456789abcdef\", // The natural logarithm of 10 (1025 digits).\nLN10 = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", // Pi (1025 digits).\nPI = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", // The initial configuration properties of the Decimal constructor.\nDEFAULTS = {\n    // These values must be integers within the stated ranges (inclusive).\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\n    // The maximum number of significant digits of the result of a calculation or base conversion.\n    // E.g. `Decimal.config({ precision: 20 });`\n    precision: 20,\n    // The rounding mode used when rounding to `precision`.\n    //\n    // ROUND_UP         0 Away from zero.\n    // ROUND_DOWN       1 Towards zero.\n    // ROUND_CEIL       2 Towards +Infinity.\n    // ROUND_FLOOR      3 Towards -Infinity.\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    //\n    // E.g.\n    // `Decimal.rounding = 4;`\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n    rounding: 4,\n    // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN  6 The IEEE 754 remainder function.\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\n    //\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\n    // be used, but they may not give useful results.\n    modulo: 1,\n    // The exponent value at and beneath which `toString` returns exponential notation.\n    // JavaScript numbers: -7\n    toExpNeg: -7,\n    // The exponent value at and above which `toString` returns exponential notation.\n    // JavaScript numbers: 21\n    toExpPos: 21,\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // JavaScript numbers: -324  (5e-324)\n    minE: -EXP_LIMIT,\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\n    maxE: EXP_LIMIT,\n    // Whether to use cryptographically-secure random number generation, if available.\n    crypto: false // true/false\n}, // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\ninexact, quadrant, external = true, decimalError = \"[DecimalError] \", invalidArgument = decimalError + \"Invalid argument: \", precisionLimitExceeded = decimalError + \"Precision limit exceeded\", cryptoUnavailable = decimalError + \"crypto unavailable\", tag = \"[object Decimal]\", mathfloor = Math.floor, mathpow = Math.pow, isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, LN10_PRECISION = LN10.length - 1, PI_PRECISION = PI.length - 1, // Decimal.prototype object\nP = {\n    toStringTag: tag\n};\n// Decimal prototype methods\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */ /*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */ P.absoluteValue = P.abs = function() {\n    var x = new this.constructor(this);\n    if (x.s < 0) x.s = 1;\n    return finalise(x);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */ P.ceil = function() {\n    return finalise(new this.constructor(this), this.e + 1, 2);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */ P.clampedTo = P.clamp = function(min, max) {\n    var k, x = this, Ctor = x.constructor;\n    min = new Ctor(min);\n    max = new Ctor(max);\n    if (!min.s || !max.s) return new Ctor(NaN);\n    if (min.gt(max)) throw Error(invalidArgument + max);\n    k = x.cmp(min);\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\n};\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */ P.comparedTo = P.cmp = function(y) {\n    var i, j, xdL, ydL, x = this, xd = x.d, yd = (y = new x.constructor(y)).d, xs = x.s, ys = y.s;\n    // Either NaN or ±Infinity?\n    if (!xd || !yd) {\n        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\n    }\n    // Either zero?\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\n    // Signs differ?\n    if (xs !== ys) return xs;\n    // Compare exponents.\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\n    xdL = xd.length;\n    ydL = yd.length;\n    // Compare digit by digit.\n    for(i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i){\n        if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\n    }\n    // Compare lengths.\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\n};\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */ P.cosine = P.cos = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.d) return new Ctor(NaN);\n    // cos(0) = cos(-0) = 1\n    if (!x.d[0]) return new Ctor(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\n};\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */ P.cubeRoot = P.cbrt = function() {\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx, x = this, Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    external = false;\n    // Initial estimate.\n    s = x.s * mathpow(x.s * x, 1 / 3);\n    // Math.cbrt underflow/overflow?\n    // Pass x to Math.pow as integer, then adjust the exponent of the result.\n    if (!s || Math.abs(s) == 1 / 0) {\n        n = digitsToString(x.d);\n        e = x.e;\n        // Adjust n exponent so it is a multiple of 3 away from x exponent.\n        if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? \"0\" : \"00\";\n        s = mathpow(n, 1 / 3);\n        // Rarely, e may be one less than the result exponent value.\n        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\n        if (s == 1 / 0) {\n            n = \"5e\" + e;\n        } else {\n            n = s.toExponential();\n            n = n.slice(0, n.indexOf(\"e\") + 1) + e;\n        }\n        r = new Ctor(n);\n        r.s = x.s;\n    } else {\n        r = new Ctor(s.toString());\n    }\n    sd = (e = Ctor.precision) + 3;\n    // Halley's method.\n    // TODO? Compare Newton's method.\n    for(;;){\n        t = r;\n        t3 = t.times(t).times(t);\n        t3plusx = t3.plus(x);\n        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\n        // TODO? Replace with for-loop and checkRoundingDigits.\n        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n            n = n.slice(sd - 3, sd + 1);\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\n            // , i.e. approaching a rounding boundary, continue the iteration.\n            if (n == \"9999\" || !rep && n == \"4999\") {\n                // On the first iteration only, check to see if rounding up gives the exact result as the\n                // nines may infinitely repeat.\n                if (!rep) {\n                    finalise(t, e + 1, 0);\n                    if (t.times(t).times(t).eq(x)) {\n                        r = t;\n                        break;\n                    }\n                }\n                sd += 4;\n                rep = 1;\n            } else {\n                // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n                // If not, then there are further digits and m will be truthy.\n                if (!+n || !+n.slice(1) && n.charAt(0) == \"5\") {\n                    // Truncate to the first rounding digit.\n                    finalise(r, e + 1, 1);\n                    m = !r.times(r).times(r).eq(x);\n                }\n                break;\n            }\n        }\n    }\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n};\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */ P.decimalPlaces = P.dp = function() {\n    var w, d = this.d, n = NaN;\n    if (d) {\n        w = d.length - 1;\n        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\n        // Subtract the number of trailing zeros of the last word.\n        w = d[w];\n        if (w) for(; w % 10 == 0; w /= 10)n--;\n        if (n < 0) n = 0;\n    }\n    return n;\n};\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */ P.dividedBy = P.div = function(y) {\n    return divide(this, new this.constructor(y));\n};\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */ P.dividedToIntegerBy = P.divToInt = function(y) {\n    var x = this, Ctor = x.constructor;\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\n};\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */ P.equals = P.eq = function(y) {\n    return this.cmp(y) === 0;\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */ P.floor = function() {\n    return finalise(new this.constructor(this), this.e + 1, 3);\n};\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */ P.greaterThan = P.gt = function(y) {\n    return this.cmp(y) > 0;\n};\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */ P.greaterThanOrEqualTo = P.gte = function(y) {\n    var k = this.cmp(y);\n    return k == 1 || k === 0;\n};\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */ P.hyperbolicCosine = P.cosh = function() {\n    var k, n, pr, rm, len, x = this, Ctor = x.constructor, one = new Ctor(1);\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\n    if (x.isZero()) return one;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\n    // Estimate the optimum number of times to use the argument reduction.\n    // TODO? Estimation reused from cosine() and may not be optimal here.\n    if (len < 32) {\n        k = Math.ceil(len / 3);\n        n = (1 / tinyPow(4, k)).toString();\n    } else {\n        k = 16;\n        n = \"2.3283064365386962890625e-10\";\n    }\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\n    // Reverse argument reduction\n    var cosh2_x, i = k, d8 = new Ctor(8);\n    for(; i--;){\n        cosh2_x = x.times(x);\n        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\n    }\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\n};\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */ P.hyperbolicSine = P.sinh = function() {\n    var k, pr, rm, len, x = this, Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n    if (len < 3) {\n        x = taylorSeries(Ctor, 2, x, x, true);\n    } else {\n        // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\n        // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\n        // 3 multiplications and 1 addition\n        // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\n        // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\n        // 4 multiplications and 2 additions\n        // Estimate the optimum number of times to use the argument reduction.\n        k = 1.4 * Math.sqrt(len);\n        k = k > 16 ? 16 : k | 0;\n        x = x.times(1 / tinyPow(5, k));\n        x = taylorSeries(Ctor, 2, x, x, true);\n        // Reverse argument reduction\n        var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);\n        for(; k--;){\n            sinh2_x = x.times(x);\n            x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\n        }\n    }\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(x, pr, rm, true);\n};\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */ P.hyperbolicTangent = P.tanh = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(x.s);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 7;\n    Ctor.rounding = 1;\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\n};\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */ P.inverseCosine = P.acos = function() {\n    var halfPi, x = this, Ctor = x.constructor, k = x.abs().cmp(1), pr = Ctor.precision, rm = Ctor.rounding;\n    if (k !== -1) {\n        return k === 0 ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) : new Ctor(NaN);\n    }\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n    x = x.asin();\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return halfPi.minus(x);\n};\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */ P.inverseHyperbolicCosine = P.acosh = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\n    if (!x.isFinite()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).minus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n};\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */ P.inverseHyperbolicSine = P.asinh = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).plus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n};\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */ P.inverseHyperbolicTangent = P.atanh = function() {\n    var pr, rm, wpr, xsd, x = this, Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    xsd = x.sd();\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\n    Ctor.precision = wpr = xsd - x.e;\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\n    Ctor.precision = pr + 4;\n    Ctor.rounding = 1;\n    x = x.ln();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(0.5);\n};\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */ P.inverseSine = P.asin = function() {\n    var halfPi, k, pr, rm, x = this, Ctor = x.constructor;\n    if (x.isZero()) return new Ctor(x);\n    k = x.abs().cmp(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (k !== -1) {\n        // |x| is 1\n        if (k === 0) {\n            halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n            halfPi.s = x.s;\n            return halfPi;\n        }\n        // |x| > 1 or x is NaN\n        return new Ctor(NaN);\n    }\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(2);\n};\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */ P.inverseTangent = P.atan = function() {\n    var i, j, k, n, px, t, r, wpr, x2, x = this, Ctor = x.constructor, pr = Ctor.precision, rm = Ctor.rounding;\n    if (!x.isFinite()) {\n        if (!x.s) return new Ctor(NaN);\n        if (pr + 4 <= PI_PRECISION) {\n            r = getPi(Ctor, pr + 4, rm).times(0.5);\n            r.s = x.s;\n            return r;\n        }\n    } else if (x.isZero()) {\n        return new Ctor(x);\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\n        r = getPi(Ctor, pr + 4, rm).times(0.25);\n        r.s = x.s;\n        return r;\n    }\n    Ctor.precision = wpr = pr + 10;\n    Ctor.rounding = 1;\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\n    // Argument reduction\n    // Ensure |x| < 0.42\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\n    for(i = k; i; --i)x = x.div(x.times(x).plus(1).sqrt().plus(1));\n    external = false;\n    j = Math.ceil(wpr / LOG_BASE);\n    n = 1;\n    x2 = x.times(x);\n    r = new Ctor(x);\n    px = x;\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n    for(; i !== -1;){\n        px = px.times(x2);\n        t = r.minus(px.div(n += 2));\n        px = px.times(x2);\n        r = t.plus(px.div(n += 2));\n        if (r.d[j] !== void 0) for(i = j; r.d[i] === t.d[i] && i--;);\n    }\n    if (k) r = r.times(2 << k - 1);\n    external = true;\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\n};\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */ P.isFinite = function() {\n    return !!this.d;\n};\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */ P.isInteger = P.isInt = function() {\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\n};\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */ P.isNaN = function() {\n    return !this.s;\n};\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */ P.isNegative = P.isNeg = function() {\n    return this.s < 0;\n};\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */ P.isPositive = P.isPos = function() {\n    return this.s > 0;\n};\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */ P.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */ P.lessThan = P.lt = function(y) {\n    return this.cmp(y) < 0;\n};\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */ P.lessThanOrEqualTo = P.lte = function(y) {\n    return this.cmp(y) < 1;\n};\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */ P.logarithm = P.log = function(base) {\n    var isBase10, d, denominator, k, inf, num, sd, r, arg = this, Ctor = arg.constructor, pr = Ctor.precision, rm = Ctor.rounding, guard = 5;\n    // Default base is 10.\n    if (base == null) {\n        base = new Ctor(10);\n        isBase10 = true;\n    } else {\n        base = new Ctor(base);\n        d = base.d;\n        // Return NaN if base is negative, or non-finite, or is 0 or 1.\n        if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\n        isBase10 = base.eq(10);\n    }\n    d = arg.d;\n    // Is arg negative, non-finite, 0 or 1?\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\n        return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\n    }\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\n    // integer power of 10.\n    if (isBase10) {\n        if (d.length > 1) {\n            inf = true;\n        } else {\n            for(k = d[0]; k % 10 === 0;)k /= 10;\n            inf = k !== 1;\n        }\n    }\n    external = false;\n    sd = pr + guard;\n    num = naturalLogarithm(arg, sd);\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n    // The result will have 5 rounding digits.\n    r = divide(num, denominator, sd, 1);\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\n    // calculate 10 further digits.\n    //\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\n    // further digits, the last 14 are nines, round up and assume the result is exact.\n    // Also assume the result is exact if the last 14 are zero.\n    //\n    // Example of a result that will be incorrectly rounded:\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\n    // place is still 2.6.\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\n        do {\n            sd += 10;\n            num = naturalLogarithm(arg, sd);\n            denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n            r = divide(num, denominator, sd, 1);\n            if (!inf) {\n                // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\n                if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\n                    r = finalise(r, pr + 1, 0);\n                }\n                break;\n            }\n        }while (checkRoundingDigits(r.d, k += 10, rm));\n    }\n    external = true;\n    return finalise(r, pr, rm);\n};\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */ /*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */ /*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */ P.minus = P.sub = function(y) {\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd, x = this, Ctor = x.constructor;\n    y = new Ctor(y);\n    // If either is not finite...\n    if (!x.d || !y.d) {\n        // Return NaN if either is NaN.\n        if (!x.s || !y.s) y = new Ctor(NaN);\n        else if (x.d) y.s = -y.s;\n        else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\n        return y;\n    }\n    // If signs differ...\n    if (x.s != y.s) {\n        y.s = -y.s;\n        return x.plus(y);\n    }\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    // If either is zero...\n    if (!xd[0] || !yd[0]) {\n        // Return y negated if x is zero and y is non-zero.\n        if (yd[0]) y.s = -y.s;\n        else if (xd[0]) y = new Ctor(x);\n        else return new Ctor(rm === 3 ? -0 : 0);\n        return external ? finalise(y, pr, rm) : y;\n    }\n    // x and y are finite, non-zero numbers with the same sign.\n    // Calculate base 1e7 exponents.\n    e = mathfloor(y.e / LOG_BASE);\n    xe = mathfloor(x.e / LOG_BASE);\n    xd = xd.slice();\n    k = xe - e;\n    // If base 1e7 exponents differ...\n    if (k) {\n        xLTy = k < 0;\n        if (xLTy) {\n            d = xd;\n            k = -k;\n            len = yd.length;\n        } else {\n            d = yd;\n            e = xe;\n            len = xd.length;\n        }\n        // Numbers with massively different exponents would result in a very high number of\n        // zeros needing to be prepended, but this can be avoided while still ensuring correct\n        // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n        if (k > i) {\n            k = i;\n            d.length = 1;\n        }\n        // Prepend zeros to equalise exponents.\n        d.reverse();\n        for(i = k; i--;)d.push(0);\n        d.reverse();\n    // Base 1e7 exponents equal.\n    } else {\n        // Check digits to determine which is the bigger number.\n        i = xd.length;\n        len = yd.length;\n        xLTy = i < len;\n        if (xLTy) len = i;\n        for(i = 0; i < len; i++){\n            if (xd[i] != yd[i]) {\n                xLTy = xd[i] < yd[i];\n                break;\n            }\n        }\n        k = 0;\n    }\n    if (xLTy) {\n        d = xd;\n        xd = yd;\n        yd = d;\n        y.s = -y.s;\n    }\n    len = xd.length;\n    // Append zeros to `xd` if shorter.\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\n    for(i = yd.length - len; i > 0; --i)xd[len++] = 0;\n    // Subtract yd from xd.\n    for(i = yd.length; i > k;){\n        if (xd[--i] < yd[i]) {\n            for(j = i; j && xd[--j] === 0;)xd[j] = BASE - 1;\n            --xd[j];\n            xd[i] += BASE;\n        }\n        xd[i] -= yd[i];\n    }\n    // Remove trailing zeros.\n    for(; xd[--len] === 0;)xd.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for(; xd[0] === 0; xd.shift())--e;\n    // Zero?\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n};\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */ P.modulo = P.mod = function(y) {\n    var q, x = this, Ctor = x.constructor;\n    y = new Ctor(y);\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\n    // Return x if y is ±Infinity or x is ±0.\n    if (!y.d || x.d && !x.d[0]) {\n        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\n    }\n    // Prevent rounding of intermediate calculations.\n    external = false;\n    if (Ctor.modulo == 9) {\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // result = x - q * y    where  0 <= result < abs(y)\n        q = divide(x, y.abs(), 0, 3, 1);\n        q.s *= y.s;\n    } else {\n        q = divide(x, y, 0, Ctor.modulo, 1);\n    }\n    q = q.times(y);\n    external = true;\n    return x.minus(q);\n};\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */ P.naturalExponential = P.exp = function() {\n    return naturalExponential(this);\n};\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */ P.naturalLogarithm = P.ln = function() {\n    return naturalLogarithm(this);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */ P.negated = P.neg = function() {\n    var x = new this.constructor(this);\n    x.s = -x.s;\n    return finalise(x);\n};\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */ P.plus = P.add = function(y) {\n    var carry, d, e, i, k, len, pr, rm, xd, yd, x = this, Ctor = x.constructor;\n    y = new Ctor(y);\n    // If either is not finite...\n    if (!x.d || !y.d) {\n        // Return NaN if either is NaN.\n        if (!x.s || !y.s) y = new Ctor(NaN);\n        else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\n        return y;\n    }\n    // If signs differ...\n    if (x.s != y.s) {\n        y.s = -y.s;\n        return x.minus(y);\n    }\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    // If either is zero...\n    if (!xd[0] || !yd[0]) {\n        // Return x if y is zero.\n        // Return y if y is non-zero.\n        if (!yd[0]) y = new Ctor(x);\n        return external ? finalise(y, pr, rm) : y;\n    }\n    // x and y are finite, non-zero numbers with the same sign.\n    // Calculate base 1e7 exponents.\n    k = mathfloor(x.e / LOG_BASE);\n    e = mathfloor(y.e / LOG_BASE);\n    xd = xd.slice();\n    i = k - e;\n    // If base 1e7 exponents differ...\n    if (i) {\n        if (i < 0) {\n            d = xd;\n            i = -i;\n            len = yd.length;\n        } else {\n            d = yd;\n            e = k;\n            len = xd.length;\n        }\n        // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n        k = Math.ceil(pr / LOG_BASE);\n        len = k > len ? k + 1 : len + 1;\n        if (i > len) {\n            i = len;\n            d.length = 1;\n        }\n        // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n        d.reverse();\n        for(; i--;)d.push(0);\n        d.reverse();\n    }\n    len = xd.length;\n    i = yd.length;\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n    if (len - i < 0) {\n        i = len;\n        d = yd;\n        yd = xd;\n        xd = d;\n    }\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n    for(carry = 0; i;){\n        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n        xd[i] %= BASE;\n    }\n    if (carry) {\n        xd.unshift(carry);\n        ++e;\n    }\n    // Remove trailing zeros.\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    for(len = xd.length; xd[--len] == 0;)xd.pop();\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n};\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */ P.precision = P.sd = function(z) {\n    var k, x = this;\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n    if (x.d) {\n        k = getPrecision(x.d);\n        if (z && x.e + 1 > k) k = x.e + 1;\n    } else {\n        k = NaN;\n    }\n    return k;\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */ P.round = function() {\n    var x = this, Ctor = x.constructor;\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\n};\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */ P.sine = P.sin = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\n};\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */ P.squareRoot = P.sqrt = function() {\n    var m, n, sd, r, rep, t, x = this, d = x.d, e = x.e, s = x.s, Ctor = x.constructor;\n    // Negative/NaN/Infinity/zero?\n    if (s !== 1 || !d || !d[0]) {\n        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\n    }\n    external = false;\n    // Initial estimate.\n    s = Math.sqrt(+x);\n    // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n    if (s == 0 || s == 1 / 0) {\n        n = digitsToString(d);\n        if ((n.length + e) % 2 == 0) n += \"0\";\n        s = Math.sqrt(n);\n        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n        if (s == 1 / 0) {\n            n = \"5e\" + e;\n        } else {\n            n = s.toExponential();\n            n = n.slice(0, n.indexOf(\"e\") + 1) + e;\n        }\n        r = new Ctor(n);\n    } else {\n        r = new Ctor(s.toString());\n    }\n    sd = (e = Ctor.precision) + 3;\n    // Newton-Raphson iteration.\n    for(;;){\n        t = r;\n        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\n        // TODO? Replace with for-loop and checkRoundingDigits.\n        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n            n = n.slice(sd - 3, sd + 1);\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n            // 4999, i.e. approaching a rounding boundary, continue the iteration.\n            if (n == \"9999\" || !rep && n == \"4999\") {\n                // On the first iteration only, check to see if rounding up gives the exact result as the\n                // nines may infinitely repeat.\n                if (!rep) {\n                    finalise(t, e + 1, 0);\n                    if (t.times(t).eq(x)) {\n                        r = t;\n                        break;\n                    }\n                }\n                sd += 4;\n                rep = 1;\n            } else {\n                // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n                // If not, then there are further digits and m will be truthy.\n                if (!+n || !+n.slice(1) && n.charAt(0) == \"5\") {\n                    // Truncate to the first rounding digit.\n                    finalise(r, e + 1, 1);\n                    m = !r.times(r).eq(x);\n                }\n                break;\n            }\n        }\n    }\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n};\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */ P.tangent = P.tan = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 10;\n    Ctor.rounding = 1;\n    x = x.sin();\n    x.s = 1;\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\n};\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */ P.times = P.mul = function(y) {\n    var carry, e, i, k, r, rL, t, xdL, ydL, x = this, Ctor = x.constructor, xd = x.d, yd = (y = new Ctor(y)).d;\n    y.s *= x.s;\n    // If either is NaN, ±Infinity or ±0...\n    if (!xd || !xd[0] || !yd || !yd[0]) {\n        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd ? NaN : !xd || !yd ? y.s / 0 : y.s * 0);\n    }\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\n    xdL = xd.length;\n    ydL = yd.length;\n    // Ensure xd points to the longer array.\n    if (xdL < ydL) {\n        r = xd;\n        xd = yd;\n        yd = r;\n        rL = xdL;\n        xdL = ydL;\n        ydL = rL;\n    }\n    // Initialise the result array with zeros.\n    r = [];\n    rL = xdL + ydL;\n    for(i = rL; i--;)r.push(0);\n    // Multiply!\n    for(i = ydL; --i >= 0;){\n        carry = 0;\n        for(k = xdL + i; k > i;){\n            t = r[k] + yd[i] * xd[k - i - 1] + carry;\n            r[k--] = t % BASE | 0;\n            carry = t / BASE | 0;\n        }\n        r[k] = (r[k] + carry) % BASE | 0;\n    }\n    // Remove trailing zeros.\n    for(; !r[--rL];)r.pop();\n    if (carry) ++e;\n    else r.shift();\n    y.d = r;\n    y.e = getBase10Exponent(r, e);\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\n};\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */ P.toBinary = function(sd, rm) {\n    return toStringBinary(this, 2, sd, rm);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */ P.toDecimalPlaces = P.toDP = function(dp, rm) {\n    var x = this, Ctor = x.constructor;\n    x = new Ctor(x);\n    if (dp === void 0) return x;\n    checkInt32(dp, 0, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;\n    else checkInt32(rm, 0, 8);\n    return finalise(x, dp + x.e + 1, rm);\n};\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */ P.toExponential = function(dp, rm) {\n    var str, x = this, Ctor = x.constructor;\n    if (dp === void 0) {\n        str = finiteToString(x, true);\n    } else {\n        checkInt32(dp, 0, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n        x = finalise(new Ctor(x), dp + 1, rm);\n        str = finiteToString(x, true, dp + 1);\n    }\n    return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n};\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */ P.toFixed = function(dp, rm) {\n    var str, y, x = this, Ctor = x.constructor;\n    if (dp === void 0) {\n        str = finiteToString(x);\n    } else {\n        checkInt32(dp, 0, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n        y = finalise(new Ctor(x), dp + x.e + 1, rm);\n        str = finiteToString(y, false, dp + y.e + 1);\n    }\n    // To determine whether to add the minus sign look at the value before it was rounded,\n    // i.e. look at `x` rather than `y`.\n    return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n};\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */ P.toFraction = function(maxD) {\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r, x = this, xd = x.d, Ctor = x.constructor;\n    if (!xd) return new Ctor(x);\n    n1 = d0 = new Ctor(1);\n    d1 = n0 = new Ctor(0);\n    d = new Ctor(d1);\n    e = d.e = getPrecision(xd) - x.e - 1;\n    k = e % LOG_BASE;\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\n    if (maxD == null) {\n        // d is 10**e, the minimum max-denominator needed.\n        maxD = e > 0 ? d : n1;\n    } else {\n        n = new Ctor(maxD);\n        if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\n        maxD = n.gt(d) ? e > 0 ? d : n1 : n;\n    }\n    external = false;\n    n = new Ctor(digitsToString(xd));\n    pr = Ctor.precision;\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\n    for(;;){\n        q = divide(n, d, 0, 1, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.cmp(maxD) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        d2 = n1;\n        n1 = n0.plus(q.times(d2));\n        n0 = d2;\n        d2 = d;\n        d = n.minus(q.times(d2));\n        n = d2;\n    }\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\n    n0 = n0.plus(d2.times(n1));\n    d0 = d0.plus(d2.times(d1));\n    n0.s = n1.s = x.s;\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [\n        n1,\n        d1\n    ] : [\n        n0,\n        d0\n    ];\n    Ctor.precision = pr;\n    external = true;\n    return r;\n};\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */ P.toHexadecimal = P.toHex = function(sd, rm) {\n    return toStringBinary(this, 16, sd, rm);\n};\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */ P.toNearest = function(y, rm) {\n    var x = this, Ctor = x.constructor;\n    x = new Ctor(x);\n    if (y == null) {\n        // If x is not finite, return x.\n        if (!x.d) return x;\n        y = new Ctor(1);\n        rm = Ctor.rounding;\n    } else {\n        y = new Ctor(y);\n        if (rm === void 0) {\n            rm = Ctor.rounding;\n        } else {\n            checkInt32(rm, 0, 8);\n        }\n        // If x is not finite, return x if y is not NaN, else NaN.\n        if (!x.d) return y.s ? x : y;\n        // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\n        if (!y.d) {\n            if (y.s) y.s = x.s;\n            return y;\n        }\n    }\n    // If y is not zero, calculate the nearest multiple of y to x.\n    if (y.d[0]) {\n        external = false;\n        x = divide(x, y, 0, rm, 1).times(y);\n        external = true;\n        finalise(x);\n    // If y is zero, return zero with the sign of x.\n    } else {\n        y.s = x.s;\n        x = y;\n    }\n    return x;\n};\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */ P.toNumber = function() {\n    return +this;\n};\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */ P.toOctal = function(sd, rm) {\n    return toStringBinary(this, 8, sd, rm);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */ P.toPower = P.pow = function(y) {\n    var e, k, pr, r, rm, s, x = this, Ctor = x.constructor, yn = +(y = new Ctor(y));\n    // Either ±Infinity, NaN or ±0?\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\n    x = new Ctor(x);\n    if (x.eq(1)) return x;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (y.eq(1)) return finalise(x, pr, rm);\n    // y exponent\n    e = mathfloor(y.e / LOG_BASE);\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n        r = intPow(Ctor, x, k, pr);\n        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\n    }\n    s = x.s;\n    // if x is negative\n    if (s < 0) {\n        // if y is not an integer\n        if (e < y.d.length - 1) return new Ctor(NaN);\n        // Result is positive if x is negative and the last digit of integer y is even.\n        if ((y.d[e] & 1) == 0) s = 1;\n        // if x.eq(-1)\n        if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\n            x.s = s;\n            return x;\n        }\n    }\n    // Estimate result exponent.\n    // x^y = 10^e,  where e = y * log10(x)\n    // log10(x) = log10(x_significand) + x_exponent\n    // log10(x_significand) = ln(x_significand) / ln(10)\n    k = mathpow(+x, yn);\n    e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log(\"0.\" + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + \"\").e;\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\n    // Overflow/underflow?\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\n    external = false;\n    Ctor.rounding = x.s = 1;\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\n    // new Decimal(2.32456).pow('2087987436534566.46411')\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\n    k = Math.min(12, (e + \"\").length);\n    // r = x^y = exp(y*ln(x))\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\n    if (r.d) {\n        // Truncate to the required precision plus five rounding digits.\n        r = finalise(r, pr + 5, 1);\n        // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\n        // the result.\n        if (checkRoundingDigits(r.d, pr, rm)) {\n            e = pr + 10;\n            // Truncate to the increased precision plus five rounding digits.\n            r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\n            // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\n            if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\n                r = finalise(r, pr + 1, 0);\n            }\n        }\n    }\n    r.s = s;\n    external = true;\n    Ctor.rounding = rm;\n    return finalise(r, pr, rm);\n};\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */ P.toPrecision = function(sd, rm) {\n    var str, x = this, Ctor = x.constructor;\n    if (sd === void 0) {\n        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    } else {\n        checkInt32(sd, 1, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n        x = finalise(new Ctor(x), sd, rm);\n        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\n    }\n    return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */ P.toSignificantDigits = P.toSD = function(sd, rm) {\n    var x = this, Ctor = x.constructor;\n    if (sd === void 0) {\n        sd = Ctor.precision;\n        rm = Ctor.rounding;\n    } else {\n        checkInt32(sd, 1, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n    }\n    return finalise(new Ctor(x), sd, rm);\n};\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */ P.toString = function() {\n    var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */ P.truncated = P.trunc = function() {\n    return finalise(new this.constructor(this), this.e + 1, 1);\n};\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */ P.valueOf = P.toJSON = function() {\n    var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() ? \"-\" + str : str;\n};\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */ function digitsToString(d) {\n    var i, k, ws, indexOfLastWord = d.length - 1, str = \"\", w = d[0];\n    if (indexOfLastWord > 0) {\n        str += w;\n        for(i = 1; i < indexOfLastWord; i++){\n            ws = d[i] + \"\";\n            k = LOG_BASE - ws.length;\n            if (k) str += getZeroString(k);\n            str += ws;\n        }\n        w = d[i];\n        ws = w + \"\";\n        k = LOG_BASE - ws.length;\n        if (k) str += getZeroString(k);\n    } else if (w === 0) {\n        return \"0\";\n    }\n    // Remove trailing zeros of last w.\n    for(; w % 10 === 0;)w /= 10;\n    return str + w;\n}\nfunction checkInt32(i, min, max) {\n    if (i !== ~~i || i < min || i > max) {\n        throw Error(invalidArgument + i);\n    }\n}\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */ function checkRoundingDigits(d, i, rm, repeating) {\n    var di, k, r, rd;\n    // Get the length of the first word of the array d.\n    for(k = d[0]; k >= 10; k /= 10)--i;\n    // Is the rounding digit in the first word of d?\n    if (--i < 0) {\n        i += LOG_BASE;\n        di = 0;\n    } else {\n        di = Math.ceil((i + 1) / LOG_BASE);\n        i %= LOG_BASE;\n    }\n    // i is the index (0 - 6) of the rounding digit.\n    // E.g. if within the word 3487563 the first rounding digit is 5,\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\n    k = mathpow(10, LOG_BASE - i);\n    rd = d[di] % k | 0;\n    if (repeating == null) {\n        if (i < 3) {\n            if (i == 0) rd = rd / 100 | 0;\n            else if (i == 1) rd = rd / 10 | 0;\n            r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\n        } else {\n            r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\n        }\n    } else {\n        if (i < 4) {\n            if (i == 0) rd = rd / 1000 | 0;\n            else if (i == 1) rd = rd / 100 | 0;\n            else if (i == 2) rd = rd / 10 | 0;\n            r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\n        } else {\n            r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\n        }\n    }\n    return r;\n}\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\n// Eg. convertBase('255', 10, 16) returns [15, 15].\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\nfunction convertBase(str, baseIn, baseOut) {\n    var j, arr = [\n        0\n    ], arrL, i = 0, strL = str.length;\n    for(; i < strL;){\n        for(arrL = arr.length; arrL--;)arr[arrL] *= baseIn;\n        arr[0] += NUMERALS.indexOf(str.charAt(i++));\n        for(j = 0; j < arr.length; j++){\n            if (arr[j] > baseOut - 1) {\n                if (arr[j + 1] === void 0) arr[j + 1] = 0;\n                arr[j + 1] += arr[j] / baseOut | 0;\n                arr[j] %= baseOut;\n            }\n        }\n    }\n    return arr.reverse();\n}\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */ function cosine(Ctor, x) {\n    var k, len, y;\n    if (x.isZero()) return x;\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\n    // Estimate the optimum number of times to use the argument reduction.\n    len = x.d.length;\n    if (len < 32) {\n        k = Math.ceil(len / 3);\n        y = (1 / tinyPow(4, k)).toString();\n    } else {\n        k = 16;\n        y = \"2.3283064365386962890625e-10\";\n    }\n    Ctor.precision += k;\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\n    // Reverse argument reduction\n    for(var i = k; i--;){\n        var cos2x = x.times(x);\n        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\n    }\n    Ctor.precision -= k;\n    return x;\n}\n/*\r\n * Perform division in the specified base.\r\n */ var divide = function() {\n    // Assumes non-zero x and k, and hence non-zero result.\n    function multiplyInteger(x, k, base) {\n        var temp, carry = 0, i = x.length;\n        for(x = x.slice(); i--;){\n            temp = x[i] * k + carry;\n            x[i] = temp % base | 0;\n            carry = temp / base | 0;\n        }\n        if (carry) x.unshift(carry);\n        return x;\n    }\n    function compare(a, b, aL, bL) {\n        var i, r;\n        if (aL != bL) {\n            r = aL > bL ? 1 : -1;\n        } else {\n            for(i = r = 0; i < aL; i++){\n                if (a[i] != b[i]) {\n                    r = a[i] > b[i] ? 1 : -1;\n                    break;\n                }\n            }\n        }\n        return r;\n    }\n    function subtract(a, b, aL, base) {\n        var i = 0;\n        // Subtract b from a.\n        for(; aL--;){\n            a[aL] -= i;\n            i = a[aL] < b[aL] ? 1 : 0;\n            a[aL] = i * base + a[aL] - b[aL];\n        }\n        // Remove leading zeros.\n        for(; !a[0] && a.length > 1;)a.shift();\n    }\n    return function(x, y, pr, rm, dp, base) {\n        var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x.constructor, sign = x.s == y.s ? 1 : -1, xd = x.d, yd = y.d;\n        // Either NaN, Infinity or 0?\n        if (!xd || !xd[0] || !yd || !yd[0]) {\n            return new Ctor(!x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\n            xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\n        }\n        if (base) {\n            logBase = 1;\n            e = x.e - y.e;\n        } else {\n            base = BASE;\n            logBase = LOG_BASE;\n            e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\n        }\n        yL = yd.length;\n        xL = xd.length;\n        q = new Ctor(sign);\n        qd = q.d = [];\n        // Result exponent may be one less than e.\n        // The digit array of a Decimal from toStringBinary may have trailing zeros.\n        for(i = 0; yd[i] == (xd[i] || 0); i++);\n        if (yd[i] > (xd[i] || 0)) e--;\n        if (pr == null) {\n            sd = pr = Ctor.precision;\n            rm = Ctor.rounding;\n        } else if (dp) {\n            sd = pr + (x.e - y.e) + 1;\n        } else {\n            sd = pr;\n        }\n        if (sd < 0) {\n            qd.push(1);\n            more = true;\n        } else {\n            // Convert precision in number of base 10 digits to base 1e7 digits.\n            sd = sd / logBase + 2 | 0;\n            i = 0;\n            // divisor < 1e7\n            if (yL == 1) {\n                k = 0;\n                yd = yd[0];\n                sd++;\n                // k is the carry.\n                for(; (i < xL || k) && sd--; i++){\n                    t = k * base + (xd[i] || 0);\n                    qd[i] = t / yd | 0;\n                    k = t % yd | 0;\n                }\n                more = k || i < xL;\n            // divisor >= 1e7\n            } else {\n                // Normalise xd and yd so highest order digit of yd is >= base/2\n                k = base / (yd[0] + 1) | 0;\n                if (k > 1) {\n                    yd = multiplyInteger(yd, k, base);\n                    xd = multiplyInteger(xd, k, base);\n                    yL = yd.length;\n                    xL = xd.length;\n                }\n                xi = yL;\n                rem = xd.slice(0, yL);\n                remL = rem.length;\n                // Add zeros to make remainder as long as divisor.\n                for(; remL < yL;)rem[remL++] = 0;\n                yz = yd.slice();\n                yz.unshift(0);\n                yd0 = yd[0];\n                if (yd[1] >= base / 2) ++yd0;\n                do {\n                    k = 0;\n                    // Compare divisor and remainder.\n                    cmp = compare(yd, rem, yL, remL);\n                    // If divisor < remainder.\n                    if (cmp < 0) {\n                        // Calculate trial digit, k.\n                        rem0 = rem[0];\n                        if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n                        // k will be how many times the divisor goes into the current remainder.\n                        k = rem0 / yd0 | 0;\n                        //  Algorithm:\n                        //  1. product = divisor * trial digit (k)\n                        //  2. if product > remainder: product -= divisor, k--\n                        //  3. remainder -= product\n                        //  4. if product was < remainder at 2:\n                        //    5. compare new remainder and divisor\n                        //    6. If remainder > divisor: remainder -= divisor, k++\n                        if (k > 1) {\n                            if (k >= base) k = base - 1;\n                            // product = divisor * trial digit.\n                            prod = multiplyInteger(yd, k, base);\n                            prodL = prod.length;\n                            remL = rem.length;\n                            // Compare product and remainder.\n                            cmp = compare(prod, rem, prodL, remL);\n                            // product > remainder.\n                            if (cmp == 1) {\n                                k--;\n                                // Subtract divisor from product.\n                                subtract(prod, yL < prodL ? yz : yd, prodL, base);\n                            }\n                        } else {\n                            // cmp is -1.\n                            // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n                            // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n                            if (k == 0) cmp = k = 1;\n                            prod = yd.slice();\n                        }\n                        prodL = prod.length;\n                        if (prodL < remL) prod.unshift(0);\n                        // Subtract product from remainder.\n                        subtract(rem, prod, remL, base);\n                        // If product was < previous remainder.\n                        if (cmp == -1) {\n                            remL = rem.length;\n                            // Compare divisor and new remainder.\n                            cmp = compare(yd, rem, yL, remL);\n                            // If divisor < new remainder, subtract divisor from remainder.\n                            if (cmp < 1) {\n                                k++;\n                                // Subtract divisor from remainder.\n                                subtract(rem, yL < remL ? yz : yd, remL, base);\n                            }\n                        }\n                        remL = rem.length;\n                    } else if (cmp === 0) {\n                        k++;\n                        rem = [\n                            0\n                        ];\n                    } // if cmp === 1, k will be 0\n                    // Add the next digit, k, to the result array.\n                    qd[i++] = k;\n                    // Update the remainder.\n                    if (cmp && rem[0]) {\n                        rem[remL++] = xd[xi] || 0;\n                    } else {\n                        rem = [\n                            xd[xi]\n                        ];\n                        remL = 1;\n                    }\n                }while ((xi++ < xL || rem[0] !== void 0) && sd--);\n                more = rem[0] !== void 0;\n            }\n            // Leading zero?\n            if (!qd[0]) qd.shift();\n        }\n        // logBase is 1 when divide is being used for base conversion.\n        if (logBase == 1) {\n            q.e = e;\n            inexact = more;\n        } else {\n            // To calculate q.e, first get the number of digits of qd[0].\n            for(i = 1, k = qd[0]; k >= 10; k /= 10)i++;\n            q.e = i + e * logBase - 1;\n            finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\n        }\n        return q;\n    };\n}();\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */ function finalise(x, sd, rm, isTruncated) {\n    var digits, i, j, k, rd, roundUp, w, xd, xdi, Ctor = x.constructor;\n    // Don't round if sd is null or undefined.\n    out: if (sd != null) {\n        xd = x.d;\n        // Infinity/NaN.\n        if (!xd) return x;\n        // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // w: the word of xd containing rd, a base 1e7 number.\n        // xdi: the index of w within xd.\n        // digits: the number of digits of w.\n        // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n        // they had leading zeros)\n        // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n        // Get the length of the first word of the digits array xd.\n        for(digits = 1, k = xd[0]; k >= 10; k /= 10)digits++;\n        i = sd - digits;\n        // Is the rounding digit in the first word of xd?\n        if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            w = xd[xdi = 0];\n            // Get the rounding digit at index j of w.\n            rd = w / mathpow(10, digits - j - 1) % 10 | 0;\n        } else {\n            xdi = Math.ceil((i + 1) / LOG_BASE);\n            k = xd.length;\n            if (xdi >= k) {\n                if (isTruncated) {\n                    // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\n                    for(; k++ <= xdi;)xd.push(0);\n                    w = rd = 0;\n                    digits = 1;\n                    i %= LOG_BASE;\n                    j = i - LOG_BASE + 1;\n                } else {\n                    break out;\n                }\n            } else {\n                w = k = xd[xdi];\n                // Get the number of digits of w.\n                for(digits = 1; k >= 10; k /= 10)digits++;\n                // Get the index of rd within w.\n                i %= LOG_BASE;\n                // Get the index of rd within w, adjusted for leading zeros.\n                // The number of leading zeros of w is given by LOG_BASE - digits.\n                j = i - LOG_BASE + digits;\n                // Get the rounding digit at index j of w.\n                rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\n            }\n        }\n        // Are there any non-zero digits after the rounding digit?\n        isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\n        // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\n        // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\n        // will give 714.\n        roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n        if (sd < 1 || !xd[0]) {\n            xd.length = 0;\n            if (roundUp) {\n                // Convert sd to decimal places.\n                sd -= x.e + 1;\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n                x.e = -sd || 0;\n            } else {\n                // Zero.\n                xd[0] = x.e = 0;\n            }\n            return x;\n        }\n        // Remove excess digits.\n        if (i == 0) {\n            xd.length = xdi;\n            k = 1;\n            xdi--;\n        } else {\n            xd.length = xdi + 1;\n            k = mathpow(10, LOG_BASE - i);\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of w.\n            xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\n        }\n        if (roundUp) {\n            for(;;){\n                // Is the digit to be rounded up in the first word of xd?\n                if (xdi == 0) {\n                    // i will be the length of xd[0] before k is added.\n                    for(i = 1, j = xd[0]; j >= 10; j /= 10)i++;\n                    j = xd[0] += k;\n                    for(k = 1; j >= 10; j /= 10)k++;\n                    // if i != k the length has increased.\n                    if (i != k) {\n                        x.e++;\n                        if (xd[0] == BASE) xd[0] = 1;\n                    }\n                    break;\n                } else {\n                    xd[xdi] += k;\n                    if (xd[xdi] != BASE) break;\n                    xd[xdi--] = 0;\n                    k = 1;\n                }\n            }\n        }\n        // Remove trailing zeros.\n        for(i = xd.length; xd[--i] === 0;)xd.pop();\n    }\n    if (external) {\n        // Overflow?\n        if (x.e > Ctor.maxE) {\n            // Infinity.\n            x.d = null;\n            x.e = NaN;\n        // Underflow?\n        } else if (x.e < Ctor.minE) {\n            // Zero.\n            x.e = 0;\n            x.d = [\n                0\n            ];\n        // Ctor.underflow = true;\n        } // else Ctor.underflow = false;\n    }\n    return x;\n}\nfunction finiteToString(x, isExp, sd) {\n    if (!x.isFinite()) return nonFiniteToString(x);\n    var k, e = x.e, str = digitsToString(x.d), len = str.length;\n    if (isExp) {\n        if (sd && (k = sd - len) > 0) {\n            str = str.charAt(0) + \".\" + str.slice(1) + getZeroString(k);\n        } else if (len > 1) {\n            str = str.charAt(0) + \".\" + str.slice(1);\n        }\n        str = str + (x.e < 0 ? \"e\" : \"e+\") + x.e;\n    } else if (e < 0) {\n        str = \"0.\" + getZeroString(-e - 1) + str;\n        if (sd && (k = sd - len) > 0) str += getZeroString(k);\n    } else if (e >= len) {\n        str += getZeroString(e + 1 - len);\n        if (sd && (k = sd - e - 1) > 0) str = str + \".\" + getZeroString(k);\n    } else {\n        if ((k = e + 1) < len) str = str.slice(0, k) + \".\" + str.slice(k);\n        if (sd && (k = sd - len) > 0) {\n            if (e + 1 === len) str += \".\";\n            str += getZeroString(k);\n        }\n    }\n    return str;\n}\n// Calculate the base 10 exponent from the base 1e7 exponent.\nfunction getBase10Exponent(digits, e) {\n    var w = digits[0];\n    // Add the number of digits of the first word of the digits array.\n    for(e *= LOG_BASE; w >= 10; w /= 10)e++;\n    return e;\n}\nfunction getLn10(Ctor, sd, pr) {\n    if (sd > LN10_PRECISION) {\n        // Reset global state in case the exception is caught.\n        external = true;\n        if (pr) Ctor.precision = pr;\n        throw Error(precisionLimitExceeded);\n    }\n    return finalise(new Ctor(LN10), sd, 1, true);\n}\nfunction getPi(Ctor, sd, rm) {\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\n    return finalise(new Ctor(PI), sd, rm, true);\n}\nfunction getPrecision(digits) {\n    var w = digits.length - 1, len = w * LOG_BASE + 1;\n    w = digits[w];\n    // If non-zero...\n    if (w) {\n        // Subtract the number of trailing zeros of the last word.\n        for(; w % 10 == 0; w /= 10)len--;\n        // Add the number of digits of the first word.\n        for(w = digits[0]; w >= 10; w /= 10)len++;\n    }\n    return len;\n}\nfunction getZeroString(k) {\n    var zs = \"\";\n    for(; k--;)zs += \"0\";\n    return zs;\n}\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */ function intPow(Ctor, x, n, pr) {\n    var isTruncated, r = new Ctor(1), // Max n of 9007199254740991 takes 53 loop iterations.\n    // Maximum digits array length; leaves [28, 34] guard digits.\n    k = Math.ceil(pr / LOG_BASE + 4);\n    external = false;\n    for(;;){\n        if (n % 2) {\n            r = r.times(x);\n            if (truncate(r.d, k)) isTruncated = true;\n        }\n        n = mathfloor(n / 2);\n        if (n === 0) {\n            // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\n            n = r.d.length - 1;\n            if (isTruncated && r.d[n] === 0) ++r.d[n];\n            break;\n        }\n        x = x.times(x);\n        truncate(x.d, k);\n    }\n    external = true;\n    return r;\n}\nfunction isOdd(n) {\n    return n.d[n.d.length - 1] & 1;\n}\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */ function maxOrMin(Ctor, args, ltgt) {\n    var y, x = new Ctor(args[0]), i = 0;\n    for(; ++i < args.length;){\n        y = new Ctor(args[i]);\n        if (!y.s) {\n            x = y;\n            break;\n        } else if (x[ltgt](y)) {\n            x = y;\n        }\n    }\n    return x;\n}\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */ function naturalExponential(x, sd) {\n    var denominator, guard, j, pow, sum, t, wpr, rep = 0, i = 0, k = 0, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;\n    // 0/NaN/Infinity?\n    if (!x.d || !x.d[0] || x.e > 17) {\n        return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);\n    }\n    if (sd == null) {\n        external = false;\n        wpr = pr;\n    } else {\n        wpr = sd;\n    }\n    t = new Ctor(0.03125);\n    // while abs(x) >= 0.1\n    while(x.e > -2){\n        // x = x / 2^5\n        x = x.times(t);\n        k += 5;\n    }\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\n    // necessary to ensure the first 4 rounding digits are correct.\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n    wpr += guard;\n    denominator = pow = sum = new Ctor(1);\n    Ctor.precision = wpr;\n    for(;;){\n        pow = finalise(pow.times(x), wpr, 1);\n        denominator = denominator.times(++i);\n        t = sum.plus(divide(pow, denominator, wpr, 1));\n        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n            j = k;\n            while(j--)sum = finalise(sum.times(sum), wpr, 1);\n            // Check to see if the first 4 rounding digits are [49]999.\n            // If so, repeat the summation with a higher precision, otherwise\n            // e.g. with precision: 18, rounding: 1\n            // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\n            // `wpr - guard` is the index of first rounding digit.\n            if (sd == null) {\n                if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n                    Ctor.precision = wpr += 10;\n                    denominator = pow = t = new Ctor(1);\n                    i = 0;\n                    rep++;\n                } else {\n                    return finalise(sum, Ctor.precision = pr, rm, external = true);\n                }\n            } else {\n                Ctor.precision = pr;\n                return sum;\n            }\n        }\n        sum = t;\n    }\n}\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */ function naturalLogarithm(y, sd) {\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2, n = 1, guard = 10, x = y, xd = x.d, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;\n    // Is x negative or Infinity, NaN, 0 or 1?\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\n        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\n    }\n    if (sd == null) {\n        external = false;\n        wpr = pr;\n    } else {\n        wpr = sd;\n    }\n    Ctor.precision = wpr += guard;\n    c = digitsToString(xd);\n    c0 = c.charAt(0);\n    if (Math.abs(e = x.e) < 1.5e15) {\n        // Argument reduction.\n        // The series converges faster the closer the argument is to 1, so using\n        // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n        // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n        // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n        // later be divided by this number, then separate out the power of 10 using\n        // ln(a*10^b) = ln(a) + b*ln(10).\n        // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n        //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n        // max n is 6 (gives 0.7 - 1.3)\n        while(c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3){\n            x = x.times(y);\n            c = digitsToString(x.d);\n            c0 = c.charAt(0);\n            n++;\n        }\n        e = x.e;\n        if (c0 > 1) {\n            x = new Ctor(\"0.\" + c);\n            e++;\n        } else {\n            x = new Ctor(c0 + \".\" + c.slice(1));\n        }\n    } else {\n        // The argument reduction method above may result in overflow if the argument y is a massive\n        // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n        // function using ln(x*10^e) = ln(x) + e*ln(10).\n        t = getLn10(Ctor, wpr + 2, pr).times(e + \"\");\n        x = naturalLogarithm(new Ctor(c0 + \".\" + c.slice(1)), wpr - guard).plus(t);\n        Ctor.precision = pr;\n        return sd == null ? finalise(x, pr, rm, external = true) : x;\n    }\n    // x1 is x reduced to a value near 1.\n    x1 = x;\n    // Taylor series.\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\n    x2 = finalise(x.times(x), wpr, 1);\n    denominator = 3;\n    for(;;){\n        numerator = finalise(numerator.times(x2), wpr, 1);\n        t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\n        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n            sum = sum.times(2);\n            // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\n            // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\n            if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + \"\"));\n            sum = divide(sum, new Ctor(n), wpr, 1);\n            // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\n            // been repeated previously) and the first 4 rounding digits 9999?\n            // If so, restart the summation with a higher precision, otherwise\n            // e.g. with precision: 12, rounding: 1\n            // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\n            // `wpr - guard` is the index of first rounding digit.\n            if (sd == null) {\n                if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n                    Ctor.precision = wpr += guard;\n                    t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\n                    x2 = finalise(x.times(x), wpr, 1);\n                    denominator = rep = 1;\n                } else {\n                    return finalise(sum, Ctor.precision = pr, rm, external = true);\n                }\n            } else {\n                Ctor.precision = pr;\n                return sum;\n            }\n        }\n        sum = t;\n        denominator += 2;\n    }\n}\n// ±Infinity, NaN.\nfunction nonFiniteToString(x) {\n    // Unsigned.\n    return String(x.s * x.s / 0);\n}\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */ function parseDecimal(x, str) {\n    var e, i, len;\n    // Decimal point?\n    if ((e = str.indexOf(\".\")) > -1) str = str.replace(\".\", \"\");\n    // Exponential form?\n    if ((i = str.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0) e = i;\n        e += +str.slice(i + 1);\n        str = str.substring(0, i);\n    } else if (e < 0) {\n        // Integer.\n        e = str.length;\n    }\n    // Determine leading zeros.\n    for(i = 0; str.charCodeAt(i) === 48; i++);\n    // Determine trailing zeros.\n    for(len = str.length; str.charCodeAt(len - 1) === 48; --len);\n    str = str.slice(i, len);\n    if (str) {\n        len -= i;\n        x.e = e = e - i - 1;\n        x.d = [];\n        // Transform base\n        // e is the base 10 exponent.\n        // i is where to slice str to get the first word of the digits array.\n        i = (e + 1) % LOG_BASE;\n        if (e < 0) i += LOG_BASE;\n        if (i < len) {\n            if (i) x.d.push(+str.slice(0, i));\n            for(len -= LOG_BASE; i < len;)x.d.push(+str.slice(i, i += LOG_BASE));\n            str = str.slice(i);\n            i = LOG_BASE - str.length;\n        } else {\n            i -= len;\n        }\n        for(; i--;)str += \"0\";\n        x.d.push(+str);\n        if (external) {\n            // Overflow?\n            if (x.e > x.constructor.maxE) {\n                // Infinity.\n                x.d = null;\n                x.e = NaN;\n            // Underflow?\n            } else if (x.e < x.constructor.minE) {\n                // Zero.\n                x.e = 0;\n                x.d = [\n                    0\n                ];\n            // x.constructor.underflow = true;\n            } // else x.constructor.underflow = false;\n        }\n    } else {\n        // Zero.\n        x.e = 0;\n        x.d = [\n            0\n        ];\n    }\n    return x;\n}\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */ function parseOther(x, str) {\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\n    if (str.indexOf(\"_\") > -1) {\n        str = str.replace(/(\\d)_(?=\\d)/g, \"$1\");\n        if (isDecimal.test(str)) return parseDecimal(x, str);\n    } else if (str === \"Infinity\" || str === \"NaN\") {\n        if (!+str) x.s = NaN;\n        x.e = NaN;\n        x.d = null;\n        return x;\n    }\n    if (isHex.test(str)) {\n        base = 16;\n        str = str.toLowerCase();\n    } else if (isBinary.test(str)) {\n        base = 2;\n    } else if (isOctal.test(str)) {\n        base = 8;\n    } else {\n        throw Error(invalidArgument + str);\n    }\n    // Is there a binary exponent part?\n    i = str.search(/p/i);\n    if (i > 0) {\n        p = +str.slice(i + 1);\n        str = str.substring(2, i);\n    } else {\n        str = str.slice(2);\n    }\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\n    // fraction part will be restored.\n    i = str.indexOf(\".\");\n    isFloat = i >= 0;\n    Ctor = x.constructor;\n    if (isFloat) {\n        str = str.replace(\".\", \"\");\n        len = str.length;\n        i = len - i;\n        // log[10](16) = 1.2041... , log[10](88) = 1.9444....\n        divisor = intPow(Ctor, new Ctor(base), i, i * 2);\n    }\n    xd = convertBase(str, base, BASE);\n    xe = xd.length - 1;\n    // Remove trailing zeros.\n    for(i = xe; xd[i] === 0; --i)xd.pop();\n    if (i < 0) return new Ctor(x.s * 0);\n    x.e = getBase10Exponent(xd, xe);\n    x.d = xd;\n    external = false;\n    // At what precision to perform the division to ensure exact conversion?\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\n    // Therefore using 4 * the number of digits of str will always be enough.\n    if (isFloat) x = divide(x, divisor, len * 4);\n    // Multiply by the binary exponent part if present.\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\n    external = true;\n    return x;\n}\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */ function sine(Ctor, x) {\n    var k, len = x.d.length;\n    if (len < 3) {\n        return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\n    }\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\n    // Estimate the optimum number of times to use the argument reduction.\n    k = 1.4 * Math.sqrt(len);\n    k = k > 16 ? 16 : k | 0;\n    x = x.times(1 / tinyPow(5, k));\n    x = taylorSeries(Ctor, 2, x, x);\n    // Reverse argument reduction\n    var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);\n    for(; k--;){\n        sin2_x = x.times(x);\n        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\n    }\n    return x;\n}\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\n    var j, t, u, x2, i = 1, pr = Ctor.precision, k = Math.ceil(pr / LOG_BASE);\n    external = false;\n    x2 = x.times(x);\n    u = new Ctor(y);\n    for(;;){\n        t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\n        u = isHyperbolic ? y.plus(t) : y.minus(t);\n        y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\n        t = u.plus(y);\n        if (t.d[k] !== void 0) {\n            for(j = k; t.d[j] === u.d[j] && j--;);\n            if (j == -1) break;\n        }\n        j = u;\n        u = y;\n        y = t;\n        t = j;\n        i++;\n    }\n    external = true;\n    t.d.length = k + 1;\n    return t;\n}\n// Exponent e must be positive and non-zero.\nfunction tinyPow(b, e) {\n    var n = b;\n    while(--e)n *= b;\n    return n;\n}\n// Return the absolute value of `x` reduced to less than or equal to half pi.\nfunction toLessThanHalfPi(Ctor, x) {\n    var t, isNeg = x.s < 0, pi = getPi(Ctor, Ctor.precision, 1), halfPi = pi.times(0.5);\n    x = x.abs();\n    if (x.lte(halfPi)) {\n        quadrant = isNeg ? 4 : 1;\n        return x;\n    }\n    t = x.divToInt(pi);\n    if (t.isZero()) {\n        quadrant = isNeg ? 3 : 2;\n    } else {\n        x = x.minus(t.times(pi));\n        // 0 <= x < pi\n        if (x.lte(halfPi)) {\n            quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;\n            return x;\n        }\n        quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;\n    }\n    return x.minus(pi).abs();\n}\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */ function toStringBinary(x, baseOut, sd, rm) {\n    var base, e, i, k, len, roundUp, str, xd, y, Ctor = x.constructor, isExp = sd !== void 0;\n    if (isExp) {\n        checkInt32(sd, 1, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n    } else {\n        sd = Ctor.precision;\n        rm = Ctor.rounding;\n    }\n    if (!x.isFinite()) {\n        str = nonFiniteToString(x);\n    } else {\n        str = finiteToString(x);\n        i = str.indexOf(\".\");\n        // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\n        // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\n        // minBinaryExponent = floor(decimalExponent * log[2](10))\n        // log[2](10) = 3.321928094887362347870319429489390175864\n        if (isExp) {\n            base = 2;\n            if (baseOut == 16) {\n                sd = sd * 4 - 3;\n            } else if (baseOut == 8) {\n                sd = sd * 3 - 2;\n            }\n        } else {\n            base = baseOut;\n        }\n        // Convert the number as an integer then divide the result by its base raised to a power such\n        // that the fraction part will be restored.\n        // Non-integer.\n        if (i >= 0) {\n            str = str.replace(\".\", \"\");\n            y = new Ctor(1);\n            y.e = str.length - i;\n            y.d = convertBase(finiteToString(y), 10, base);\n            y.e = y.d.length;\n        }\n        xd = convertBase(str, 10, base);\n        e = len = xd.length;\n        // Remove trailing zeros.\n        for(; xd[--len] == 0;)xd.pop();\n        if (!xd[0]) {\n            str = isExp ? \"0p+0\" : \"0\";\n        } else {\n            if (i < 0) {\n                e--;\n            } else {\n                x = new Ctor(x);\n                x.d = xd;\n                x.e = e;\n                x = divide(x, y, sd, rm, 0, base);\n                xd = x.d;\n                e = x.e;\n                roundUp = inexact;\n            }\n            // The rounding digit, i.e. the digit after the digit that may be rounded up.\n            i = xd[sd];\n            k = base / 2;\n            roundUp = roundUp || xd[sd + 1] !== void 0;\n            roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));\n            xd.length = sd;\n            if (roundUp) {\n                // Rounding up may mean the previous digit has to be rounded up and so on.\n                for(; ++xd[--sd] > base - 1;){\n                    xd[sd] = 0;\n                    if (!sd) {\n                        ++e;\n                        xd.unshift(1);\n                    }\n                }\n            }\n            // Determine trailing zeros.\n            for(len = xd.length; !xd[len - 1]; --len);\n            // E.g. [4, 11, 15] becomes 4bf.\n            for(i = 0, str = \"\"; i < len; i++)str += NUMERALS.charAt(xd[i]);\n            // Add binary exponent suffix?\n            if (isExp) {\n                if (len > 1) {\n                    if (baseOut == 16 || baseOut == 8) {\n                        i = baseOut == 16 ? 4 : 3;\n                        for(--len; len % i; len++)str += \"0\";\n                        xd = convertBase(str, base, baseOut);\n                        for(len = xd.length; !xd[len - 1]; --len);\n                        // xd[0] will always be be 1\n                        for(i = 1, str = \"1.\"; i < len; i++)str += NUMERALS.charAt(xd[i]);\n                    } else {\n                        str = str.charAt(0) + \".\" + str.slice(1);\n                    }\n                }\n                str = str + (e < 0 ? \"p\" : \"p+\") + e;\n            } else if (e < 0) {\n                for(; ++e;)str = \"0\" + str;\n                str = \"0.\" + str;\n            } else {\n                if (++e > len) for(e -= len; e--;)str += \"0\";\n                else if (e < len) str = str.slice(0, e) + \".\" + str.slice(e);\n            }\n        }\n        str = (baseOut == 16 ? \"0x\" : baseOut == 2 ? \"0b\" : baseOut == 8 ? \"0o\" : \"\") + str;\n    }\n    return x.s < 0 ? \"-\" + str : str;\n}\n// Does not strip trailing zeros.\nfunction truncate(arr, len) {\n    if (arr.length > len) {\n        arr.length = len;\n        return true;\n    }\n}\n// Decimal methods\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */ /*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function abs(x) {\n    return new this(x).abs();\n}\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function acos(x) {\n    return new this(x).acos();\n}\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function acosh(x) {\n    return new this(x).acosh();\n}\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */ function add(x, y) {\n    return new this(x).plus(y);\n}\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function asin(x) {\n    return new this(x).asin();\n}\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function asinh(x) {\n    return new this(x).asinh();\n}\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function atan(x) {\n    return new this(x).atan();\n}\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function atanh(x) {\n    return new this(x).atanh();\n}\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */ function atan2(y, x) {\n    y = new this(y);\n    x = new this(x);\n    var r, pr = this.precision, rm = this.rounding, wpr = pr + 4;\n    // Either NaN\n    if (!y.s || !x.s) {\n        r = new this(NaN);\n    // Both ±Infinity\n    } else if (!y.d && !x.d) {\n        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\n        r.s = y.s;\n    // x is ±Infinity or y is ±0\n    } else if (!x.d || y.isZero()) {\n        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\n        r.s = y.s;\n    // y is ±Infinity or x is ±0\n    } else if (!y.d || x.isZero()) {\n        r = getPi(this, wpr, 1).times(0.5);\n        r.s = y.s;\n    // Both non-zero and finite\n    } else if (x.s < 0) {\n        this.precision = wpr;\n        this.rounding = 1;\n        r = this.atan(divide(y, x, wpr, 1));\n        x = getPi(this, wpr, 1);\n        this.precision = pr;\n        this.rounding = rm;\n        r = y.s < 0 ? r.minus(x) : r.plus(x);\n    } else {\n        r = this.atan(divide(y, x, wpr, 1));\n    }\n    return r;\n}\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function cbrt(x) {\n    return new this(x).cbrt();\n}\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function ceil(x) {\n    return finalise(x = new this(x), x.e + 1, 2);\n}\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */ function clamp(x, min, max) {\n    return new this(x).clamp(min, max);\n}\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */ function config(obj) {\n    if (!obj || typeof obj !== \"object\") throw Error(decimalError + \"Object expected\");\n    var i, p, v, useDefaults = obj.defaults === true, ps = [\n        \"precision\",\n        1,\n        MAX_DIGITS,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -EXP_LIMIT,\n        0,\n        \"toExpPos\",\n        0,\n        EXP_LIMIT,\n        \"maxE\",\n        0,\n        EXP_LIMIT,\n        \"minE\",\n        -EXP_LIMIT,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(i = 0; i < ps.length; i += 3){\n        if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\n        if ((v = obj[p]) !== void 0) {\n            if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\n            else throw Error(invalidArgument + p + \": \" + v);\n        }\n    }\n    if (p = \"crypto\", useDefaults) this[p] = DEFAULTS[p];\n    if ((v = obj[p]) !== void 0) {\n        if (v === true || v === false || v === 0 || v === 1) {\n            if (v) {\n                if (typeof crypto != \"undefined\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                    this[p] = true;\n                } else {\n                    throw Error(cryptoUnavailable);\n                }\n            } else {\n                this[p] = false;\n            }\n        } else {\n            throw Error(invalidArgument + p + \": \" + v);\n        }\n    }\n    return this;\n}\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function cos(x) {\n    return new this(x).cos();\n}\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function cosh(x) {\n    return new this(x).cosh();\n}\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */ function clone(obj) {\n    var i, p, ps;\n    /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */ function Decimal(v) {\n        var e, i, t, x = this;\n        // Decimal called without new.\n        if (!(x instanceof Decimal)) return new Decimal(v);\n        // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n        // which points to Object.\n        x.constructor = Decimal;\n        // Duplicate.\n        if (isDecimalInstance(v)) {\n            x.s = v.s;\n            if (external) {\n                if (!v.d || v.e > Decimal.maxE) {\n                    // Infinity.\n                    x.e = NaN;\n                    x.d = null;\n                } else if (v.e < Decimal.minE) {\n                    // Zero.\n                    x.e = 0;\n                    x.d = [\n                        0\n                    ];\n                } else {\n                    x.e = v.e;\n                    x.d = v.d.slice();\n                }\n            } else {\n                x.e = v.e;\n                x.d = v.d ? v.d.slice() : v.d;\n            }\n            return;\n        }\n        t = typeof v;\n        if (t === \"number\") {\n            if (v === 0) {\n                x.s = 1 / v < 0 ? -1 : 1;\n                x.e = 0;\n                x.d = [\n                    0\n                ];\n                return;\n            }\n            if (v < 0) {\n                v = -v;\n                x.s = -1;\n            } else {\n                x.s = 1;\n            }\n            // Fast path for small integers.\n            if (v === ~~v && v < 1e7) {\n                for(e = 0, i = v; i >= 10; i /= 10)e++;\n                if (external) {\n                    if (e > Decimal.maxE) {\n                        x.e = NaN;\n                        x.d = null;\n                    } else if (e < Decimal.minE) {\n                        x.e = 0;\n                        x.d = [\n                            0\n                        ];\n                    } else {\n                        x.e = e;\n                        x.d = [\n                            v\n                        ];\n                    }\n                } else {\n                    x.e = e;\n                    x.d = [\n                        v\n                    ];\n                }\n                return;\n            // Infinity, NaN.\n            } else if (v * 0 !== 0) {\n                if (!v) x.s = NaN;\n                x.e = NaN;\n                x.d = null;\n                return;\n            }\n            return parseDecimal(x, v.toString());\n        } else if (t !== \"string\") {\n            throw Error(invalidArgument + v);\n        }\n        // Minus sign?\n        if ((i = v.charCodeAt(0)) === 45) {\n            v = v.slice(1);\n            x.s = -1;\n        } else {\n            // Plus sign?\n            if (i === 43) v = v.slice(1);\n            x.s = 1;\n        }\n        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\n    }\n    Decimal.prototype = P;\n    Decimal.ROUND_UP = 0;\n    Decimal.ROUND_DOWN = 1;\n    Decimal.ROUND_CEIL = 2;\n    Decimal.ROUND_FLOOR = 3;\n    Decimal.ROUND_HALF_UP = 4;\n    Decimal.ROUND_HALF_DOWN = 5;\n    Decimal.ROUND_HALF_EVEN = 6;\n    Decimal.ROUND_HALF_CEIL = 7;\n    Decimal.ROUND_HALF_FLOOR = 8;\n    Decimal.EUCLID = 9;\n    Decimal.config = Decimal.set = config;\n    Decimal.clone = clone;\n    Decimal.isDecimal = isDecimalInstance;\n    Decimal.abs = abs;\n    Decimal.acos = acos;\n    Decimal.acosh = acosh; // ES6\n    Decimal.add = add;\n    Decimal.asin = asin;\n    Decimal.asinh = asinh; // ES6\n    Decimal.atan = atan;\n    Decimal.atanh = atanh; // ES6\n    Decimal.atan2 = atan2;\n    Decimal.cbrt = cbrt; // ES6\n    Decimal.ceil = ceil;\n    Decimal.clamp = clamp;\n    Decimal.cos = cos;\n    Decimal.cosh = cosh; // ES6\n    Decimal.div = div;\n    Decimal.exp = exp;\n    Decimal.floor = floor;\n    Decimal.hypot = hypot; // ES6\n    Decimal.ln = ln;\n    Decimal.log = log;\n    Decimal.log10 = log10; // ES6\n    Decimal.log2 = log2; // ES6\n    Decimal.max = max;\n    Decimal.min = min;\n    Decimal.mod = mod;\n    Decimal.mul = mul;\n    Decimal.pow = pow;\n    Decimal.random = random;\n    Decimal.round = round;\n    Decimal.sign = sign; // ES6\n    Decimal.sin = sin;\n    Decimal.sinh = sinh; // ES6\n    Decimal.sqrt = sqrt;\n    Decimal.sub = sub;\n    Decimal.sum = sum;\n    Decimal.tan = tan;\n    Decimal.tanh = tanh; // ES6\n    Decimal.trunc = trunc; // ES6\n    if (obj === void 0) obj = {};\n    if (obj) {\n        if (obj.defaults !== true) {\n            ps = [\n                \"precision\",\n                \"rounding\",\n                \"toExpNeg\",\n                \"toExpPos\",\n                \"maxE\",\n                \"minE\",\n                \"modulo\",\n                \"crypto\"\n            ];\n            for(i = 0; i < ps.length;)if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n        }\n    }\n    Decimal.config(obj);\n    return Decimal;\n}\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */ function div(x, y) {\n    return new this(x).div(y);\n}\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */ function exp(x) {\n    return new this(x).exp();\n}\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function floor(x) {\n    return finalise(x = new this(x), x.e + 1, 3);\n}\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */ function hypot() {\n    var i, n, t = new this(0);\n    external = false;\n    for(i = 0; i < arguments.length;){\n        n = new this(arguments[i++]);\n        if (!n.d) {\n            if (n.s) {\n                external = true;\n                return new this(1 / 0);\n            }\n            t = n;\n        } else if (t.d) {\n            t = t.plus(n.times(n));\n        }\n    }\n    external = true;\n    return t.sqrt();\n}\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */ function isDecimalInstance(obj) {\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\n}\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function ln(x) {\n    return new this(x).ln();\n}\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */ function log(x, y) {\n    return new this(x).log(y);\n}\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function log2(x) {\n    return new this(x).log(2);\n}\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function log10(x) {\n    return new this(x).log(10);\n}\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */ function max() {\n    return maxOrMin(this, arguments, \"lt\");\n}\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */ function min() {\n    return maxOrMin(this, arguments, \"gt\");\n}\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */ function mod(x, y) {\n    return new this(x).mod(y);\n}\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */ function mul(x, y) {\n    return new this(x).mul(y);\n}\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */ function pow(x, y) {\n    return new this(x).pow(y);\n}\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */ function random(sd) {\n    var d, e, k, n, i = 0, r = new this(1), rd = [];\n    if (sd === void 0) sd = this.precision;\n    else checkInt32(sd, 1, MAX_DIGITS);\n    k = Math.ceil(sd / LOG_BASE);\n    if (!this.crypto) {\n        for(; i < k;)rd[i++] = Math.random() * 1e7 | 0;\n    // Browsers supporting crypto.getRandomValues.\n    } else if (crypto.getRandomValues) {\n        d = crypto.getRandomValues(new Uint32Array(k));\n        for(; i < k;){\n            n = d[i];\n            // 0 <= n < 4294967296\n            // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\n            if (n >= 4.29e9) {\n                d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\n            } else {\n                // 0 <= n <= 4289999999\n                // 0 <= (n % 1e7) <= 9999999\n                rd[i++] = n % 1e7;\n            }\n        }\n    // Node.js supporting crypto.randomBytes.\n    } else if (crypto.randomBytes) {\n        // buffer\n        d = crypto.randomBytes(k *= 4);\n        for(; i < k;){\n            // 0 <= n < 2147483648\n            n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\n            // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\n            if (n >= 2.14e9) {\n                crypto.randomBytes(4).copy(d, i);\n            } else {\n                // 0 <= n <= 2139999999\n                // 0 <= (n % 1e7) <= 9999999\n                rd.push(n % 1e7);\n                i += 4;\n            }\n        }\n        i = k / 4;\n    } else {\n        throw Error(cryptoUnavailable);\n    }\n    k = rd[--i];\n    sd %= LOG_BASE;\n    // Convert trailing digits to zeros according to sd.\n    if (k && sd) {\n        n = mathpow(10, LOG_BASE - sd);\n        rd[i] = (k / n | 0) * n;\n    }\n    // Remove trailing words which are zero.\n    for(; rd[i] === 0; i--)rd.pop();\n    // Zero?\n    if (i < 0) {\n        e = 0;\n        rd = [\n            0\n        ];\n    } else {\n        e = -1;\n        // Remove leading words which are zero and adjust exponent accordingly.\n        for(; rd[0] === 0; e -= LOG_BASE)rd.shift();\n        // Count the digits of the first word of rd to determine leading zeros.\n        for(k = 1, n = rd[0]; n >= 10; n /= 10)k++;\n        // Adjust the exponent for leading zeros of the first word of rd.\n        if (k < LOG_BASE) e -= LOG_BASE - k;\n    }\n    r.e = e;\n    r.d = rd;\n    return r;\n}\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function round(x) {\n    return finalise(x = new this(x), x.e + 1, this.rounding);\n}\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function sign(x) {\n    x = new this(x);\n    return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;\n}\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function sin(x) {\n    return new this(x).sin();\n}\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function sinh(x) {\n    return new this(x).sinh();\n}\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function sqrt(x) {\n    return new this(x).sqrt();\n}\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */ function sub(x, y) {\n    return new this(x).sub(y);\n}\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */ function sum() {\n    var i = 0, args = arguments, x = new this(args[i]);\n    external = false;\n    for(; x.s && ++i < args.length;)x = x.plus(args[i]);\n    external = true;\n    return finalise(x, this.precision, this.rounding);\n}\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function tan(x) {\n    return new this(x).tan();\n}\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */ function tanh(x) {\n    return new this(x).tanh();\n}\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */ function trunc(x) {\n    return finalise(x = new this(x), x.e + 1, 1);\n}\nP[Symbol.for(\"nodejs.util.inspect.custom\")] = P.toString;\nP[Symbol.toStringTag] = \"Decimal\";\n// Create and configure initial Decimal constructor.\nvar Decimal = P.constructor = clone(DEFAULTS);\n// Create the internal constants from their string values.\nLN10 = new Decimal(LN10);\nPI = new Decimal(PI);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Decimal);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/decimal.js/decimal.mjs\n");

/***/ })

};
;