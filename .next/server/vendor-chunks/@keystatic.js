"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@keystatic";
exports.ids = ["vendor-chunks/@keystatic"];
exports.modules = {

/***/ "(rsc)/./node_modules/@keystatic/core/dist/api-bcef1679.node.react-server.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@keystatic/core/dist/api-bcef1679.node.react-server.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ component)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-runtime.js\");\n/* harmony import */ var _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-04c3e71f.node.react-server.js */ \"(rsc)/./node_modules/@keystatic/core/dist/index-04c3e71f.node.react-server.js\");\n/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! emery */ \"(rsc)/./node_modules/emery/dist/emery.esm.js\");\n/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.mjs\");\n/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sindresorhus/slugify */ \"(rsc)/./node_modules/@sindresorhus/slugify/index.js\");\n/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @braintree/sanitize-url */ \"(rsc)/./node_modules/@braintree/sanitize-url/dist/index.js\");\n\n\n\n\n\n\n// this is written like this rather than ArrayField<ComponentSchema> to avoid TypeScript erroring about circularity\nfunction component(options) {\n    return options;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGtleXN0YXRpYy9jb3JlL2Rpc3QvYXBpLWJjZWYxNjc5Lm5vZGUucmVhY3Qtc2VydmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBMkI7QUFDb0I7QUFDaEM7QUFDSztBQUNXO0FBQ0U7QUFFakMsbUhBQW1IO0FBQ25ILFNBQVNBLFVBQVVDLE9BQU87SUFDeEIsT0FBT0E7QUFDVDtBQUUwQiIsInNvdXJjZXMiOlsid2VicGFjazovL0BrZXlzdGF0aWMvdGVtcGxhdGVzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9Aa2V5c3RhdGljL2NvcmUvZGlzdC9hcGktYmNlZjE2Nzkubm9kZS5yZWFjdC1zZXJ2ZXIuanM/NTNjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3JlYWN0L2pzeC1ydW50aW1lJztcbmltcG9ydCAnLi9pbmRleC0wNGMzZTcxZi5ub2RlLnJlYWN0LXNlcnZlci5qcyc7XG5pbXBvcnQgJ2VtZXJ5JztcbmltcG9ydCAnZGVjaW1hbC5qcyc7XG5pbXBvcnQgJ0BzaW5kcmVzb3JodXMvc2x1Z2lmeSc7XG5pbXBvcnQgJ0BicmFpbnRyZWUvc2FuaXRpemUtdXJsJztcblxuLy8gdGhpcyBpcyB3cml0dGVuIGxpa2UgdGhpcyByYXRoZXIgdGhhbiBBcnJheUZpZWxkPENvbXBvbmVudFNjaGVtYT4gdG8gYXZvaWQgVHlwZVNjcmlwdCBlcnJvcmluZyBhYm91dCBjaXJjdWxhcml0eVxuZnVuY3Rpb24gY29tcG9uZW50KG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbmV4cG9ydCB7IGNvbXBvbmVudCBhcyBjIH07XG4iXSwibmFtZXMiOlsiY29tcG9uZW50Iiwib3B0aW9ucyIsImMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@keystatic/core/dist/api-bcef1679.node.react-server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@keystatic/core/dist/error-formatting-ec352252.node.react-server.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@keystatic/core/dist/error-formatting-ec352252.node.react-server.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   P: () => (/* binding */ PropValidationError),\n/* harmony export */   f: () => (/* binding */ formatFormDataError),\n/* harmony export */   l: () => (/* binding */ loadDataFile),\n/* harmony export */   p: () => (/* binding */ parseProps),\n/* harmony export */   t: () => (/* binding */ toFormattedFormDataError),\n/* harmony export */   v: () => (/* binding */ validateArrayLength)\n/* harmony export */ });\n/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! emery */ \"(rsc)/./node_modules/emery/dist/emery.esm.js\");\n/* harmony import */ var js_yaml__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-yaml */ \"(rsc)/./node_modules/js-yaml/dist/js-yaml.mjs\");\n/* harmony import */ var _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-04c3e71f.node.react-server.js */ \"(rsc)/./node_modules/@keystatic/core/dist/index-04c3e71f.node.react-server.js\");\n\n\n\nfunction validateArrayLength(schema, val, path) {\n    var _schema$validation, _schema$validation2;\n    if (((_schema$validation = schema.validation) === null || _schema$validation === void 0 || (_schema$validation = _schema$validation.length) === null || _schema$validation === void 0 ? void 0 : _schema$validation.min) !== undefined && val.length < schema.validation.length.min) {\n        return new PropValidationError(new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(`Must have at least ${schema.validation.length.min} element${schema.validation.length.min === 1 ? \"\" : \"s\"}`), path, schema);\n    }\n    if (((_schema$validation2 = schema.validation) === null || _schema$validation2 === void 0 || (_schema$validation2 = _schema$validation2.length) === null || _schema$validation2 === void 0 ? void 0 : _schema$validation2.max) !== undefined && val.length > schema.validation.length.max) {\n        return new PropValidationError(new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(`Must have at most ${schema.validation.length.max} element${schema.validation.length.max === 1 ? \"\" : \"s\"}}`), path, schema);\n    }\n}\nclass PropValidationError extends Error {\n    constructor(cause, path, schema){\n        super(`field error at ${path.join(\".\")}`, {\n            cause\n        });\n        this.path = path;\n        this.schema = schema;\n        this.cause = cause;\n    }\n}\nfunction toFormFieldStoredValue(val) {\n    if (val === null) {\n        return undefined;\n    }\n    return val;\n}\nconst isArray = Array.isArray;\nfunction parseProps(schema, _value, path, pathWithArrayFieldSlugs, parseFormField, /** This should be true for the reader and false elsewhere */ validateArrayFieldLength) {\n    let value = toFormFieldStoredValue(_value);\n    if (schema.kind === \"form\") {\n        try {\n            return parseFormField(schema, value, path, pathWithArrayFieldSlugs);\n        } catch (err) {\n            throw new PropValidationError(err, path, schema);\n        }\n    }\n    if (schema.kind === \"child\") {\n        return null;\n    }\n    if (schema.kind === \"conditional\") {\n        if (value === undefined) {\n            return (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.D)(schema);\n        }\n        try {\n            if (typeof value !== \"object\" || value === null || isArray(value)) {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be an object\");\n            }\n            for (const key of Object.keys(value)){\n                if (key !== \"discriminant\" && key !== \"value\") {\n                    throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(`Must only contain keys \"discriminant\" and \"value\", not \"${key}\"`);\n                }\n            }\n        } catch (err) {\n            throw new PropValidationError(err, path, schema);\n        }\n        const parsedDiscriminant = parseProps(schema.discriminant, value.discriminant, path.concat(\"discriminant\"), pathWithArrayFieldSlugs.concat(\"discriminant\"), parseFormField, validateArrayFieldLength);\n        return {\n            discriminant: parsedDiscriminant,\n            value: parseProps(schema.values[parsedDiscriminant], value.value, path.concat(\"value\"), pathWithArrayFieldSlugs.concat(\"value\"), parseFormField, validateArrayFieldLength)\n        };\n    }\n    if (schema.kind === \"object\") {\n        if (value === undefined) {\n            value = {};\n        }\n        try {\n            if (typeof value !== \"object\" || value === null || isArray(value)) {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be an object\");\n            }\n            const allowedKeysSet = new Set(Object.keys(schema.fields));\n            for (const key of Object.keys(value)){\n                if (!allowedKeysSet.has(key)) {\n                    throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(`Key on object value \"${key}\" is not allowed`);\n                }\n            }\n        } catch (err) {\n            throw new PropValidationError(err, path, schema);\n        }\n        const val = {};\n        const errors = [];\n        for (const key of Object.keys(schema.fields)){\n            let individualVal = value[key];\n            try {\n                const propVal = parseProps(schema.fields[key], individualVal, path.concat(key), pathWithArrayFieldSlugs.concat(key), parseFormField, validateArrayFieldLength);\n                val[key] = propVal;\n            } catch (err) {\n                errors.push(err);\n            }\n        }\n        if (errors.length) {\n            throw new AggregateError(errors);\n        }\n        return val;\n    }\n    if (schema.kind === \"array\") {\n        if (value === undefined) {\n            return [];\n        }\n        try {\n            if (!isArray(value)) {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be an array\");\n            }\n        } catch (err) {\n            throw new PropValidationError(err, path, schema);\n        }\n        const errors = [];\n        try {\n            if (validateArrayFieldLength) {\n                const error = validateArrayLength(schema, value, path);\n                if (error !== undefined) {\n                    errors.push(error);\n                }\n            }\n            return value.map((innerVal, i)=>{\n                try {\n                    let slug = i.toString();\n                    if (schema.slugField && typeof innerVal === \"object\" && innerVal !== null && !isArray(innerVal)) {\n                        if (schema.element.kind !== \"object\") {\n                            throw new Error(\"slugField on array fields requires the an object field element\");\n                        }\n                        const slugField = schema.element.fields[schema.slugField];\n                        if (!slugField) {\n                            throw new Error(`slugField \"${schema.slugField}\" does not exist on object field`);\n                        }\n                        if (slugField.kind !== \"form\") {\n                            throw new Error(`slugField \"${schema.slugField}\" is not a form field`);\n                        }\n                        if (slugField.formKind !== \"slug\") {\n                            throw new Error(`slugField \"${schema.slugField}\" is not a slug field`);\n                        }\n                        let parsedSlugFieldValue;\n                        try {\n                            parsedSlugFieldValue = slugField.parse(toFormFieldStoredValue(innerVal[schema.slugField]), undefined);\n                        } catch (err) {\n                            throw new AggregateError([\n                                err\n                            ]);\n                        }\n                        slug = slugField.serializeWithSlug(parsedSlugFieldValue).slug;\n                    }\n                    return parseProps(schema.element, innerVal, path.concat(i), pathWithArrayFieldSlugs.concat(slug), parseFormField, validateArrayFieldLength);\n                } catch (err) {\n                    errors.push(err);\n                }\n            });\n        } finally{\n            if (errors.length) {\n                throw new AggregateError(errors);\n            }\n        }\n    }\n    (0,emery__WEBPACK_IMPORTED_MODULE_0__.assertNever)(schema);\n}\nconst textDecoder = new TextDecoder();\nconst textEncoder = new TextEncoder();\nfunction splitFrontmatter(data) {\n    const str = textDecoder.decode(data);\n    const match = str.match(/^---(?:\\r?\\n([^]*?))?\\r?\\n---\\r?\\n?/);\n    if (match) {\n        var _match$;\n        const encoded = textEncoder.encode(match[0]);\n        return {\n            frontmatter: (_match$ = match[1]) !== null && _match$ !== void 0 ? _match$ : \"\",\n            content: data.slice(encoded.byteLength)\n        };\n    }\n    return null;\n}\nfunction loadDataFile(data, formatInfo) {\n    const parse = formatInfo.data === \"json\" ? JSON.parse : js_yaml__WEBPACK_IMPORTED_MODULE_1__.load;\n    if (!formatInfo.contentField) {\n        const dataFile = textDecoder.decode(data);\n        return {\n            loaded: parse(dataFile)\n        };\n    }\n    const res = splitFrontmatter(data);\n    (0,emery__WEBPACK_IMPORTED_MODULE_0__.assert)(res !== null, \"frontmatter not found\");\n    return {\n        loaded: parse(res.frontmatter),\n        extraFakeFile: {\n            path: `${formatInfo.contentField.key}${formatInfo.contentField.config.contentExtension}`,\n            contents: res.content\n        }\n    };\n}\nfunction flattenErrors(error) {\n    if (error instanceof AggregateError) {\n        return error.errors.flatMap(flattenErrors);\n    }\n    return [\n        error\n    ];\n}\nfunction formatFormDataError(error) {\n    const flatErrors = flattenErrors(error);\n    return flatErrors.map((error)=>{\n        if (error instanceof PropValidationError) {\n            const path = error.path.join(\".\");\n            return `${path}: ${error.cause instanceof _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad ? error.cause.message : `Unexpected error: ${error.cause}`}`;\n        }\n        return `Unexpected error: ${error}`;\n    }).join(\"\\n\");\n}\nfunction toFormattedFormDataError(error) {\n    const formatted = formatFormDataError(error);\n    return new Error(`Field validation failed:\\n` + formatted);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@keystatic/core/dist/error-formatting-ec352252.node.react-server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@keystatic/core/dist/generic-0a163b6b.node.react-server.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@keystatic/core/dist/generic-0a163b6b.node.react-server.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var react__WEBPACK_IMPORTED_MODULE_6___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ cache),\n/* harmony export */   c: () => (/* binding */ collectionReader),\n/* harmony export */   s: () => (/* binding */ singletonReader)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-runtime.js\");\n/* harmony import */ var _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-04c3e71f.node.react-server.js */ \"(rsc)/./node_modules/@keystatic/core/dist/index-04c3e71f.node.react-server.js\");\n/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.mjs\");\n/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sindresorhus/slugify */ \"(rsc)/./node_modules/@sindresorhus/slugify/index.js\");\n/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @braintree/sanitize-url */ \"(rsc)/./node_modules/@braintree/sanitize-url/dist/index.js\");\n/* harmony import */ var _error_formatting_ec352252_node_react_server_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./error-formatting-ec352252.node.react-server.js */ \"(rsc)/./node_modules/@keystatic/core/dist/error-formatting-ec352252.node.react-server.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js\");\n\n\n\n\n\n\n\nfunction cache$1(func) {\n    return func;\n}\n// we conditionally using it since it's not actually in stable react releases yet\n// (though it should be unnecessary since this file is only imported in react-server environments anyway)\n// it's a function because some tools try to be smart with accessing things on namespace imports\n// and error at build time if you try to read an export that doesn't exist on a namespace object\nfunction getCache(react) {\n    var _react$cache;\n    return (_react$cache = react.cache) !== null && _react$cache !== void 0 ? _react$cache : cache$1;\n}\nconst cache = getCache(/*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_6___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_6___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_6__, 2))));\nasync function getAllEntries(parent, fsReader) {\n    return (await Promise.all((await fsReader.readdir(parent)).map(async (dirent)=>{\n        const name = `${parent}${dirent.name}`;\n        const entry = {\n            entry: dirent,\n            name\n        };\n        if (dirent.kind === \"directory\") {\n            return [\n                entry,\n                ...await getAllEntries(`${name}/`, fsReader)\n            ];\n        }\n        return entry;\n    }))).flat();\n}\nconst listCollection = cache(async function listCollection(collectionPath, glob, formatInfo, extension, fsReader) {\n    const entries = glob === \"*\" ? (await fsReader.readdir(collectionPath)).map((entry)=>({\n            entry,\n            name: entry.name\n        })) : (await getAllEntries(`${collectionPath}/`, fsReader)).map((x)=>({\n            entry: x.entry,\n            name: x.name.slice(collectionPath.length + 1)\n        }));\n    return (await Promise.all(entries.map(async (x)=>{\n        if (formatInfo.dataLocation === \"index\") {\n            if (x.entry.kind !== \"directory\") return [];\n            if (!await fsReader.fileExists((0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__.m)(`${collectionPath}/${x.name}`, formatInfo))) {\n                return [];\n            }\n            return [\n                x.name\n            ];\n        } else {\n            if (x.entry.kind !== \"file\" || !x.name.endsWith(extension)) {\n                return [];\n            }\n            return [\n                x.name.slice(0, -extension.length)\n            ];\n        }\n    }))).flat();\n});\nfunction collectionReader(collection, config, fsReader) {\n    const formatInfo = (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__.w)(config, collection);\n    const collectionPath = (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__.v)(config, collection);\n    const collectionConfig = config.collections[collection];\n    const schema = (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__.o)(collectionConfig.schema);\n    const glob = (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__.y)(config, collection);\n    const extension = (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__.aa)(formatInfo);\n    const read = (slug, ...args)=>{\n        var _args$;\n        return readItem(schema, formatInfo, (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__.x)(config, collection, slug), (_args$ = args[0]) === null || _args$ === void 0 ? void 0 : _args$.resolveLinkedFiles, `\"${slug}\" in collection \"${collection}\"`, fsReader, slug, collectionConfig.slugField, glob);\n    };\n    const list = ()=>listCollection(collectionPath, glob, formatInfo, extension, fsReader);\n    return {\n        read,\n        readOrThrow: async (...args)=>{\n            const entry = await read(...args);\n            if (entry === null) {\n                throw new Error(`Entry \"${args[0]}\" not found in collection \"${collection}\"`);\n            }\n            return entry;\n        },\n        // TODO: this could drop the fs.stat call that list does for each item\n        // since we just immediately read it\n        all: async (...args)=>{\n            const slugs = await list();\n            return (await Promise.all(slugs.map(async (slug)=>{\n                const entry = await read(slug, args[0]);\n                if (entry === null) return [];\n                return [\n                    {\n                        slug,\n                        entry\n                    }\n                ];\n            }))).flat();\n        },\n        list\n    };\n}\nconst readItem = cache(async function readItem(rootSchema, formatInfo, itemDir, resolveLinkedFiles, debugReference, fsReader, ...slugInfo) {\n    const dataFile = await fsReader.readFile((0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__.m)(itemDir, formatInfo));\n    if (dataFile === null) return null;\n    const { loaded, extraFakeFile } = (0,_error_formatting_ec352252_node_react_server_js__WEBPACK_IMPORTED_MODULE_5__.l)(dataFile, formatInfo);\n    const contentFieldPathsToEagerlyResolve = resolveLinkedFiles ? [] : undefined;\n    let validated;\n    try {\n        validated = (0,_error_formatting_ec352252_node_react_server_js__WEBPACK_IMPORTED_MODULE_5__.p)(rootSchema, loaded, [], [], (schema, value, path, pathWithArrayFieldSlugs)=>{\n            if (schema.formKind === \"asset\") {\n                return schema.reader.parse(value);\n            }\n            if (schema.formKind === \"content\") {\n                contentFieldPathsToEagerlyResolve === null || contentFieldPathsToEagerlyResolve === void 0 || contentFieldPathsToEagerlyResolve.push(path);\n                return async ()=>{\n                    let content;\n                    const filename = pathWithArrayFieldSlugs.join(\"/\") + schema.contentExtension;\n                    if (filename === (extraFakeFile === null || extraFakeFile === void 0 ? void 0 : extraFakeFile.path)) {\n                        content = extraFakeFile.contents;\n                    } else {\n                        var _await$fsReader$readF;\n                        content = (_await$fsReader$readF = await fsReader.readFile(`${itemDir}/${filename}`)) !== null && _await$fsReader$readF !== void 0 ? _await$fsReader$readF : undefined;\n                    }\n                    return schema.reader.parse(value, {\n                        content\n                    });\n                };\n            }\n            if (path.length === 1 && slugInfo[0] !== undefined) {\n                const [slug, slugField, glob] = slugInfo;\n                if (path[0] === slugField) {\n                    if (schema.formKind !== \"slug\") {\n                        throw new Error(`Slug field ${slugInfo[1]} is not a slug field`);\n                    }\n                    return schema.reader.parseWithSlug(value, {\n                        slug,\n                        glob\n                    });\n                }\n            }\n            return schema.reader.parse(value);\n        }, true);\n        if (contentFieldPathsToEagerlyResolve !== null && contentFieldPathsToEagerlyResolve !== void 0 && contentFieldPathsToEagerlyResolve.length) {\n            await Promise.all(contentFieldPathsToEagerlyResolve.map(async (path)=>{\n                const parentValue = (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__.R)(validated, path.slice(0, -1));\n                const keyOnParent = path[path.length - 1];\n                const originalValue = parentValue[keyOnParent];\n                parentValue[keyOnParent] = await originalValue();\n            }));\n        }\n    } catch (err) {\n        const formatted = (0,_error_formatting_ec352252_node_react_server_js__WEBPACK_IMPORTED_MODULE_5__.f)(err);\n        throw new Error(`Invalid data for ${debugReference}:\\n${formatted}`);\n    }\n    return validated;\n});\nfunction singletonReader(singleton, config, fsReader) {\n    const formatInfo = (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__.ab)(config, singleton);\n    const singletonPath = (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__.c)(config, singleton);\n    const schema = (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__.o)(config.singletons[singleton].schema);\n    const read = (...args)=>{\n        var _args$2;\n        return readItem(schema, formatInfo, singletonPath, (_args$2 = args[0]) === null || _args$2 === void 0 ? void 0 : _args$2.resolveLinkedFiles, `singleton \"${singleton}\"`, fsReader, undefined);\n    };\n    return {\n        read,\n        readOrThrow: async (...opts)=>{\n            const entry = await read(...opts);\n            if (entry === null) {\n                throw new Error(`Singleton \"${singleton}\" not found`);\n            }\n            return entry;\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@keystatic/core/dist/generic-0a163b6b.node.react-server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@keystatic/core/dist/index-04c3e71f.node.react-server.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@keystatic/core/dist/index-04c3e71f.node.react-server.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ getInlineNodes),\n/* harmony export */   A: () => (/* binding */ getKeysForArrayValue),\n/* harmony export */   B: () => (/* binding */ setKeysForArrayValue),\n/* harmony export */   C: () => (/* binding */ getSlugFromState),\n/* harmony export */   D: () => (/* binding */ getInitialPropsValue),\n/* harmony export */   E: () => (/* binding */ getAncestorComponentChildFieldDocumentFeatures),\n/* harmony export */   F: () => (/* binding */ isBlock),\n/* harmony export */   G: () => (/* binding */ allMarks),\n/* harmony export */   H: () => (/* binding */ isListNode),\n/* harmony export */   I: () => (/* binding */ isElementActive),\n/* harmony export */   J: () => (/* binding */ getInitialPropsValueFromInitializer),\n/* harmony export */   K: () => (/* binding */ KEYSTATIC_CLOUD_API_URL),\n/* harmony export */   L: () => (/* binding */ aliasesToLabel),\n/* harmony export */   M: () => (/* binding */ aliasesToCanonicalName),\n/* harmony export */   N: () => (/* binding */ canonicalNameToLabel),\n/* harmony export */   O: () => (/* binding */ labelToCanonicalName),\n/* harmony export */   P: () => (/* binding */ languagesWithAliases),\n/* harmony export */   Q: () => (/* binding */ transformProps),\n/* harmony export */   R: () => (/* binding */ getValueAtPropPath),\n/* harmony export */   S: () => (/* binding */ cloneDescendent),\n/* harmony export */   T: () => (/* binding */ areArraysEqual),\n/* harmony export */   U: () => (/* binding */ getSchemaAtPropPath),\n/* harmony export */   V: () => (/* binding */ findChildPropPaths),\n/* harmony export */   W: () => (/* binding */ getSelectedTableArea),\n/* harmony export */   X: () => (/* binding */ getRelativeRowPath),\n/* harmony export */   Y: () => (/* binding */ cell),\n/* harmony export */   Z: () => (/* binding */ clearFormatting),\n/* harmony export */   _: () => (/* binding */ EditorAfterButIgnoringingPointsWithNoContent),\n/* harmony export */   a: () => (/* binding */ KEYSTATIC_CLOUD_HEADERS),\n/* harmony export */   a0: () => (/* binding */ addMarksToChildren),\n/* harmony export */   a1: () => (/* binding */ setLinkForChildren),\n/* harmony export */   a2: () => (/* binding */ forceDisableMarkForChildren),\n/* harmony export */   a3: () => (/* binding */ addMarkToChildren),\n/* harmony export */   a4: () => (/* binding */ getPlaceholderTextForPropPath),\n/* harmony export */   a5: () => (/* binding */ Prism),\n/* harmony export */   a6: () => (/* binding */ _createDocumentEditor),\n/* harmony export */   a7: () => (/* binding */ getWholeDocumentFeaturesForChildField),\n/* harmony export */   a8: () => (/* binding */ serializeProps),\n/* harmony export */   a9: () => (/* binding */ updateTreeWithChanges),\n/* harmony export */   aA: () => (/* binding */ sha1),\n/* harmony export */   aB: () => (/* binding */ getDefaultValue),\n/* harmony export */   aC: () => (/* binding */ DocumentFieldInput),\n/* harmony export */   aD: () => (/* binding */ parseToEditorState),\n/* harmony export */   aE: () => (/* binding */ collectDirectoriesUsedInSchema),\n/* harmony export */   aF: () => (/* binding */ serializeFromEditorState),\n/* harmony export */   aG: () => (/* binding */ parseToEditorStateMDX),\n/* harmony export */   aH: () => (/* binding */ serializeFromEditorStateMDX),\n/* harmony export */   aI: () => (/* binding */ createEditorSchema),\n/* harmony export */   aa: () => (/* binding */ getDataFileExtension),\n/* harmony export */   ab: () => (/* binding */ getSingletonFormat),\n/* harmony export */   ac: () => (/* binding */ isCloudConfig),\n/* harmony export */   ad: () => (/* binding */ FieldDataError),\n/* harmony export */   ae: () => (/* binding */ basicFormFieldWithSimpleReaderParse),\n/* harmony export */   af: () => (/* binding */ CheckboxFieldInput),\n/* harmony export */   ag: () => (/* binding */ DateFieldInput),\n/* harmony export */   ah: () => (/* binding */ assertRequired),\n/* harmony export */   ai: () => (/* binding */ DatetimeFieldInput),\n/* harmony export */   aj: () => (/* binding */ ImageFieldInput),\n/* harmony export */   ak: () => (/* binding */ getSrcPrefix),\n/* harmony export */   al: () => (/* binding */ fixPath),\n/* harmony export */   am: () => (/* binding */ FileFieldInput),\n/* harmony export */   an: () => (/* binding */ NumberFieldInput),\n/* harmony export */   ao: () => (/* binding */ MultiselectFieldInput),\n/* harmony export */   ap: () => (/* binding */ PathReferenceInput),\n/* harmony export */   aq: () => (/* binding */ RelationshipInput),\n/* harmony export */   ar: () => (/* binding */ SelectFieldInput),\n/* harmony export */   as: () => (/* binding */ SlugFieldInput),\n/* harmony export */   at: () => (/* binding */ validateText),\n/* harmony export */   au: () => (/* binding */ UrlFieldInput),\n/* harmony export */   av: () => (/* binding */ BlocksFieldInput),\n/* harmony export */   aw: () => (/* binding */ text),\n/* harmony export */   ax: () => (/* binding */ CloudImageFieldInput),\n/* harmony export */   ay: () => (/* binding */ document$1),\n/* harmony export */   az: () => (/* binding */ IntegerFieldInput),\n/* harmony export */   b: () => (/* binding */ getEntriesInCollectionWithTreeKey),\n/* harmony export */   c: () => (/* binding */ getSingletonPath),\n/* harmony export */   d: () => (/* binding */ getTreeNodeAtPath),\n/* harmony export */   e: () => (/* binding */ treeSha),\n/* harmony export */   f: () => (/* binding */ treeToEntries),\n/* harmony export */   g: () => (/* binding */ getPathPrefix),\n/* harmony export */   h: () => (/* binding */ getBranchPrefix),\n/* harmony export */   i: () => (/* binding */ isGitHubConfig),\n/* harmony export */   j: () => (/* binding */ getSplitCloudProject),\n/* harmony export */   k: () => (/* binding */ getRepoUrl),\n/* harmony export */   l: () => (/* binding */ isLocalConfig),\n/* harmony export */   m: () => (/* binding */ getEntryDataFilepath),\n/* harmony export */   n: () => (/* binding */ nodeTypeMatcher),\n/* harmony export */   o: () => (/* binding */ object),\n/* harmony export */   p: () => (/* binding */ pluralize),\n/* harmony export */   q: () => (/* binding */ getDirectoriesForTreeKey),\n/* harmony export */   r: () => (/* binding */ redirectToCloudAuth),\n/* harmony export */   s: () => (/* binding */ getTreeKey),\n/* harmony export */   t: () => (/* binding */ treeEntriesToTreeNodes),\n/* harmony export */   u: () => (/* binding */ blobSha),\n/* harmony export */   v: () => (/* binding */ getCollectionPath),\n/* harmony export */   w: () => (/* binding */ getCollectionFormat),\n/* harmony export */   x: () => (/* binding */ getCollectionItemPath),\n/* harmony export */   y: () => (/* binding */ getSlugGlobForCollection),\n/* harmony export */   z: () => (/* binding */ updateValue)\n/* harmony export */ });\n/* harmony import */ var _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @markdoc/markdoc */ \"(rsc)/./node_modules/@markdoc/markdoc/dist/index.mjs\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! slate */ \"(rsc)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var emery_assertions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! emery/assertions */ \"(rsc)/./node_modules/emery/assertions/dist/emery-assertions.esm.js\");\n/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! emery */ \"(rsc)/./node_modules/emery/dist/emery.esm.js\");\n/* harmony import */ var js_base64__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! js-base64 */ \"(rsc)/./node_modules/js-base64/base64.mjs\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-runtime.js\");\n/* harmony import */ var _emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/weak-memoize */ \"(rsc)/./node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js\");\n\n\n\n\n\n\n\n\nfunction fixPath(path) {\n    return path.replace(/^\\.?\\/+/, \"\").replace(/\\/*$/, \"\");\n}\nconst collectionPath = /\\/\\*\\*?(?:$|\\/)/;\nfunction getConfiguredCollectionPath(config, collection) {\n    var _collectionConfig$pat;\n    const collectionConfig = config.collections[collection];\n    const path = (_collectionConfig$pat = collectionConfig.path) !== null && _collectionConfig$pat !== void 0 ? _collectionConfig$pat : `${collection}/*/`;\n    if (!collectionPath.test(path)) {\n        throw new Error(`Collection path must end with /* or /** or include /*/ or /**/ but ${collection} has ${path}`);\n    }\n    return path;\n}\nfunction getCollectionPath(config, collection) {\n    const configuredPath = getConfiguredCollectionPath(config, collection);\n    const path = fixPath(configuredPath.replace(/\\*\\*?.*$/, \"\"));\n    return path;\n}\nfunction getCollectionFormat(config, collection) {\n    var _collectionConfig$for;\n    const collectionConfig = config.collections[collection];\n    return getFormatInfo((_collectionConfig$for = collectionConfig.format) !== null && _collectionConfig$for !== void 0 ? _collectionConfig$for : \"yaml\", collectionConfig.schema, getConfiguredCollectionPath(config, collection));\n}\nfunction getSingletonFormat(config, singleton) {\n    var _singletonConfig$form, _singletonConfig$path;\n    const singletonConfig = config.singletons[singleton];\n    return getFormatInfo((_singletonConfig$form = singletonConfig.format) !== null && _singletonConfig$form !== void 0 ? _singletonConfig$form : \"yaml\", singletonConfig.schema, (_singletonConfig$path = singletonConfig.path) !== null && _singletonConfig$path !== void 0 ? _singletonConfig$path : `${singleton}/`);\n}\nfunction getCollectionItemPath(config, collection, slug) {\n    const basePath = getCollectionPath(config, collection);\n    const suffix = getCollectionItemSlugSuffix(config, collection);\n    return `${basePath}/${slug}${suffix}`;\n}\nfunction getEntryDataFilepath(dir, formatInfo) {\n    return `${dir}${formatInfo.dataLocation === \"index\" ? \"/index\" : \"\"}${getDataFileExtension(formatInfo)}`;\n}\nfunction getSlugGlobForCollection(config, collection) {\n    const collectionPath = getConfiguredCollectionPath(config, collection);\n    return collectionPath.includes(\"**\") ? \"**\" : \"*\";\n}\nfunction getCollectionItemSlugSuffix(config, collection) {\n    const configuredPath = getConfiguredCollectionPath(config, collection);\n    const path = fixPath(configuredPath.replace(/^[^*]+\\*\\*?/, \"\"));\n    return path ? `/${path}` : \"\";\n}\nfunction getSingletonPath(config, singleton) {\n    var _singleton$path, _singleton$path2;\n    if ((_singleton$path = config.singletons[singleton].path) !== null && _singleton$path !== void 0 && _singleton$path.includes(\"*\")) {\n        throw new Error(`Singleton paths cannot include * but ${singleton} has ${config.singletons[singleton].path}`);\n    }\n    return fixPath((_singleton$path2 = config.singletons[singleton].path) !== null && _singleton$path2 !== void 0 ? _singleton$path2 : singleton);\n}\nfunction getDataFileExtension(formatInfo) {\n    return formatInfo.contentField ? formatInfo.contentField.config.contentExtension : \".\" + formatInfo.data;\n}\nfunction getFormatInfo(format, schema, path) {\n    var _format$data;\n    const dataLocation = path.endsWith(\"/\") ? \"index\" : \"outer\";\n    if (typeof format === \"string\") {\n        return {\n            dataLocation,\n            contentField: undefined,\n            data: format\n        };\n    }\n    let contentField;\n    if (format.contentField) {\n        const field = schema[format.contentField];\n        (0,emery__WEBPACK_IMPORTED_MODULE_1__.assert)((field === null || field === void 0 ? void 0 : field.kind) === \"form\", `${format.contentField} is not a form field`);\n        (0,emery__WEBPACK_IMPORTED_MODULE_1__.assert)(field.formKind === \"content\", `${format.contentField} is not a content field`);\n        contentField = {\n            key: format.contentField,\n            config: field\n        };\n    }\n    return {\n        data: (_format$data = format.data) !== null && _format$data !== void 0 ? _format$data : \"yaml\",\n        contentField,\n        dataLocation\n    };\n}\nfunction getPathPrefix(storage) {\n    if (storage.kind === \"local\" || !storage.pathPrefix) {\n        return undefined;\n    }\n    return fixPath(storage.pathPrefix) + \"/\";\n}\nasync function sha1(content) {\n    return (0,crypto__WEBPACK_IMPORTED_MODULE_2__.createHash)(\"sha1\").update(content).digest(\"hex\");\n}\nconst textEncoder$2 = new TextEncoder();\nfunction blobSha(contents) {\n    const blobPrefix = textEncoder$2.encode(\"blob \" + contents.length + \"\\x00\");\n    const array = new Uint8Array(blobPrefix.byteLength + contents.byteLength);\n    array.set(blobPrefix, 0);\n    array.set(contents, blobPrefix.byteLength);\n    return sha1(array);\n}\nfunction getTreeNodeAtPath(root, path) {\n    const parts = path.split(\"/\");\n    let node = root.get(parts[0]);\n    for (const part of parts.slice(1)){\n        if (!node) return undefined;\n        if (!node.children) return undefined;\n        node = node.children.get(part);\n    }\n    return node;\n}\nfunction getNodeAtPath(tree, path) {\n    let node = tree;\n    for (const part of path.split(\"/\")){\n        if (!node.has(part)) {\n            node.set(part, new Map());\n        }\n        const innerNode = node.get(part);\n        (0,emery__WEBPACK_IMPORTED_MODULE_1__.assert)(innerNode instanceof Map, \"expected tree\");\n        node = innerNode;\n    }\n    return node;\n}\nfunction getFilename(path) {\n    return path.replace(/.*\\//, \"\");\n}\nfunction getDirname(path) {\n    return path.replace(/\\/[^/]+$/, \"\");\n}\nfunction toTreeChanges(changes) {\n    const changesRoot = new Map();\n    for (const deletion of changes.deletions){\n        const parentTree = getNodeAtPath(changesRoot, getDirname(deletion));\n        parentTree.set(getFilename(deletion), \"delete\");\n    }\n    for (const addition of changes.additions){\n        const parentTree = getNodeAtPath(changesRoot, getDirname(addition.path));\n        parentTree.set(getFilename(addition.path), addition.contents);\n    }\n    return changesRoot;\n}\nconst SPACE_CHAR_CODE = 32;\nconst space = new Uint8Array([\n    SPACE_CHAR_CODE\n]);\nconst nullchar = new Uint8Array([\n    0\n]);\nconst tree = textEncoder$2.encode(\"tree \");\n// based on https://github.com/isomorphic-git/isomorphic-git/blob/c09dfa20ffe0ab9e6602e0fa172d72ba8994e443/src/models/GitTree.js#L108-L122\nfunction treeSha(children) {\n    const entries = [\n        ...children\n    ].map(([name, node])=>({\n            name,\n            sha: node.entry.sha,\n            mode: node.entry.mode\n        }));\n    entries.sort((a, b)=>{\n        const aName = a.mode === \"040000\" ? a.name + \"/\" : a.name;\n        const bName = b.mode === \"040000\" ? b.name + \"/\" : b.name;\n        return aName === bName ? 0 : aName < bName ? -1 : 1;\n    });\n    const treeObject = entries.flatMap((entry)=>{\n        const mode = textEncoder$2.encode(entry.mode.replace(/^0/, \"\"));\n        const name = textEncoder$2.encode(entry.name);\n        const sha = hexToBytes(entry.sha);\n        return [\n            mode,\n            space,\n            name,\n            nullchar,\n            sha\n        ];\n    });\n    return sha1(concatBytes([\n        tree,\n        textEncoder$2.encode(treeObject.reduce((sum, val)=>sum + val.byteLength, 0).toString()),\n        nullchar,\n        ...treeObject\n    ]));\n}\nfunction concatBytes(byteArrays) {\n    const totalLength = byteArrays.reduce((sum, arr)=>sum + arr.byteLength, 0);\n    const result = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const arr of byteArrays){\n        result.set(arr, offset);\n        offset += arr.byteLength;\n    }\n    return result;\n}\nfunction hexToBytes(str) {\n    const bytes = new Uint8Array(str.length / 2);\n    for(var i = 0; i < bytes.byteLength; i += 1){\n        const start = i * 2;\n        bytes[i] = parseInt(str.slice(start, start + 2), 16);\n    }\n    return bytes;\n}\nasync function createTreeNodeEntry(path, children) {\n    const sha = await treeSha(children);\n    return {\n        path,\n        mode: \"040000\",\n        type: \"tree\",\n        sha\n    };\n}\nasync function createBlobNodeEntry(path, contents) {\n    const sha = \"sha\" in contents ? contents.sha : await blobSha(contents);\n    return {\n        path,\n        mode: \"100644\",\n        type: \"blob\",\n        sha\n    };\n}\nasync function updateTreeWithChanges(tree, changes) {\n    var _await$updateTree;\n    const newTree = (_await$updateTree = await updateTree(tree, toTreeChanges(changes), [])) !== null && _await$updateTree !== void 0 ? _await$updateTree : new Map();\n    return {\n        entries: treeToEntries(newTree),\n        sha: await treeSha(newTree !== null && newTree !== void 0 ? newTree : new Map())\n    };\n}\nfunction treeToEntries(tree) {\n    return [\n        ...tree.values()\n    ].flatMap((x)=>x.children ? [\n            x.entry,\n            ...treeToEntries(x.children)\n        ] : [\n            x.entry\n        ]);\n}\nasync function updateTree(tree, changedTree, path) {\n    const newTree = new Map(tree);\n    for (const [key, value] of changedTree){\n        if (value === \"delete\") {\n            newTree.delete(key);\n        }\n        if (value instanceof Map) {\n            var _newTree$get$children, _newTree$get;\n            const existingChildren = (_newTree$get$children = (_newTree$get = newTree.get(key)) === null || _newTree$get === void 0 ? void 0 : _newTree$get.children) !== null && _newTree$get$children !== void 0 ? _newTree$get$children : new Map();\n            const children = await updateTree(existingChildren, value, path.concat(key));\n            if (children === undefined) {\n                newTree.delete(key);\n                continue;\n            }\n            const entry = await createTreeNodeEntry(path.concat(key).join(\"/\"), children);\n            newTree.set(key, {\n                entry,\n                children\n            });\n        }\n        if (value instanceof Uint8Array || typeof value === \"object\" && \"sha\" in value) {\n            const entry = await createBlobNodeEntry(path.concat(key).join(\"/\"), value);\n            newTree.set(key, {\n                entry\n            });\n        }\n    }\n    if (newTree.size === 0) {\n        return undefined;\n    }\n    return newTree;\n}\nfunction treeEntriesToTreeNodes(entries) {\n    const root = new Map();\n    const getChildrenAtPath = (parts)=>{\n        var _node;\n        if (parts.length === 0) {\n            return root;\n        }\n        let node = root.get(parts[0]);\n        for (const part of parts.slice(1)){\n            if (!node) return undefined;\n            if (!node.children) return undefined;\n            node = node.children.get(part);\n        }\n        return (_node = node) === null || _node === void 0 ? void 0 : _node.children;\n    };\n    for (const entry of entries){\n        const split = entry.path.split(\"/\");\n        const children = getChildrenAtPath(split.slice(0, -1));\n        if (children) {\n            children.set(split[split.length - 1], {\n                entry,\n                children: entry.type === \"tree\" ? new Map() : undefined\n            });\n        }\n    }\n    return root;\n}\nfunction collectDirectoriesUsedInSchemaInner(schema, directories, seenSchemas) {\n    if (seenSchemas.has(schema)) {\n        return;\n    }\n    seenSchemas.add(schema);\n    if (schema.kind === \"array\") {\n        return collectDirectoriesUsedInSchemaInner(schema.element, directories, seenSchemas);\n    }\n    if (schema.kind === \"child\") {\n        return;\n    }\n    if (schema.kind === \"form\") {\n        if (schema.formKind === \"asset\" && schema.directory !== undefined) {\n            directories.add(fixPath(schema.directory));\n        }\n        if (schema.formKind === \"content\" && schema.directories !== undefined) {\n            for (const directory of schema.directories){\n                directories.add(fixPath(directory));\n            }\n        }\n        return;\n    }\n    if (schema.kind === \"object\") {\n        for (const field of Object.values(schema.fields)){\n            collectDirectoriesUsedInSchemaInner(field, directories, seenSchemas);\n        }\n        return;\n    }\n    if (schema.kind === \"conditional\") {\n        for (const innerSchema of Object.values(schema.values)){\n            collectDirectoriesUsedInSchemaInner(innerSchema, directories, seenSchemas);\n        }\n        return;\n    }\n    (0,emery__WEBPACK_IMPORTED_MODULE_1__.assertNever)(schema);\n}\nfunction collectDirectoriesUsedInSchema(schema) {\n    const directories = new Set();\n    collectDirectoriesUsedInSchemaInner(schema, directories, new Set());\n    return directories;\n}\nfunction getDirectoriesForTreeKey(schema, directory, slug, format) {\n    const directories = [\n        fixPath(directory)\n    ];\n    if (format.dataLocation === \"outer\") {\n        directories.push(fixPath(directory) + getDataFileExtension(format));\n    }\n    const toAdd = slug === undefined ? \"\" : `/${slug}`;\n    for (const directory of collectDirectoriesUsedInSchema(schema)){\n        directories.push(directory + toAdd);\n    }\n    return directories;\n}\nfunction getTreeKey(directories, tree) {\n    return directories.map((d)=>{\n        var _getTreeNodeAtPath;\n        return (_getTreeNodeAtPath = getTreeNodeAtPath(tree, d)) === null || _getTreeNodeAtPath === void 0 ? void 0 : _getTreeNodeAtPath.entry.sha;\n    }).join(\"-\");\n}\nvar pkgJson = {\n    name: \"@keystatic/core\",\n    version: \"0.3.12\",\n    license: \"MIT\",\n    repository: {\n        type: \"git\",\n        url: \"https://github.com/Thinkmill/keystatic/\",\n        directory: \"packages/keystatic\"\n    },\n    type: \"module\",\n    exports: {\n        \"./ui\": {\n            types: \"./dist/keystatic-core-ui.js\",\n            node: {\n                \"react-server\": \"./dist/keystatic-core-ui.node.react-server.js\",\n                \"default\": \"./dist/keystatic-core-ui.node.js\"\n            },\n            \"react-server\": \"./dist/keystatic-core-ui.react-server.js\",\n            \"default\": \"./dist/keystatic-core-ui.js\"\n        },\n        \".\": {\n            types: \"./dist/keystatic-core.js\",\n            node: {\n                \"react-server\": \"./dist/keystatic-core.node.react-server.js\",\n                \"default\": \"./dist/keystatic-core.node.js\"\n            },\n            \"react-server\": \"./dist/keystatic-core.react-server.js\",\n            \"default\": \"./dist/keystatic-core.js\"\n        },\n        \"./api/utils\": {\n            types: \"./dist/keystatic-core-api-utils.js\",\n            node: {\n                \"react-server\": \"./dist/keystatic-core-api-utils.node.react-server.js\",\n                \"default\": \"./dist/keystatic-core-api-utils.node.js\"\n            },\n            \"react-server\": \"./dist/keystatic-core-api-utils.react-server.js\",\n            \"default\": \"./dist/keystatic-core-api-utils.js\"\n        },\n        \"./renderer\": {\n            types: \"./dist/keystatic-core-renderer.js\",\n            node: {\n                \"react-server\": \"./dist/keystatic-core-renderer.node.react-server.js\",\n                \"default\": \"./dist/keystatic-core-renderer.node.js\"\n            },\n            \"react-server\": \"./dist/keystatic-core-renderer.react-server.js\",\n            \"default\": \"./dist/keystatic-core-renderer.js\"\n        },\n        \"./api/generic\": {\n            types: \"./dist/keystatic-core-api-generic.js\",\n            node: {\n                \"react-server\": \"./dist/keystatic-core-api-generic.node.react-server.js\",\n                \"default\": \"./dist/keystatic-core-api-generic.node.js\"\n            },\n            \"react-server\": \"./dist/keystatic-core-api-generic.react-server.js\",\n            \"default\": \"./dist/keystatic-core-api-generic.js\"\n        },\n        \"./reader\": {\n            types: \"./dist/keystatic-core-reader.js\",\n            node: {\n                \"react-server\": \"./dist/keystatic-core-reader.node.react-server.js\",\n                \"default\": \"./dist/keystatic-core-reader.node.js\"\n            },\n            \"react-server\": \"./dist/keystatic-core-reader.react-server.js\",\n            \"default\": \"./dist/keystatic-core-reader.js\"\n        },\n        \"./reader/github\": {\n            types: \"./dist/keystatic-core-reader-github.js\",\n            node: {\n                \"react-server\": \"./dist/keystatic-core-reader-github.node.react-server.js\",\n                \"default\": \"./dist/keystatic-core-reader-github.node.js\"\n            },\n            \"react-server\": \"./dist/keystatic-core-reader-github.react-server.js\",\n            \"default\": \"./dist/keystatic-core-reader-github.js\"\n        },\n        \"./content-components\": {\n            types: \"./dist/keystatic-core-content-components.js\",\n            node: {\n                \"react-server\": \"./dist/keystatic-core-content-components.node.react-server.js\",\n                \"default\": \"./dist/keystatic-core-content-components.node.js\"\n            },\n            \"react-server\": \"./dist/keystatic-core-content-components.react-server.js\",\n            \"default\": \"./dist/keystatic-core-content-components.js\"\n        },\n        \"./component-blocks\": {\n            types: \"./dist/keystatic-core-component-blocks.js\",\n            node: {\n                \"react-server\": \"./dist/keystatic-core-component-blocks.node.react-server.js\",\n                \"default\": \"./dist/keystatic-core-component-blocks.node.js\"\n            },\n            \"react-server\": \"./dist/keystatic-core-component-blocks.react-server.js\",\n            \"default\": \"./dist/keystatic-core-component-blocks.js\"\n        },\n        \"./form/fields/markdoc\": {\n            types: \"./dist/keystatic-core-form-fields-markdoc.js\",\n            node: {\n                \"react-server\": \"./dist/keystatic-core-form-fields-markdoc.node.react-server.js\",\n                \"default\": \"./dist/keystatic-core-form-fields-markdoc.node.js\"\n            },\n            \"react-server\": \"./dist/keystatic-core-form-fields-markdoc.react-server.js\",\n            \"default\": \"./dist/keystatic-core-form-fields-markdoc.js\"\n        },\n        \"./package.json\": \"./package.json\"\n    },\n    files: [\n        \"dist\"\n    ],\n    scripts: {\n        setup: \"ts-gql build && tsx scripts/l10n.cts && tsx scripts/build-prism.cts\",\n        build: \"pnpm run setup && next build\",\n        dev: \"next dev\",\n        start: \"next start\"\n    },\n    dependencies: {\n        \"@babel/runtime\": \"^7.18.3\",\n        \"@braintree/sanitize-url\": \"^6.0.2\",\n        \"@emotion/css\": \"^11.9.0\",\n        \"@emotion/weak-memoize\": \"^0.3.0\",\n        \"@floating-ui/react\": \"^0.24.0\",\n        \"@internationalized/string\": \"^3.1.1\",\n        \"@keystar/ui\": \"^0.7.0\",\n        \"@markdoc/markdoc\": \"^0.3.0\",\n        \"@react-aria/focus\": \"^3.14.3\",\n        \"@react-aria/i18n\": \"^3.8.0\",\n        \"@react-aria/interactions\": \"^3.19.1\",\n        \"@react-aria/overlays\": \"^3.18.1\",\n        \"@react-aria/selection\": \"^3.17.1\",\n        \"@react-aria/utils\": \"^3.21.1\",\n        \"@react-aria/visually-hidden\": \"^3.8.6\",\n        \"@react-stately/collections\": \"^3.10.2\",\n        \"@react-stately/list\": \"^3.10.0\",\n        \"@react-stately/overlays\": \"^3.6.3\",\n        \"@react-stately/utils\": \"^3.8.0\",\n        \"@react-types/shared\": \"^3.21.0\",\n        \"@sindresorhus/slugify\": \"^1.1.2\",\n        \"@ts-gql/tag\": \"^0.7.0\",\n        \"@types/mdast\": \"^4.0.3\",\n        \"@types/node\": \"16.11.13\",\n        \"@types/react\": \"^18.2.8\",\n        \"@types/react-dom\": \"^18.0.11\",\n        \"@urql/core\": \"^4.1.3\",\n        \"@urql/exchange-auth\": \"^2.1.6\",\n        \"@urql/exchange-graphcache\": \"^6.3.3\",\n        \"@urql/exchange-persisted\": \"^4.1.0\",\n        cookie: \"^0.5.0\",\n        \"decimal.js\": \"^10.4.3\",\n        emery: \"^1.4.1\",\n        \"escape-string-regexp\": \"^4.0.0\",\n        \"fast-deep-equal\": \"^3.1.3\",\n        graphql: \"^16.6.0\",\n        \"idb-keyval\": \"^6.2.1\",\n        ignore: \"^5.2.4\",\n        \"iron-webcrypto\": \"^0.10.1\",\n        \"is-hotkey\": \"^0.2.0\",\n        \"js-base64\": \"^3.7.5\",\n        \"js-yaml\": \"^4.1.0\",\n        \"lru-cache\": \"^7.14.1\",\n        \"match-sorter\": \"^6.3.1\",\n        \"mdast-util-from-markdown\": \"^2.0.0\",\n        \"mdast-util-gfm\": \"^3.0.0\",\n        \"mdast-util-gfm-autolink-literal\": \"^2.0.0\",\n        \"mdast-util-gfm-strikethrough\": \"^2.0.0\",\n        \"mdast-util-mdx\": \"^3.0.0\",\n        \"mdast-util-to-markdown\": \"^2.1.0\",\n        \"micromark-extension-gfm\": \"^3.0.0\",\n        \"micromark-extension-gfm-autolink-literal\": \"^2.0.0\",\n        \"micromark-extension-gfm-strikethrough\": \"^2.0.0\",\n        \"micromark-extension-mdxjs\": \"^3.0.0\",\n        minimatch: \"^9.0.3\",\n        \"prosemirror-commands\": \"^1.5.1\",\n        \"prosemirror-history\": \"^1.3.0\",\n        \"prosemirror-keymap\": \"^1.2.1\",\n        \"prosemirror-model\": \"^1.19.0\",\n        \"prosemirror-state\": \"^1.4.2\",\n        \"prosemirror-tables\": \"^1.3.4\",\n        \"prosemirror-transform\": \"^1.7.1\",\n        \"prosemirror-view\": \"^1.30.2\",\n        \"scroll-into-view-if-needed\": \"^3.0.3\",\n        slate: \"^0.91.4\",\n        \"slate-history\": \"^0.86.0\",\n        \"slate-react\": \"^0.91.9\",\n        \"unist-util-visit\": \"^5.0.0\",\n        urql: \"^4.0.0\",\n        zod: \"^3.20.2\"\n    },\n    devDependencies: {\n        \"@jest/expect\": \"^29.7.0\",\n        \"@jest/globals\": \"^29.7.0\",\n        \"@testing-library/user-event\": \"^14.4.3\",\n        \"@ts-gql/compiler\": \"^0.16.1\",\n        \"@ts-gql/eslint-plugin\": \"^0.8.5\",\n        \"@ts-gql/next\": \"^17.0.0\",\n        \"@types/cookie\": \"^0.5.1\",\n        \"@types/is-hotkey\": \"^0.1.7\",\n        \"@types/js-yaml\": \"^4.0.5\",\n        \"@types/prismjs\": \"^1.26.0\",\n        \"@types/signal-exit\": \"^3.0.1\",\n        eslint: \"^8.18.0\",\n        \"fast-glob\": \"^3.2.12\",\n        \"jest-diff\": \"^29.0.1\",\n        outdent: \"^0.8.0\",\n        \"pretty-format\": \"^29.0.1\",\n        prismjs: \"^1.29.0\",\n        react: \"^18.2.0\",\n        \"react-dom\": \"^18.2.0\",\n        \"react-element-to-jsx-string\": \"^15.0.0\",\n        \"resize-observer-polyfill\": \"^1.5.1\",\n        \"signal-exit\": \"^3.0.7\",\n        \"slate-hyperscript\": \"^0.77.0\",\n        tsx: \"^3.8.0\",\n        typescript: \"^5.2.2\"\n    },\n    peerDependencies: {\n        react: \"^18.2.0\",\n        \"react-dom\": \"^18.2.0\"\n    },\n    preconstruct: {\n        entrypoints: [\n            \"index.ts\",\n            \"api/generic.ts\",\n            \"api/utils.ts\",\n            \"reader/index.ts\",\n            \"reader/github.ts\",\n            \"renderer.tsx\",\n            \"ui.tsx\",\n            \"form/fields/markdoc/index.tsx\",\n            \"component-blocks/index.tsx\",\n            \"content-components.ts\"\n        ]\n    },\n    \"ts-gql\": {\n        schema: \"./github.graphql\",\n        mode: \"no-transform\",\n        addTypename: false,\n        scalars: {\n            GitObjectID: \"string\"\n        }\n    },\n    imports: {\n        \"#react-cache-in-react-server\": {\n            \"react-server\": \"./src/reader/react-server-cache.ts\",\n            \"default\": \"./src/reader/noop-cache.ts\"\n        },\n        \"#sha1\": {\n            node: \"./src/sha1/node.ts\",\n            \"default\": \"./src/sha1/webcrypto.ts\"\n        },\n        \"#webcrypto\": {\n            node: \"./src/api/webcrypto/node.ts\",\n            \"default\": \"./src/api/webcrypto/default.ts\"\n        },\n        \"#api-handler\": {\n            node: \"./src/api/api-node.ts\",\n            \"default\": \"./src/api/api-noop.ts\"\n        },\n        \"#field-ui/*\": {\n            \"react-server\": \"./src/form/fields/empty-field-ui.tsx\",\n            \"default\": \"./src/form/fields/*/ui.tsx\"\n        },\n        \"#component-block-primitives\": {\n            \"react-server\": \"./src/form/fields/document/DocumentEditor/primitives/blank-for-react-server.tsx\",\n            \"default\": \"./src/form/fields/document/DocumentEditor/primitives/index.tsx\"\n        },\n        \"#cloud-image-preview\": {\n            \"react-server\": \"./src/component-blocks/blank-for-react-server.tsx\",\n            \"default\": \"./src/component-blocks/cloud-image-preview.tsx\"\n        }\n    }\n};\nfunction object(fields, opts) {\n    return {\n        ...opts,\n        kind: \"object\",\n        fields\n    };\n}\nfunction pluralize(count, options) {\n    const { singular, plural = singular + \"s\", inclusive = true } = options;\n    const variant = count === 1 ? singular : plural;\n    return inclusive ? `${count} ${variant}` : variant;\n}\nfunction getBranchPrefix(config) {\n    return config.storage.kind !== \"local\" ? config.storage.branchPrefix : undefined;\n}\nfunction isGitHubConfig(config) {\n    return config.storage.kind === \"github\";\n}\nfunction isLocalConfig(config) {\n    return config.storage.kind === \"local\";\n}\nfunction isCloudConfig(config) {\n    var _config$cloud;\n    if (config.storage.kind !== \"cloud\") return false;\n    if (!((_config$cloud = config.cloud) !== null && _config$cloud !== void 0 && _config$cloud.project) || !config.cloud.project.includes(\"/\")) {\n        throw new Error(`Keystatic is set to \\`storage: { kind: 'cloud' }\\` but \\`cloud.project\\` isn't set.\nconfig({\n  storage: { kind: 'cloud' },\n  cloud: { project: 'team/project' },\n})`);\n    }\n    return true;\n}\nfunction getSplitCloudProject(config) {\n    var _config$cloud2;\n    if (!((_config$cloud2 = config.cloud) !== null && _config$cloud2 !== void 0 && _config$cloud2.project)) return undefined;\n    const [team, project] = config.cloud.project.split(\"/\");\n    return {\n        team,\n        project\n    };\n}\nfunction getRepoPath(config) {\n    return `${config.mainOwner}/${config.mainRepo}`;\n}\nfunction getRepoUrl(config) {\n    return `https://github.com/${getRepoPath(config)}`;\n}\nfunction getSlugFromState(collectionConfig, state) {\n    const value = state[collectionConfig.slugField];\n    const field = collectionConfig.schema[collectionConfig.slugField];\n    if (field.kind !== \"form\" || field.formKind !== \"slug\") {\n        throw new Error(`slugField is not a slug field`);\n    }\n    return field.serializeWithSlug(value).slug;\n}\nfunction getEntriesInCollectionWithTreeKey(config, collection, rootTree) {\n    var _getTreeNodeAtPath$ch, _getTreeNodeAtPath;\n    const collectionConfig = config.collections[collection];\n    const schema = object(collectionConfig.schema);\n    const formatInfo = getCollectionFormat(config, collection);\n    const extension = getDataFileExtension(formatInfo);\n    const glob = getSlugGlobForCollection(config, collection);\n    const collectionPath = getCollectionPath(config, collection);\n    const directory = (_getTreeNodeAtPath$ch = (_getTreeNodeAtPath = getTreeNodeAtPath(rootTree, collectionPath)) === null || _getTreeNodeAtPath === void 0 ? void 0 : _getTreeNodeAtPath.children) !== null && _getTreeNodeAtPath$ch !== void 0 ? _getTreeNodeAtPath$ch : new Map();\n    const entries = [];\n    const directoriesUsedInSchema = [\n        ...collectDirectoriesUsedInSchema(schema)\n    ];\n    const suffix = getCollectionItemSlugSuffix(config, collection);\n    const possibleEntries = new Map(directory);\n    if (glob === \"**\") {\n        const handleDirectory = (dir, prefix)=>{\n            for (const [key, entry] of dir){\n                if (entry.children) {\n                    possibleEntries.set(`${prefix}${key}`, entry);\n                    handleDirectory(entry.children, `${prefix}${key}/`);\n                } else {\n                    possibleEntries.set(`${prefix}${key}`, entry);\n                }\n            }\n        };\n        handleDirectory(directory, \"\");\n    }\n    for (const [key, entry] of possibleEntries){\n        if (formatInfo.dataLocation === \"index\") {\n            var _actualEntry$children;\n            const actualEntry = getTreeNodeAtPath(rootTree, getCollectionItemPath(config, collection, key));\n            if (!(actualEntry !== null && actualEntry !== void 0 && (_actualEntry$children = actualEntry.children) !== null && _actualEntry$children !== void 0 && _actualEntry$children.has(\"index\" + extension))) continue;\n            entries.push({\n                key: getTreeKey([\n                    actualEntry.entry.path,\n                    ...directoriesUsedInSchema.map((x)=>`${x}/${key}`)\n                ], rootTree),\n                slug: key,\n                sha: actualEntry.children.get(\"index\" + extension).entry.sha\n            });\n        } else {\n            if (suffix) {\n                const newEntry = getTreeNodeAtPath(rootTree, getCollectionItemPath(config, collection, key) + extension);\n                if (!newEntry || newEntry.children) continue;\n                entries.push({\n                    key: getTreeKey([\n                        entry.entry.path,\n                        getCollectionItemPath(config, collection, key),\n                        ...directoriesUsedInSchema.map((x)=>`${x}/${key}`)\n                    ], rootTree),\n                    slug: key,\n                    sha: newEntry.entry.sha\n                });\n            }\n            if (entry.children || !key.endsWith(extension)) continue;\n            const slug = key.slice(0, -extension.length);\n            entries.push({\n                key: getTreeKey([\n                    entry.entry.path,\n                    getCollectionItemPath(config, collection, slug),\n                    ...directoriesUsedInSchema.map((x)=>`${x}/${slug}`)\n                ], rootTree),\n                slug,\n                sha: entry.entry.sha\n            });\n        }\n    }\n    return entries;\n}\nconst KEYSTATIC_CLOUD_API_URL = \"https://api.keystatic.cloud\";\nconst KEYSTATIC_CLOUD_HEADERS = {\n    \"x-keystatic-version\": pkgJson.version\n};\nconst textEncoder$1 = new TextEncoder();\nasync function redirectToCloudAuth(from, config) {\n    var _config$cloud3;\n    if (!((_config$cloud3 = config.cloud) !== null && _config$cloud3 !== void 0 && _config$cloud3.project)) {\n        throw new Error(\"Not a cloud config\");\n    }\n    const code_verifier = (0,js_base64__WEBPACK_IMPORTED_MODULE_5__.fromUint8Array)(crypto.getRandomValues(new Uint8Array(32)), true);\n    const code_challenge = (0,js_base64__WEBPACK_IMPORTED_MODULE_5__.fromUint8Array)(new Uint8Array(await crypto.subtle.digest(\"SHA-256\", textEncoder$1.encode(code_verifier))), true);\n    const state = (0,js_base64__WEBPACK_IMPORTED_MODULE_5__.fromUint8Array)(crypto.getRandomValues(new Uint8Array(32)), true);\n    localStorage.setItem(\"keystatic-cloud-state\", JSON.stringify({\n        state,\n        from,\n        code_verifier\n    }));\n    const url = new URL(`${KEYSTATIC_CLOUD_API_URL}/oauth/authorize`);\n    url.searchParams.set(\"state\", state);\n    url.searchParams.set(\"client_id\", config.cloud.project);\n    url.searchParams.set(\"redirect_uri\", `${window.location.origin}/keystatic/cloud/oauth/callback`);\n    url.searchParams.set(\"response_type\", \"code\");\n    url.searchParams.set(\"code_challenge_method\", \"S256\");\n    url.searchParams.set(\"code_challenge\", code_challenge);\n    url.searchParams.set(\"keystatic_version\", pkgJson.version);\n    window.location.href = url.toString();\n}\nconst tableCellChildren = [\n    \"paragraph\",\n    \"code\",\n    \"heading\",\n    \"ordered-list\",\n    \"unordered-list\",\n    \"divider\",\n    \"image\"\n];\nconst blockquoteChildren = [\n    ...tableCellChildren,\n    \"table\"\n];\nconst paragraphLike = [\n    ...blockquoteChildren,\n    \"blockquote\"\n];\nconst insideOfLayouts = [\n    ...paragraphLike,\n    \"component-block\"\n];\nfunction blockContainer(args) {\n    return {\n        kind: \"blocks\",\n        allowedChildren: new Set(args.allowedChildren),\n        blockToWrapInlinesIn: args.allowedChildren[0],\n        invalidPositionHandleMode: args.invalidPositionHandleMode\n    };\n}\nfunction inlineContainer(args) {\n    return {\n        kind: \"inlines\",\n        invalidPositionHandleMode: args.invalidPositionHandleMode\n    };\n}\nconst editorSchema = {\n    editor: blockContainer({\n        allowedChildren: [\n            ...insideOfLayouts,\n            \"layout\"\n        ],\n        invalidPositionHandleMode: \"move\"\n    }),\n    layout: blockContainer({\n        allowedChildren: [\n            \"layout-area\"\n        ],\n        invalidPositionHandleMode: \"move\"\n    }),\n    \"layout-area\": blockContainer({\n        allowedChildren: insideOfLayouts,\n        invalidPositionHandleMode: \"unwrap\"\n    }),\n    blockquote: blockContainer({\n        allowedChildren: blockquoteChildren,\n        invalidPositionHandleMode: \"move\"\n    }),\n    paragraph: inlineContainer({\n        invalidPositionHandleMode: \"unwrap\"\n    }),\n    code: inlineContainer({\n        invalidPositionHandleMode: \"move\"\n    }),\n    divider: inlineContainer({\n        invalidPositionHandleMode: \"move\"\n    }),\n    heading: inlineContainer({\n        invalidPositionHandleMode: \"unwrap\"\n    }),\n    \"component-block\": blockContainer({\n        allowedChildren: [\n            \"component-block-prop\",\n            \"component-inline-prop\"\n        ],\n        invalidPositionHandleMode: \"move\"\n    }),\n    \"component-inline-prop\": inlineContainer({\n        invalidPositionHandleMode: \"unwrap\"\n    }),\n    \"component-block-prop\": blockContainer({\n        allowedChildren: insideOfLayouts,\n        invalidPositionHandleMode: \"unwrap\"\n    }),\n    \"ordered-list\": blockContainer({\n        allowedChildren: [\n            \"list-item\"\n        ],\n        invalidPositionHandleMode: \"move\"\n    }),\n    \"unordered-list\": blockContainer({\n        allowedChildren: [\n            \"list-item\"\n        ],\n        invalidPositionHandleMode: \"move\"\n    }),\n    \"list-item\": blockContainer({\n        allowedChildren: [\n            \"list-item-content\",\n            \"ordered-list\",\n            \"unordered-list\"\n        ],\n        invalidPositionHandleMode: \"unwrap\"\n    }),\n    \"list-item-content\": inlineContainer({\n        invalidPositionHandleMode: \"unwrap\"\n    }),\n    image: inlineContainer({\n        invalidPositionHandleMode: \"move\"\n    }),\n    table: blockContainer({\n        invalidPositionHandleMode: \"move\",\n        allowedChildren: [\n            \"table-head\",\n            \"table-body\"\n        ]\n    }),\n    \"table-body\": blockContainer({\n        invalidPositionHandleMode: \"move\",\n        allowedChildren: [\n            \"table-row\"\n        ]\n    }),\n    \"table-row\": blockContainer({\n        invalidPositionHandleMode: \"move\",\n        allowedChildren: [\n            \"table-cell\"\n        ]\n    }),\n    \"table-cell\": blockContainer({\n        invalidPositionHandleMode: \"move\",\n        allowedChildren: tableCellChildren\n    }),\n    \"table-head\": blockContainer({\n        invalidPositionHandleMode: \"move\",\n        allowedChildren: [\n            \"table-row\"\n        ]\n    })\n};\nconst inlineContainerTypes = new Set(Object.entries(editorSchema).filter(([, value])=>value.kind === \"inlines\").map(([type])=>type));\nfunction isInlineContainer(node) {\n    return node.type !== undefined && inlineContainerTypes.has(node.type);\n}\nconst blockTypes = new Set(Object.keys(editorSchema).filter((x)=>x !== \"editor\"));\nfunction isBlock(node) {\n    return blockTypes.has(node.type);\n}\n// to print the editor schema in Graphviz if you want to visualize it\n// function printEditorSchema(editorSchema: EditorSchema) {\n//   return `digraph G {\n//   concentrate=true;\n//   ${Object.keys(editorSchema)\n//     .map(key => {\n//       let val = editorSchema[key];\n//       if (val.kind === 'inlines') {\n//         return `\"${key}\" -> inlines`;\n//       }\n//       if (val.kind === 'blocks') {\n//         return `\"${key}\" -> {${[...val.allowedChildren].map(x => JSON.stringify(x)).join(' ')}}`;\n//       }\n//     })\n//     .join('\\n  ')}\n// }`;\n// }\nfunction getWholeDocumentFeaturesForChildField(editorDocumentFeatures, options) {\n    var _options$formatting, _options$formatting2, _options$formatting3, _options$formatting4, _options$formatting5, _options$formatting6, _options$formatting7;\n    const inlineMarksFromOptions = (_options$formatting = options.formatting) === null || _options$formatting === void 0 ? void 0 : _options$formatting.inlineMarks;\n    const inlineMarks = Object.fromEntries(Object.keys(editorDocumentFeatures.formatting.inlineMarks).map((_mark)=>{\n        const mark = _mark;\n        return [\n            mark,\n            inlineMarksFromOptions === \"inherit\" || (inlineMarksFromOptions === null || inlineMarksFromOptions === void 0 ? void 0 : inlineMarksFromOptions[mark]) === \"inherit\" ? editorDocumentFeatures.formatting.inlineMarks[mark] : false\n        ];\n    }));\n    const headingLevels = (_options$formatting2 = options.formatting) === null || _options$formatting2 === void 0 ? void 0 : _options$formatting2.headingLevels;\n    return {\n        formatting: {\n            inlineMarks,\n            softBreaks: ((_options$formatting3 = options.formatting) === null || _options$formatting3 === void 0 ? void 0 : _options$formatting3.softBreaks) === \"inherit\" && editorDocumentFeatures.formatting.softBreaks,\n            alignment: {\n                center: editorDocumentFeatures.formatting.alignment.center && ((_options$formatting4 = options.formatting) === null || _options$formatting4 === void 0 ? void 0 : _options$formatting4.alignment) === \"inherit\",\n                end: editorDocumentFeatures.formatting.alignment.end && ((_options$formatting5 = options.formatting) === null || _options$formatting5 === void 0 ? void 0 : _options$formatting5.alignment) === \"inherit\"\n            },\n            blockTypes: ((_options$formatting6 = options.formatting) === null || _options$formatting6 === void 0 ? void 0 : _options$formatting6.blockTypes) === \"inherit\" ? editorDocumentFeatures.formatting.blockTypes : {\n                blockquote: false,\n                code: false\n            },\n            headings: headingLevels === \"inherit\" ? editorDocumentFeatures.formatting.headings : {\n                levels: headingLevels ? editorDocumentFeatures.formatting.headings.levels.filter((level)=>headingLevels.includes(level)) : [],\n                schema: editorDocumentFeatures.formatting.headings.schema\n            },\n            listTypes: ((_options$formatting7 = options.formatting) === null || _options$formatting7 === void 0 ? void 0 : _options$formatting7.listTypes) === \"inherit\" ? editorDocumentFeatures.formatting.listTypes : {\n                ordered: false,\n                unordered: false\n            }\n        },\n        dividers: options.dividers === \"inherit\" ? editorDocumentFeatures.dividers : false,\n        images: options.images === \"inherit\" && editorDocumentFeatures.images,\n        layouts: [],\n        links: options.links === \"inherit\" && editorDocumentFeatures.links,\n        tables: options.tables === \"inherit\" && editorDocumentFeatures.tables\n    };\n}\nfunction getDocumentFeaturesForChildField(editorDocumentFeatures, options) {\n    var _options$formatting8, _options$formatting10, _options$formatting11, _options$formatting12, _options$formatting13, _options$formatting14;\n    // an important note for this: normalization based on document features\n    // is done based on the document features returned here\n    // and the editor document features\n    // so the result for any given child prop will be the things that are\n    // allowed by both these document features\n    // AND the editor document features\n    const inlineMarksFromOptions = (_options$formatting8 = options.formatting) === null || _options$formatting8 === void 0 ? void 0 : _options$formatting8.inlineMarks;\n    const inlineMarks = inlineMarksFromOptions === \"inherit\" ? \"inherit\" : Object.fromEntries(Object.keys(editorDocumentFeatures.formatting.inlineMarks).map((mark)=>{\n        return [\n            mark,\n            !!(inlineMarksFromOptions || {})[mark]\n        ];\n    }));\n    if (options.kind === \"inline\") {\n        var _options$formatting9;\n        return {\n            kind: \"inline\",\n            inlineMarks,\n            documentFeatures: {\n                links: options.links === \"inherit\"\n            },\n            softBreaks: ((_options$formatting9 = options.formatting) === null || _options$formatting9 === void 0 ? void 0 : _options$formatting9.softBreaks) === \"inherit\"\n        };\n    }\n    const headingLevels = (_options$formatting10 = options.formatting) === null || _options$formatting10 === void 0 ? void 0 : _options$formatting10.headingLevels;\n    return {\n        kind: \"block\",\n        inlineMarks,\n        softBreaks: ((_options$formatting11 = options.formatting) === null || _options$formatting11 === void 0 ? void 0 : _options$formatting11.softBreaks) === \"inherit\",\n        documentFeatures: {\n            layouts: [],\n            dividers: options.dividers === \"inherit\" ? editorDocumentFeatures.dividers : false,\n            formatting: {\n                alignment: ((_options$formatting12 = options.formatting) === null || _options$formatting12 === void 0 ? void 0 : _options$formatting12.alignment) === \"inherit\" ? editorDocumentFeatures.formatting.alignment : {\n                    center: false,\n                    end: false\n                },\n                blockTypes: ((_options$formatting13 = options.formatting) === null || _options$formatting13 === void 0 ? void 0 : _options$formatting13.blockTypes) === \"inherit\" ? editorDocumentFeatures.formatting.blockTypes : {\n                    blockquote: false,\n                    code: false\n                },\n                headings: headingLevels === \"inherit\" ? editorDocumentFeatures.formatting.headings : {\n                    levels: headingLevels ? editorDocumentFeatures.formatting.headings.levels.filter((level)=>headingLevels.includes(level)) : [],\n                    schema: editorDocumentFeatures.formatting.headings.schema\n                },\n                listTypes: ((_options$formatting14 = options.formatting) === null || _options$formatting14 === void 0 ? void 0 : _options$formatting14.listTypes) === \"inherit\" ? editorDocumentFeatures.formatting.listTypes : {\n                    ordered: false,\n                    unordered: false\n                }\n            },\n            links: options.links === \"inherit\",\n            images: options.images === \"inherit\" ? editorDocumentFeatures.images : false,\n            tables: options.tables === \"inherit\"\n        },\n        componentBlocks: options.componentBlocks === \"inherit\"\n    };\n}\nfunction getSchemaAtPropPathInner(path, value, schema) {\n    // because we're checking the length here\n    // the non-null asserts on shift below are fine\n    if (path.length === 0) {\n        return schema;\n    }\n    if (schema.kind === \"child\" || schema.kind === \"form\") {\n        return;\n    }\n    if (schema.kind === \"conditional\") {\n        const key = path.shift();\n        if (key === \"discriminant\") {\n            return getSchemaAtPropPathInner(path, value.discriminant, schema.discriminant);\n        }\n        if (key === \"value\") {\n            const propVal = schema.values[value.discriminant];\n            return getSchemaAtPropPathInner(path, value.value, propVal);\n        }\n        return;\n    }\n    if (schema.kind === \"object\") {\n        const key = path.shift();\n        return getSchemaAtPropPathInner(path, value[key], schema.fields[key]);\n    }\n    if (schema.kind === \"array\") {\n        const index = path.shift();\n        return getSchemaAtPropPathInner(path, value[index], schema.element);\n    }\n    (0,emery__WEBPACK_IMPORTED_MODULE_1__.assertNever)(schema);\n}\nfunction getSchemaAtPropPath(path, value, props) {\n    return getSchemaAtPropPathInner([\n        ...path\n    ], value, {\n        kind: \"object\",\n        fields: props\n    });\n}\nfunction getAncestorSchemas(rootSchema, path, value) {\n    const ancestors = [];\n    const currentPath = [\n        ...path\n    ];\n    let currentProp = rootSchema;\n    let currentValue = value;\n    while(currentPath.length){\n        ancestors.push(currentProp);\n        const key = currentPath.shift(); // this code only runs when path.length is truthy so this non-null assertion is fine\n        if (currentProp.kind === \"array\") {\n            currentProp = currentProp.element;\n            currentValue = currentValue[key];\n        } else if (currentProp.kind === \"conditional\") {\n            currentProp = currentProp.values[value.discriminant];\n            currentValue = currentValue.value;\n        } else if (currentProp.kind === \"object\") {\n            currentValue = currentValue[key];\n            currentProp = currentProp.fields[key];\n        } else if (currentProp.kind === \"child\" || currentProp.kind === \"form\") {\n            throw new Error(`unexpected prop \"${key}\"`);\n        } else {\n            (0,emery__WEBPACK_IMPORTED_MODULE_1__.assertNever)(currentProp);\n        }\n    }\n    return ancestors;\n}\nfunction getPlaceholderTextForPropPath(propPath, fields, formProps) {\n    const field = getSchemaAtPropPath(propPath, formProps, fields);\n    if ((field === null || field === void 0 ? void 0 : field.kind) === \"child\" && (field.options.kind === \"block\" && field.options.editIn !== \"modal\" || field.options.kind === \"inline\")) {\n        return field.options.placeholder;\n    }\n    return \"\";\n}\nfunction cloneDescendent(node) {\n    if (slate__WEBPACK_IMPORTED_MODULE_6__.Element.isElement(node)) {\n        return {\n            ...node,\n            children: node.children.map(cloneDescendent)\n        };\n    }\n    return {\n        ...node\n    };\n}\nconst allMarks = [\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"strikethrough\",\n    \"code\",\n    \"superscript\",\n    \"subscript\",\n    \"keyboard\"\n];\nconst isElementActive = (editor, format)=>{\n    const [match] = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.nodes(editor, {\n        match: (n)=>n.type === format\n    });\n    return !!match;\n};\nfunction clearFormatting(editor) {\n    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n        match: (node)=>node.type === \"heading\" || node.type === \"blockquote\" || node.type === \"code\"\n    });\n    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unsetNodes(editor, allMarks, {\n        match: slate__WEBPACK_IMPORTED_MODULE_6__.Text.isText\n    });\n}\nfunction moveChildren(editor, parent, to, shouldMoveNode = ()=>true) {\n    const parentPath = slate__WEBPACK_IMPORTED_MODULE_6__.Path.isPath(parent) ? parent : parent[1];\n    const parentNode = slate__WEBPACK_IMPORTED_MODULE_6__.Path.isPath(parent) ? slate__WEBPACK_IMPORTED_MODULE_6__.Node.get(editor, parentPath) : parent[0];\n    if (!isBlock(parentNode)) return;\n    for(let i = parentNode.children.length - 1; i >= 0; i--){\n        if (shouldMoveNode(parentNode.children[i], i)) {\n            const childPath = [\n                ...parentPath,\n                i\n            ];\n            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.moveNodes(editor, {\n                at: childPath,\n                to\n            });\n        }\n    }\n}\n/**\n * This is equivalent to Editor.after except that it ignores points that have no content\n * like the point in a void text node, an empty text node and the last point in a text node\n */ // TODO: this would probably break if you were trying to get the last point in the editor?\nfunction EditorAfterButIgnoringingPointsWithNoContent(editor, at, { distance = 1 } = {}) {\n    const anchor = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.point(editor, at, {\n        edge: \"end\"\n    });\n    const focus = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.end(editor, []);\n    const range = {\n        anchor,\n        focus\n    };\n    let d = 0;\n    let target;\n    for (const p of slate__WEBPACK_IMPORTED_MODULE_6__.Editor.positions(editor, {\n        at: range\n    })){\n        if (d > distance) {\n            break;\n        }\n        // this is the important change\n        const node = slate__WEBPACK_IMPORTED_MODULE_6__.Node.get(editor, p.path);\n        if (node.text.length === p.offset) {\n            continue;\n        }\n        if (d !== 0) {\n            target = p;\n        }\n        d++;\n    }\n    return target;\n}\nfunction nodeTypeMatcher(...args) {\n    if (args.length === 1) {\n        const type = args[0];\n        return (node)=>node.type === type;\n    }\n    const set = new Set(args);\n    return (node)=>typeof node.type === \"string\" && set.has(node.type);\n}\nfunction getAncestorComponentChildFieldDocumentFeatures(editor, editorDocumentFeatures, componentBlocks) {\n    const ancestorComponentProp = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.above(editor, {\n        match: nodeTypeMatcher(\"component-block-prop\", \"component-inline-prop\")\n    });\n    if (ancestorComponentProp) {\n        const propPath = ancestorComponentProp[0].propPath;\n        const ancestorComponent = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.parent(editor, ancestorComponentProp[1]);\n        if (ancestorComponent[0].type === \"component-block\") {\n            const component = ancestorComponent[0].component;\n            const componentBlock = componentBlocks[component];\n            if (componentBlock && propPath) {\n                const childField = getSchemaAtPropPath(propPath, ancestorComponent[0].props, componentBlock.schema);\n                if ((childField === null || childField === void 0 ? void 0 : childField.kind) === \"child\") {\n                    return getDocumentFeaturesForChildField(editorDocumentFeatures, childField.options);\n                }\n            }\n        }\n    }\n}\n// this is used in react-server environments to avoid bundling UI when the reader API is used\n// if you added a new field and get an error that there's missing a missing export here,\n// you probably just need to add another empty export here\nfunction empty() {\n    throw new Error(\"unexpected call to function that shouldn't be called in React server component environment\");\n}\nlet SlugFieldInput = empty, TextFieldInput = empty, UrlFieldInput = empty, SelectFieldInput = empty, RelationshipInput = empty, PathReferenceInput = empty, MultiselectFieldInput = empty, IntegerFieldInput = empty, NumberFieldInput = empty, ImageFieldInput = empty, FileFieldInput = empty, DatetimeFieldInput = empty, DateFieldInput = empty, CloudImageFieldInput = empty, BlocksFieldInput = empty, DocumentFieldInput = empty, CheckboxFieldInput = empty, createEditorSchema = empty, getDefaultValue = empty, parseToEditorState = empty, serializeFromEditorState = empty, parseToEditorStateMDX = empty, serializeFromEditorStateMDX = empty;\nclass FieldDataError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"FieldDataError\";\n    }\n}\nfunction assertRequired(value, validation, label) {\n    if (value === null && validation !== null && validation !== void 0 && validation.isRequired) {\n        throw new FieldDataError(`${label} is required`);\n    }\n}\nfunction basicFormFieldWithSimpleReaderParse(config) {\n    return {\n        kind: \"form\",\n        Input: config.Input,\n        defaultValue: config.defaultValue,\n        parse: config.parse,\n        serialize: config.serialize,\n        validate: config.validate,\n        reader: {\n            parse (value) {\n                return config.validate(config.parse(value));\n            }\n        },\n        label: config.label\n    };\n}\nconst arrayValuesToElementKeys = new WeakMap();\nlet counter = 0;\nfunction getKeysForArrayValue(value) {\n    if (!arrayValuesToElementKeys.has(value)) {\n        arrayValuesToElementKeys.set(value, Array.from({\n            length: value.length\n        }, getNewArrayElementKey));\n    }\n    return arrayValuesToElementKeys.get(value);\n}\nfunction setKeysForArrayValue(value, elementIds) {\n    arrayValuesToElementKeys.set(value, elementIds);\n}\nfunction getNewArrayElementKey() {\n    return (counter++).toString();\n}\nconst getInitialPropsValue = _getInitialPropsValue;\nfunction _getInitialPropsValue(schema) {\n    switch(schema.kind){\n        case \"form\":\n            return schema.defaultValue();\n        case \"child\":\n            return schema.options.kind === \"block\" ? [\n                {\n                    type: \"paragraph\",\n                    children: [\n                        {\n                            text: \"\"\n                        }\n                    ]\n                }\n            ] : null;\n        case \"conditional\":\n            {\n                const defaultValue = schema.discriminant.defaultValue();\n                return {\n                    discriminant: defaultValue,\n                    value: getInitialPropsValue(schema.values[defaultValue.toString()])\n                };\n            }\n        case \"object\":\n            {\n                const obj = {};\n                for (const key of Object.keys(schema.fields)){\n                    obj[key] = getInitialPropsValue(schema.fields[key]);\n                }\n                return obj;\n            }\n        case \"array\":\n            {\n                return [];\n            }\n    }\n    (0,emery__WEBPACK_IMPORTED_MODULE_1__.assertNever)(schema);\n}\nfunction getInitialPropsValueFromInitializer(schema, initializer) {\n    switch(schema.kind){\n        case \"form\":\n            return initializer === undefined ? schema.defaultValue() : initializer;\n        case \"child\":\n            return initializer !== null && initializer !== void 0 ? initializer : schema.options.kind === \"block\" ? [\n                {\n                    type: \"paragraph\",\n                    children: [\n                        {\n                            text: \"\"\n                        }\n                    ]\n                }\n            ] : null;\n        case \"conditional\":\n            {\n                const defaultValue = initializer === undefined ? schema.discriminant.defaultValue() : initializer.discriminant;\n                return {\n                    discriminant: defaultValue,\n                    value: getInitialPropsValueFromInitializer(schema.values[defaultValue.toString()], initializer === undefined ? undefined : initializer.value)\n                };\n            }\n        case \"object\":\n            {\n                const obj = {};\n                for (const key of Object.keys(schema.fields)){\n                    obj[key] = getInitialPropsValueFromInitializer(schema.fields[key], initializer === undefined ? undefined : initializer[key]);\n                }\n                return obj;\n            }\n        case \"array\":\n            {\n                return (initializer !== null && initializer !== void 0 ? initializer : []).map((x)=>getInitialPropsValueFromInitializer(schema.element, x.value));\n            }\n    }\n    (0,emery__WEBPACK_IMPORTED_MODULE_1__.assertNever)(schema);\n}\nfunction updateValue(schema, currentValue, updater) {\n    if (updater === undefined) return currentValue;\n    switch(schema.kind){\n        case \"form\":\n            return updater;\n        case \"child\":\n            return updater;\n        case \"conditional\":\n            {\n                return {\n                    discriminant: updater.discriminant,\n                    value: updater.discriminant === currentValue.discriminant ? updateValue(schema.values[updater.discriminant.toString()], currentValue.value, updater.value) : getInitialPropsValueFromInitializer(schema.values[updater.discriminant.toString()], updater.value)\n                };\n            }\n        case \"object\":\n            {\n                const obj = {};\n                for (const key of Object.keys(schema.fields)){\n                    obj[key] = updateValue(schema.fields[key], currentValue[key], updater[key]);\n                }\n                return obj;\n            }\n        case \"array\":\n            {\n                const currentArrVal = currentValue;\n                const newVal = updater;\n                const uniqueKeys = new Set();\n                for (const x of newVal){\n                    if (x.key !== undefined) {\n                        if (uniqueKeys.has(x.key)) {\n                            throw new Error(\"Array elements must have unique keys\");\n                        }\n                        uniqueKeys.add(x.key);\n                    }\n                }\n                const keys = newVal.map((x)=>{\n                    if (x.key !== undefined) return x.key;\n                    let elementKey = getNewArrayElementKey();\n                    // just in case someone gives a key that is above our counter\n                    while(uniqueKeys.has(elementKey)){\n                        elementKey = getNewArrayElementKey();\n                    }\n                    uniqueKeys.add(elementKey);\n                    return elementKey;\n                });\n                const prevKeys = getKeysForArrayValue(currentArrVal);\n                const prevValuesByKey = new Map(currentArrVal.map((value, i)=>{\n                    return [\n                        prevKeys[i],\n                        value\n                    ];\n                }));\n                const val = newVal.map((x, i)=>{\n                    const id = keys[i];\n                    if (prevValuesByKey.has(id)) {\n                        return updateValue(schema.element, prevValuesByKey.get(id), x.value);\n                    }\n                    return getInitialPropsValueFromInitializer(schema.element, x.value);\n                });\n                setKeysForArrayValue(val, keys);\n                return val;\n            }\n    }\n    (0,emery__WEBPACK_IMPORTED_MODULE_1__.assertNever)(schema);\n}\nfunction getValueAtPropPath(value, inputPath) {\n    const path = [\n        ...inputPath\n    ];\n    while(path.length){\n        const key = path.shift();\n        value = value[key];\n    }\n    return value;\n}\nfunction traverseProps(schema, value, visitor, path = []) {\n    if (schema.kind === \"form\" || schema.kind === \"child\") {\n        visitor(schema, value, path);\n        return;\n    }\n    if (schema.kind === \"object\") {\n        for (const [key, childProp] of Object.entries(schema.fields)){\n            traverseProps(childProp, value[key], visitor, [\n                ...path,\n                key\n            ]);\n        }\n        visitor(schema, value, path);\n        return;\n    }\n    if (schema.kind === \"array\") {\n        for (const [idx, val] of value.entries()){\n            traverseProps(schema.element, val, visitor, path.concat(idx));\n        }\n        return visitor(schema, value, path);\n    }\n    if (schema.kind === \"conditional\") {\n        const discriminant = value.discriminant;\n        visitor(schema, discriminant, path.concat(\"discriminant\"));\n        traverseProps(schema.values[discriminant.toString()], value.value, visitor, path.concat(\"value\"));\n        visitor(schema, value, path);\n        return;\n    }\n    (0,emery_assertions__WEBPACK_IMPORTED_MODULE_0__.assertNever)(schema);\n}\nfunction transformProps(schema, value, visitors, path = []) {\n    if (schema.kind === \"form\" || schema.kind === \"child\") {\n        if (visitors[schema.kind]) {\n            return visitors[schema.kind](schema, value, path);\n        }\n        return value;\n    }\n    if (schema.kind === \"object\") {\n        const val = Object.fromEntries(Object.entries(schema.fields).map(([key, val])=>{\n            return [\n                key,\n                transformProps(val, value[key], visitors, [\n                    ...path,\n                    key\n                ])\n            ];\n        }));\n        if (visitors.object) {\n            return visitors[schema.kind](schema, val, path);\n        }\n        return val;\n    }\n    if (schema.kind === \"array\") {\n        const val = value.map((val, idx)=>transformProps(schema.element, val, visitors, path.concat(idx)));\n        if (visitors.array) {\n            return visitors[schema.kind](schema, val, path);\n        }\n        return val;\n    }\n    if (schema.kind === \"conditional\") {\n        const discriminant = transformProps(schema.discriminant, value.discriminant, visitors, path.concat(\"discriminant\"));\n        const conditionalVal = transformProps(schema.values[discriminant.toString()], value.value, visitors, path.concat(\"value\"));\n        const val = {\n            discriminant,\n            value: conditionalVal\n        };\n        if (visitors.conditional) {\n            return visitors[schema.kind](schema, val, path);\n        }\n        return val;\n    }\n    (0,emery_assertions__WEBPACK_IMPORTED_MODULE_0__.assertNever)(schema);\n}\nfunction replaceValueAtPropPath(schema, value, newValue, path) {\n    if (path.length === 0) {\n        return newValue;\n    }\n    const [key, ...newPath] = path;\n    if (schema.kind === \"object\") {\n        return {\n            ...value,\n            [key]: replaceValueAtPropPath(schema.fields[key], value[key], newValue, newPath)\n        };\n    }\n    if (schema.kind === \"conditional\") {\n        const conditionalValue = value;\n        // replaceValueAtPropPath should not be used to only update the discriminant of a conditional field\n        // if you want to update the discriminant of a conditional field, replace the value of the whole conditional field\n        (0,emery_assertions__WEBPACK_IMPORTED_MODULE_0__.assert)(key === \"value\");\n        return {\n            discriminant: conditionalValue.discriminant,\n            value: replaceValueAtPropPath(schema.values[key], conditionalValue.value, newValue, newPath)\n        };\n    }\n    if (schema.kind === \"array\") {\n        const prevVal = value;\n        const newVal = [\n            ...prevVal\n        ];\n        setKeysForArrayValue(newVal, getKeysForArrayValue(prevVal));\n        newVal[key] = replaceValueAtPropPath(schema.element, newVal[key], newValue, newPath);\n        return newVal;\n    }\n    // we should never reach here since form or child fields don't contain other fields\n    // so the only thing that can happen to them is to be replaced which happens at the start of this function when path.length === 0\n    (0,emery_assertions__WEBPACK_IMPORTED_MODULE_0__.assert)(schema.kind !== \"form\" && schema.kind !== \"child\");\n    (0,emery_assertions__WEBPACK_IMPORTED_MODULE_0__.assertNever)(schema);\n}\n// a v important note\n// marks in the markdown ast/html are represented quite differently to how they are in slate\n// if you had the markdown **something https://keystonejs.com something**\n// the bold node is the parent of the link node\n// but in slate, marks are only represented on text nodes\nconst currentlyActiveMarks = new Set();\nconst currentlyDisabledMarks = new Set();\nlet currentLink = null;\nfunction addMarkToChildren(mark, cb) {\n    const wasPreviouslyActive = currentlyActiveMarks.has(mark);\n    currentlyActiveMarks.add(mark);\n    try {\n        return cb();\n    } finally{\n        if (!wasPreviouslyActive) {\n            currentlyActiveMarks.delete(mark);\n        }\n    }\n}\nfunction setLinkForChildren(href, cb) {\n    // we'll only use the outer link\n    if (currentLink !== null) {\n        return cb();\n    }\n    currentLink = href;\n    try {\n        return cb();\n    } finally{\n        currentLink = null;\n    }\n}\nfunction addMarksToChildren(marks, cb) {\n    const marksToRemove = new Set();\n    for (const mark of marks){\n        if (!currentlyActiveMarks.has(mark)) {\n            marksToRemove.add(mark);\n        }\n        currentlyActiveMarks.add(mark);\n    }\n    try {\n        return cb();\n    } finally{\n        for (const mark of marksToRemove){\n            currentlyActiveMarks.delete(mark);\n        }\n    }\n}\nfunction forceDisableMarkForChildren(mark, cb) {\n    const wasPreviouslyDisabled = currentlyDisabledMarks.has(mark);\n    currentlyDisabledMarks.add(mark);\n    try {\n        return cb();\n    } finally{\n        if (!wasPreviouslyDisabled) {\n            currentlyDisabledMarks.delete(mark);\n        }\n    }\n}\n/**\n * This type is more strict than `Element & { type: 'link'; }` because `children`\n * is constrained to only contain Text nodes. This can't be assumed generally around the editor\n * (because of potentially future inline components or nested links(which are normalized away but the editor needs to not break if it happens))\n * but where this type is used, we're only going to allow links to contain Text and that's important\n * so that we know a block will never be inside an inline because Slate gets unhappy when that happens\n * (really the link inline should probably be a mark rather than an inline,\n * non-void inlines are probably always bad but that would imply changing the document\n * structure which would be such unnecessary breakage)\n */ function getInlineNodes(text) {\n    const node = {\n        text\n    };\n    for (const mark of currentlyActiveMarks){\n        if (!currentlyDisabledMarks.has(mark)) {\n            node[mark] = true;\n        }\n    }\n    if (currentLink !== null) {\n        return [\n            {\n                text: \"\"\n            },\n            {\n                type: \"link\",\n                href: currentLink,\n                children: [\n                    node\n                ]\n            },\n            {\n                text: \"\"\n            }\n        ];\n    }\n    return [\n        node\n    ];\n}\nclass VariableChildFields extends Error {\n    constructor(){\n        super(\"There are a variable number of child fields\");\n    }\n}\nfunction findSingleChildField(schema) {\n    try {\n        const result = _findConstantChildFields(schema, [], new Set());\n        if (result.length === 1) {\n            return result[0];\n        }\n        return;\n    } catch (err) {\n        if (err instanceof VariableChildFields) {\n            return;\n        }\n        throw err;\n    }\n}\nfunction _findConstantChildFields(schema, path, seenSchemas) {\n    if (seenSchemas.has(schema)) {\n        return [];\n    }\n    seenSchemas.add(schema);\n    switch(schema.kind){\n        case \"form\":\n            return [];\n        case \"child\":\n            return [\n                {\n                    relativePath: path,\n                    options: schema.options,\n                    kind: \"child\"\n                }\n            ];\n        case \"conditional\":\n            {\n                if (couldContainChildField(schema)) {\n                    throw new VariableChildFields();\n                }\n                return [];\n            }\n        case \"array\":\n            {\n                if (schema.asChildTag) {\n                    const child = _findConstantChildFields(schema.element, [], seenSchemas);\n                    if (child.length > 1) {\n                        return [];\n                    }\n                    return [\n                        {\n                            kind: \"array\",\n                            asChildTag: schema.asChildTag,\n                            field: schema,\n                            relativePath: path,\n                            child: child[0]\n                        }\n                    ];\n                }\n                if (couldContainChildField(schema)) {\n                    throw new VariableChildFields();\n                }\n                return [];\n            }\n        case \"object\":\n            {\n                const paths = [];\n                for (const [key, value] of Object.entries(schema.fields)){\n                    paths.push(..._findConstantChildFields(value, path.concat(key), seenSchemas));\n                }\n                return paths;\n            }\n    }\n}\nfunction couldContainChildField(schema, seen = new Set()) {\n    if (seen.has(schema)) {\n        return false;\n    }\n    seen.add(schema);\n    switch(schema.kind){\n        case \"form\":\n            return false;\n        case \"child\":\n            return true;\n        case \"conditional\":\n            return Object.values(schema.values).some((value)=>couldContainChildField(value, seen));\n        case \"object\":\n            return Object.keys(schema.fields).some((key)=>couldContainChildField(schema.fields[key], seen));\n        case \"array\":\n            return couldContainChildField(schema.element, seen);\n    }\n}\nfunction inlineNodeFromMarkdoc(node) {\n    if (node.type === \"inline\") {\n        return inlineChildrenFromMarkdoc(node.children);\n    }\n    if (node.type === \"link\") {\n        return setLinkForChildren(node.attributes.href, ()=>inlineChildrenFromMarkdoc(node.children));\n    }\n    if (node.type === \"text\") {\n        return getInlineNodes(node.attributes.content);\n    }\n    if (node.type === \"strong\") {\n        return addMarkToChildren(\"bold\", ()=>inlineChildrenFromMarkdoc(node.children));\n    }\n    if (node.type === \"code\") {\n        return addMarkToChildren(\"code\", ()=>getInlineNodes(node.attributes.content));\n    }\n    if (node.type === \"em\") {\n        return addMarkToChildren(\"italic\", ()=>inlineChildrenFromMarkdoc(node.children));\n    }\n    if (node.type === \"s\") {\n        return addMarkToChildren(\"strikethrough\", ()=>inlineChildrenFromMarkdoc(node.children));\n    }\n    if (node.type === \"tag\") {\n        if (node.tag === \"u\") {\n            return addMarkToChildren(\"underline\", ()=>inlineChildrenFromMarkdoc(node.children));\n        }\n        if (node.tag === \"kbd\") {\n            return addMarkToChildren(\"keyboard\", ()=>inlineChildrenFromMarkdoc(node.children));\n        }\n        if (node.tag === \"sub\") {\n            return addMarkToChildren(\"subscript\", ()=>inlineChildrenFromMarkdoc(node.children));\n        }\n        if (node.tag === \"sup\") {\n            return addMarkToChildren(\"superscript\", ()=>inlineChildrenFromMarkdoc(node.children));\n        }\n    }\n    if (node.type === \"softbreak\") {\n        return getInlineNodes(\" \");\n    }\n    if (node.type === \"hardbreak\") {\n        return getInlineNodes(\"\\n\");\n    }\n    if (node.tag === \"component-inline-prop\" && Array.isArray(node.attributes.propPath) && node.attributes.propPath.every((x)=>typeof x === \"string\" || typeof x === \"number\")) {\n        return {\n            type: \"component-inline-prop\",\n            children: inlineFromMarkdoc(node.children),\n            propPath: node.attributes.propPath\n        };\n    }\n    throw new Error(`Unknown inline node type: ${node.type}`);\n}\nfunction inlineChildrenFromMarkdoc(nodes) {\n    return nodes.flatMap(inlineNodeFromMarkdoc);\n}\nfunction inlineFromMarkdoc(nodes) {\n    const transformedNodes = nodes.flatMap(inlineNodeFromMarkdoc);\n    const nextNodes = [];\n    let lastNode;\n    for (const [idx, node] of transformedNodes.entries()){\n        var _lastNode;\n        if (node.type === undefined && node.text === \"\" && ((_lastNode = lastNode) === null || _lastNode === void 0 ? void 0 : _lastNode.type) === undefined && idx !== transformedNodes.length - 1) {\n            continue;\n        }\n        nextNodes.push(node);\n        lastNode = node;\n    }\n    if (!nextNodes.length) {\n        nextNodes.push({\n            text: \"\"\n        });\n    }\n    return nextNodes;\n}\nfunction fromMarkdoc(node, componentBlocks) {\n    const nodes = node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks));\n    if (nodes.length === 0) {\n        return [\n            {\n                type: \"paragraph\",\n                children: [\n                    {\n                        text: \"\"\n                    }\n                ]\n            }\n        ];\n    }\n    if (nodes[nodes.length - 1].type !== \"paragraph\") {\n        nodes.push({\n            type: \"paragraph\",\n            children: [\n                {\n                    text: \"\"\n                }\n            ]\n        });\n    }\n    return nodes;\n}\nfunction fromMarkdocNode(node, componentBlocks) {\n    if (node.type === \"blockquote\") {\n        return {\n            type: \"blockquote\",\n            children: node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks))\n        };\n    }\n    if (node.type === \"fence\") {\n        const { language, content, ...rest } = node.attributes;\n        return {\n            type: \"code\",\n            children: [\n                {\n                    text: content.replace(/\\n$/, \"\")\n                }\n            ],\n            ...typeof language === \"string\" ? {\n                language\n            } : {},\n            ...rest\n        };\n    }\n    if (node.type === \"heading\") {\n        return {\n            ...node.attributes,\n            level: node.attributes.level,\n            type: \"heading\",\n            children: inlineFromMarkdoc(node.children)\n        };\n    }\n    if (node.type === \"list\") {\n        return {\n            type: node.attributes.ordered ? \"ordered-list\" : \"unordered-list\",\n            children: node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks))\n        };\n    }\n    if (node.type === \"item\") {\n        var _node$children$;\n        const children = [\n            {\n                type: \"list-item-content\",\n                children: node.children.length ? inlineFromMarkdoc([\n                    node.children[0]\n                ]) : [\n                    {\n                        text: \"\"\n                    }\n                ]\n            }\n        ];\n        if (((_node$children$ = node.children[1]) === null || _node$children$ === void 0 ? void 0 : _node$children$.type) === \"list\") {\n            const list = node.children[1];\n            children.push({\n                type: list.attributes.ordered ? \"ordered-list\" : \"unordered-list\",\n                children: list.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks))\n            });\n        }\n        return {\n            type: \"list-item\",\n            children\n        };\n    }\n    if (node.type === \"paragraph\") {\n        if (node.children.length === 1 && node.children[0].type === \"inline\" && node.children[0].children.length === 1 && node.children[0].children[0].type === \"image\") {\n            var _image$attributes$tit;\n            const image = node.children[0].children[0];\n            return {\n                type: \"image\",\n                src: decodeURI(image.attributes.src),\n                alt: image.attributes.alt,\n                title: (_image$attributes$tit = image.attributes.title) !== null && _image$attributes$tit !== void 0 ? _image$attributes$tit : \"\",\n                children: [\n                    {\n                        text: \"\"\n                    }\n                ]\n            };\n        }\n        const children = inlineFromMarkdoc(node.children);\n        if (children.length === 1 && children[0].type === \"component-inline-prop\") {\n            return children[0];\n        }\n        return {\n            type: \"paragraph\",\n            children,\n            textAlign: node.attributes.textAlign\n        };\n    }\n    if (node.type === \"hr\") {\n        return {\n            type: \"divider\",\n            children: [\n                {\n                    text: \"\"\n                }\n            ]\n        };\n    }\n    if (node.type === \"table\") {\n        return {\n            type: \"table\",\n            children: node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks))\n        };\n    }\n    if (node.type === \"tbody\") {\n        return {\n            type: \"table-body\",\n            children: node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks))\n        };\n    }\n    if (node.type === \"thead\") {\n        if (!node.children.length) return [];\n        return {\n            type: \"table-head\",\n            children: node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks))\n        };\n    }\n    if (node.type === \"tr\") {\n        return {\n            type: \"table-row\",\n            children: node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks))\n        };\n    }\n    if (node.type === \"td\") {\n        return {\n            type: \"table-cell\",\n            children: node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks))\n        };\n    }\n    if (node.type === \"th\") {\n        return {\n            type: \"table-cell\",\n            header: true,\n            children: node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks))\n        };\n    }\n    if (node.type === \"tag\") {\n        if (node.tag === \"table\") {\n            return fromMarkdocNode(node.children[0], componentBlocks);\n        }\n        if (node.tag === \"layout\") {\n            return {\n                type: \"layout\",\n                layout: node.attributes.layout,\n                children: node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks))\n            };\n        }\n        if (node.tag === \"layout-area\") {\n            return {\n                type: \"layout-area\",\n                children: node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks))\n            };\n        }\n        if (node.tag === \"component-block\") {\n            return {\n                type: \"component-block\",\n                component: node.attributes.component,\n                props: node.attributes.props,\n                children: node.children.length === 0 ? [\n                    {\n                        type: \"component-inline-prop\",\n                        children: [\n                            {\n                                text: \"\"\n                            }\n                        ]\n                    }\n                ] : node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks))\n            };\n        }\n        if (node.tag === \"component-block-prop\" && Array.isArray(node.attributes.propPath) && node.attributes.propPath.every((x)=>typeof x === \"string\" || typeof x === \"number\")) {\n            return {\n                type: \"component-block-prop\",\n                children: node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks)),\n                propPath: node.attributes.propPath\n            };\n        }\n        if (node.tag) {\n            const componentBlock = componentBlocks[node.tag];\n            if (componentBlock) {\n                const singleChildField = findSingleChildField({\n                    kind: \"object\",\n                    fields: componentBlock.schema\n                });\n                if (singleChildField) {\n                    const newAttributes = JSON.parse(JSON.stringify(node.attributes));\n                    const children = [];\n                    toChildrenAndProps$1(node.children, children, newAttributes, singleChildField, [], componentBlocks);\n                    return {\n                        type: \"component-block\",\n                        component: node.tag,\n                        props: newAttributes,\n                        children\n                    };\n                }\n                return {\n                    type: \"component-block\",\n                    component: node.tag,\n                    props: node.attributes,\n                    children: node.children.length === 0 ? [\n                        {\n                            type: \"component-inline-prop\",\n                            children: [\n                                {\n                                    text: \"\"\n                                }\n                            ]\n                        }\n                    ] : node.children.flatMap((x)=>fromMarkdocNode(x, componentBlocks))\n                };\n            }\n        }\n        throw new Error(`Unknown tag: ${node.tag}`);\n    }\n    return inlineNodeFromMarkdoc(node);\n}\nfunction toChildrenAndProps$1(fromMarkdoc, resultingChildren, value, singleChildField, parentPropPath, componentBlocks) {\n    if (singleChildField.kind === \"child\") {\n        const children = fromMarkdoc.flatMap((x)=>fromMarkdocNode(x, componentBlocks));\n        resultingChildren.push({\n            type: `component-${singleChildField.options.kind}-prop`,\n            propPath: [\n                ...parentPropPath,\n                ...singleChildField.relativePath\n            ],\n            children\n        });\n    }\n    if (singleChildField.kind === \"array\") {\n        const arr = [];\n        for (let [idx, child] of fromMarkdoc.entries()){\n            if (child.type === \"paragraph\") {\n                child = child.children[0].children[0];\n            }\n            if (child.type !== \"tag\") {\n                throw new Error(`expected tag ${singleChildField.asChildTag}, found type: ${child.type}`);\n            }\n            if (child.tag !== singleChildField.asChildTag) {\n                throw new Error(`expected tag ${singleChildField.asChildTag}, found tag: ${child.tag}`);\n            }\n            const attributes = JSON.parse(JSON.stringify(child.attributes));\n            if (singleChildField.child) {\n                toChildrenAndProps$1(child.children, resultingChildren, attributes, singleChildField.child, [\n                    ...parentPropPath,\n                    ...singleChildField.relativePath,\n                    idx\n                ], componentBlocks);\n            }\n            arr.push(attributes);\n        }\n        const key = singleChildField.relativePath[singleChildField.relativePath.length - 1];\n        const parent = getValueAtPropPath(value, singleChildField.relativePath.slice(0, -1));\n        parent[key] = arr;\n    }\n}\nfunction areArraysEqual(a, b) {\n    return a.length === b.length && a.every((x, i)=>x === b[i]);\n}\nfunction normalizeTextBasedOnInlineMarksAndSoftBreaks([node, path], editor, inlineMarks, softBreaks) {\n    const marksToRemove = Object.keys(node).filter((x)=>x !== \"text\" && x !== \"insertMenu\" && inlineMarks[x] !== true);\n    if (marksToRemove.length) {\n        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unsetNodes(editor, marksToRemove, {\n            at: path\n        });\n        return true;\n    }\n    if (!softBreaks) {\n        const hasSoftBreaks = node.text.includes(\"\\n\");\n        if (hasSoftBreaks) {\n            const [parentNode] = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.parent(editor, path);\n            if (parentNode.type !== \"code\") {\n                for (const position of slate__WEBPACK_IMPORTED_MODULE_6__.Editor.positions(editor, {\n                    at: path\n                })){\n                    const character = slate__WEBPACK_IMPORTED_MODULE_6__.Node.get(editor, position.path).text[position.offset];\n                    if (character === \"\\n\") {\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.delete(editor, {\n                            at: position\n                        });\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction normalizeInlineBasedOnLinks([node, path], editor, links) {\n    if (node.type === \"link\" && !links) {\n        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.insertText(editor, ` (${node.href})`, {\n            at: slate__WEBPACK_IMPORTED_MODULE_6__.Editor.end(editor, path)\n        });\n        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n            at: path\n        });\n        return true;\n    }\n    return false;\n}\nfunction normalizeElementBasedOnDocumentFeatures([node, path], editor, { formatting, dividers, layouts, links, images, tables }) {\n    if (node.type === \"heading\" && (!formatting.headings.levels.length || !formatting.headings.levels.includes(node.level)) || node.type === \"ordered-list\" && !formatting.listTypes.ordered || node.type === \"unordered-list\" && !formatting.listTypes.unordered || node.type === \"code\" && !formatting.blockTypes.code || node.type === \"blockquote\" && !formatting.blockTypes.blockquote || node.type === \"image\" && !images || node.type === \"table\" && !tables || node.type === \"layout\" && (layouts.length === 0 || !layouts.some((layout)=>areArraysEqual(layout, node.layout)))) {\n        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n            at: path\n        });\n        return true;\n    }\n    if ((node.type === \"paragraph\" || node.type === \"heading\") && (!formatting.alignment.center && node.textAlign === \"center\" || !formatting.alignment.end && node.textAlign === \"end\" || \"textAlign\" in node && node.textAlign !== \"center\" && node.textAlign !== \"end\")) {\n        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unsetNodes(editor, \"textAlign\", {\n            at: path\n        });\n        return true;\n    }\n    if (node.type === \"divider\" && !dividers) {\n        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n            at: path\n        });\n        return true;\n    }\n    return normalizeInlineBasedOnLinks([\n        node,\n        path\n    ], editor, links);\n}\nfunction withDocumentFeaturesNormalization(documentFeatures, editor) {\n    const { normalizeNode } = editor;\n    editor.normalizeNode = ([node, path])=>{\n        if (slate__WEBPACK_IMPORTED_MODULE_6__.Text.isText(node)) {\n            normalizeTextBasedOnInlineMarksAndSoftBreaks([\n                node,\n                path\n            ], editor, documentFeatures.formatting.inlineMarks, documentFeatures.formatting.softBreaks);\n        } else if (slate__WEBPACK_IMPORTED_MODULE_6__.Element.isElement(node)) {\n            normalizeElementBasedOnDocumentFeatures([\n                node,\n                path\n            ], editor, documentFeatures);\n        }\n        normalizeNode([\n            node,\n            path\n        ]);\n    };\n    return editor;\n}\nfunction getSrcPrefix(publicPath, slug) {\n    return typeof publicPath === \"string\" ? `${publicPath.replace(/\\/*$/, \"\")}/${slug === undefined ? \"\" : slug + \"/\"}` : \"\";\n}\nfunction deserializeFiles(nodes, componentBlocks, files, otherFiles, mode, documentFeatures, slug) {\n    return nodes.map((node)=>{\n        if (node.type === \"component-block\") {\n            const componentBlock = componentBlocks[node.component];\n            if (!componentBlock) return node;\n            const schema = object(componentBlock.schema);\n            return {\n                ...node,\n                props: deserializeProps(schema, node.props, files, otherFiles, mode, slug)\n            };\n        }\n        if (node.type === \"image\" && typeof node.src === \"string\" && mode === \"edit\") {\n            var _ref;\n            const prefix = getSrcPrefixForImageBlock(documentFeatures, slug);\n            const filename = node.src.slice(prefix.length);\n            const content = (_ref = typeof documentFeatures.images === \"object\" && typeof documentFeatures.images.directory === \"string\" ? otherFiles.get(fixPath(documentFeatures.images.directory)) : files) === null || _ref === void 0 ? void 0 : _ref.get(filename);\n            if (!content) {\n                return {\n                    type: \"paragraph\",\n                    children: [\n                        {\n                            text: `Missing image ${filename}`\n                        }\n                    ]\n                };\n            }\n            return {\n                type: \"image\",\n                src: {\n                    filename,\n                    content\n                },\n                alt: node.alt,\n                title: node.title,\n                children: [\n                    {\n                        text: \"\"\n                    }\n                ]\n            };\n        }\n        if (typeof node.type === \"string\") {\n            const children = deserializeFiles(node.children, componentBlocks, files, otherFiles, mode, documentFeatures, slug);\n            return {\n                ...node,\n                children\n            };\n        }\n        return node;\n    });\n}\nfunction deserializeProps(schema, value, files, otherFiles, mode, slug) {\n    return transformProps(schema, value, {\n        form: (schema, value)=>{\n            if (schema.formKind === \"asset\") {\n                var _otherFiles$get;\n                if (mode === \"read\") {\n                    return schema.reader.parse(value);\n                }\n                const filename = schema.filename(value, {\n                    slug,\n                    suggestedFilenamePrefix: undefined\n                });\n                return schema.parse(value, {\n                    asset: filename ? schema.directory ? (_otherFiles$get = otherFiles.get(schema.directory)) === null || _otherFiles$get === void 0 ? void 0 : _otherFiles$get.get(filename) : files.get(filename) : undefined,\n                    slug\n                });\n            }\n            if (schema.formKind === \"content\") {\n                throw new Error(\"Not implemented\");\n            }\n            if (mode === \"read\") {\n                return schema.reader.parse(value);\n            }\n            return schema.parse(value, undefined);\n        }\n    });\n}\nfunction getSrcPrefixForImageBlock(documentFeatures, slug) {\n    return getSrcPrefix(typeof documentFeatures.images === \"object\" ? documentFeatures.images.publicPath : undefined, slug);\n}\nfunction serializeProps(rootValue, rootSchema, // note you might have a slug without a slug field when serializing props inside a component block or etc. in the editor\nslugField, slug, shouldSuggestFilenamePrefix) {\n    const extraFiles = [];\n    return {\n        value: transformProps(rootSchema, rootValue, {\n            form (schema, value, propPath) {\n                if (propPath.length === 1 && slugField === propPath[0]) {\n                    if (schema.formKind !== \"slug\") {\n                        throw new Error(\"slugField is a not a slug field\");\n                    }\n                    return schema.serializeWithSlug(value).value;\n                }\n                if (schema.formKind === \"asset\") {\n                    const { asset, value: forYaml } = schema.serialize(value, {\n                        suggestedFilenamePrefix: shouldSuggestFilenamePrefix ? getPropPathPortion(propPath, rootSchema, rootValue) : undefined,\n                        slug\n                    });\n                    if (asset) {\n                        extraFiles.push({\n                            path: asset.filename,\n                            contents: asset.content,\n                            parent: schema.directory\n                        });\n                    }\n                    return forYaml;\n                }\n                if (schema.formKind === \"content\") {\n                    const { other, external, content, value: forYaml } = schema.serialize(value, {\n                        slug\n                    });\n                    if (content) {\n                        extraFiles.push({\n                            path: getPropPathPortion(propPath, rootSchema, rootValue) + schema.contentExtension,\n                            contents: content,\n                            parent: undefined\n                        });\n                    }\n                    for (const [key, contents] of other){\n                        extraFiles.push({\n                            path: getPropPathPortion(propPath, rootSchema, rootValue) + \"/\" + key,\n                            contents,\n                            parent: undefined\n                        });\n                    }\n                    const allowedDirectories = new Set(schema.directories);\n                    for (const [directory, contents] of external){\n                        if (!allowedDirectories.has(directory)) {\n                            throw new Error(`Invalid directory ${directory} in content field serialization`);\n                        }\n                        for (const [filename, fileContents] of contents){\n                            extraFiles.push({\n                                path: filename,\n                                contents: fileContents,\n                                parent: directory\n                            });\n                        }\n                    }\n                    return forYaml;\n                }\n                return schema.serialize(value).value;\n            },\n            object (_schema, value) {\n                return Object.fromEntries(Object.entries(value).filter(([_, val])=>val !== undefined));\n            },\n            array (_schema, value) {\n                return value.map((val)=>val === undefined ? null : val);\n            },\n            child () {\n                return undefined;\n            }\n        }),\n        extraFiles\n    };\n}\nfunction getPropPathPortion(path, schema, value) {\n    const end = [];\n    for (const portion of path){\n        if (schema.kind === \"array\") {\n            value = value[portion];\n            if (schema.slugField && schema.element.kind === \"object\") {\n                const slug = getSlugFromState({\n                    schema: schema.element.fields,\n                    slugField: schema.slugField\n                }, value);\n                end.push(slug);\n            } else {\n                end.push(portion);\n            }\n            schema = schema.element;\n            continue;\n        }\n        end.push(portion);\n        if (schema.kind === \"object\") {\n            value = value[portion];\n            schema = schema.fields[portion];\n            continue;\n        }\n        if (schema.kind === \"conditional\") {\n            if (portion === \"discriminant\") {\n                schema = schema.discriminant;\n            } else if (portion === \"value\") {\n                schema = schema.values[value.discriminant];\n            }\n            value = value[portion];\n            continue;\n        }\n        throw new Error(`unexpected ${schema.kind}`);\n    }\n    return end.join(\"/\");\n}\nconst { Ast } = _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_7__[\"default\"];\nfunction toInline(nodes) {\n    return new Ast.Node(\"inline\", {}, nodes.flatMap(toMarkdocInline));\n}\nconst markToMarkdoc = {\n    bold: {\n        type: \"strong\"\n    },\n    code: {\n        type: \"code\"\n    },\n    italic: {\n        type: \"em\"\n    },\n    underline: {\n        type: \"tag\",\n        tag: \"u\"\n    },\n    keyboard: {\n        type: \"tag\",\n        tag: \"kbd\"\n    },\n    strikethrough: {\n        type: \"s\"\n    },\n    subscript: {\n        type: \"tag\",\n        tag: \"sub\"\n    },\n    superscript: {\n        type: \"tag\",\n        tag: \"sup\"\n    }\n};\nfunction toMarkdocInline(node) {\n    var _exec, _exec2;\n    if (node.type === \"link\") {\n        return new Ast.Node(\"link\", {\n            href: node.href\n        }, node.children.flatMap(toMarkdocInline));\n    }\n    if (node.type !== undefined) {\n        throw new Error(`unexpected inline node type: ${node.type}`);\n    }\n    const marks = Object.keys(node).filter((mark)=>mark !== \"text\" && mark !== \"code\").sort();\n    const splitByNewLines = node.text.split(/\\n/);\n    if (splitByNewLines.length > 1) {\n        return splitByNewLines.flatMap((x, i)=>{\n            if (i === 0) {\n                return toMarkdocInline({\n                    ...node,\n                    text: x\n                });\n            }\n            const inner = toMarkdocInline({\n                ...node,\n                text: x\n            });\n            return [\n                new Ast.Node(\"hardbreak\"),\n                ...Array.isArray(inner) ? inner : [\n                    inner\n                ]\n            ];\n        });\n    }\n    const leadingWhitespace = (_exec = /^\\s+/.exec(node.text)) === null || _exec === void 0 ? void 0 : _exec[0];\n    const trailingWhitespace = (_exec2 = /\\s+$/.exec(node.text)) === null || _exec2 === void 0 ? void 0 : _exec2[0];\n    let children = node.code ? [\n        new Ast.Node(\"code\", {\n            content: node.text.trim()\n        }, [])\n    ] : [\n        new Ast.Node(\"text\", {\n            content: node.text.trim()\n        })\n    ];\n    for (const mark of marks){\n        const config = markToMarkdoc[mark];\n        if (config) {\n            children = [\n                new Ast.Node(config.type, {}, children, config.tag)\n            ];\n        }\n    }\n    if (/^\\s+$/.test(node.text)) {\n        children.unshift(new Ast.Node(\"text\", {\n            content: leadingWhitespace\n        }, []));\n    } else {\n        if (leadingWhitespace !== null && leadingWhitespace !== void 0 && leadingWhitespace.length) {\n            children.unshift(new Ast.Node(\"text\", {\n                content: leadingWhitespace\n            }, []));\n        }\n        if (trailingWhitespace !== null && trailingWhitespace !== void 0 && trailingWhitespace.length) {\n            children.push(new Ast.Node(\"text\", {\n                content: trailingWhitespace\n            }, []));\n        }\n    }\n    return children;\n}\nfunction toMarkdocDocument(nodes, _config) {\n    const extraFiles = [];\n    const config = {\n        ..._config,\n        extraFiles\n    };\n    const node = new Ast.Node(\"document\", {}, nodes.flatMap((x)=>toMarkdoc(x, config)));\n    return {\n        node,\n        extraFiles\n    };\n}\nfunction toChildrenAndProps(childrenAsMarkdoc, resultingChildren, value, singleChildField) {\n    if (singleChildField.kind === \"child\") {\n        const child = childrenAsMarkdoc.find((x)=>areArraysEqual(x.propPath, singleChildField.relativePath));\n        if (child) {\n            resultingChildren.push(...child.children);\n        }\n        return;\n    }\n    if (singleChildField.kind === \"array\") {\n        const key = singleChildField.relativePath[singleChildField.relativePath.length - 1];\n        const parent = getValueAtPropPath(value, singleChildField.relativePath.slice(0, -1));\n        const valueAtPropPath = parent[key];\n        delete parent[key];\n        const childNodes = new Map();\n        for (const child of childrenAsMarkdoc){\n            const innerPropPath = child.propPath.slice(singleChildField.relativePath.length + 1);\n            const num = child.propPath[singleChildField.relativePath.length];\n            if (childNodes.get(num) === undefined) {\n                childNodes.set(num, []);\n            }\n            childNodes.get(num).push({\n                children: child.children,\n                propPath: innerPropPath\n            });\n        }\n        resultingChildren.push(...valueAtPropPath.map((x, i)=>{\n            var _childNodes$get;\n            const newChildrenAsMarkdoc = (_childNodes$get = childNodes.get(i)) !== null && _childNodes$get !== void 0 ? _childNodes$get : [];\n            const children = [];\n            toChildrenAndProps(newChildrenAsMarkdoc, children, x, singleChildField.child);\n            return new Ast.Node(\"tag\", x, children, singleChildField.asChildTag);\n        }));\n    }\n}\nfunction toMarkdoc(node, config) {\n    if (node.type === \"paragraph\") {\n        const markdocNode = new Ast.Node(\"paragraph\", node.textAlign ? {\n            textAlign: node.textAlign\n        } : {}, [\n            toInline(node.children)\n        ]);\n        if (node.textAlign) {\n            markdocNode.annotations.push({\n                name: \"textAlign\",\n                value: node.textAlign,\n                type: \"attribute\"\n            });\n        }\n        return markdocNode;\n    }\n    if (node.type === \"image\") {\n        config.extraFiles.push({\n            contents: node.src.content,\n            path: node.src.filename,\n            parent: typeof config.documentFeatures.images === \"object\" && typeof config.documentFeatures.images.directory === \"string\" ? fixPath(config.documentFeatures.images.directory) : undefined\n        });\n        return new Ast.Node(\"paragraph\", {}, [\n            new Ast.Node(\"inline\", {}, [\n                new Ast.Node(\"image\", {\n                    src: encodeURI(`${getSrcPrefixForImageBlock(config.documentFeatures, config.slug)}${node.src.filename}`),\n                    alt: node.alt,\n                    title: node.title\n                })\n            ])\n        ]);\n    }\n    if (node.type === \"code\") {\n        const extraAttributes = {};\n        const { children, language, type, ...rest } = node;\n        const schema = typeof config.documentFeatures.formatting.blockTypes.code === \"object\" ? config.documentFeatures.formatting.blockTypes.code.schema : undefined;\n        if (schema && Object.keys(schema.fields).length > 0) {\n            const serialized = serializeProps(getInitialPropsValueFromInitializer(schema, rest), schema, undefined, config.slug, false);\n            Object.assign(extraAttributes, serialized.value);\n            config.extraFiles.push(...serialized.extraFiles);\n        }\n        let content = children[0].text + \"\\n\";\n        const markdocNode = new Ast.Node(\"fence\", {\n            content,\n            language,\n            ...extraAttributes\n        }, [\n            new Ast.Node(\"text\", {\n                content\n            })\n        ]);\n        for (const [key, value] of Object.entries(extraAttributes)){\n            markdocNode.annotations.push({\n                name: key,\n                value,\n                type: \"attribute\"\n            });\n        }\n        return markdocNode;\n    }\n    const _toMarkdoc = (node)=>toMarkdoc(node, config);\n    if (node.type === \"blockquote\") {\n        return new Ast.Node(\"blockquote\", {}, node.children.map(_toMarkdoc));\n    }\n    if (node.type === \"divider\") {\n        return new Ast.Node(\"hr\");\n    }\n    if (node.type === \"table\") {\n        const head = node.children.find((x)=>x.type === \"table-head\");\n        return new Ast.Node(\"tag\", {}, [\n            new Ast.Node(\"table\", {}, [\n                new Ast.Node(\"thead\", {}, head ? head.children.map(_toMarkdoc) : []),\n                _toMarkdoc(node.children.find((x)=>x.type === \"table-body\"))\n            ])\n        ], \"table\");\n    }\n    if (node.type === \"table-body\") {\n        return new Ast.Node(\"tbody\", {}, node.children.map(_toMarkdoc));\n    }\n    if (node.type === \"table-row\") {\n        return new Ast.Node(\"tr\", {}, node.children.map(_toMarkdoc));\n    }\n    if (node.type === \"table-cell\") {\n        return new Ast.Node(node.header ? \"th\" : \"td\", {}, node.children.map(_toMarkdoc));\n    }\n    if (node.type === \"heading\") {\n        const extraAttributes = {};\n        if (node.textAlign) {\n            extraAttributes.textAlign = node.textAlign;\n        }\n        const { children, level, textAlign, type, ...rest } = node;\n        const schema = config.documentFeatures.formatting.headings.schema;\n        if (Object.keys(schema.fields).length > 0) {\n            Object.assign(extraAttributes, serializeProps(getInitialPropsValueFromInitializer(schema, rest), schema, undefined, config.slug, false).value);\n        }\n        const markdocNode = new Ast.Node(\"heading\", {\n            level: node.level,\n            ...extraAttributes\n        }, [\n            toInline(node.children)\n        ]);\n        for (const [key, value] of Object.entries(extraAttributes)){\n            markdocNode.annotations.push({\n                name: key,\n                value,\n                type: \"attribute\"\n            });\n        }\n        return markdocNode;\n    }\n    if (node.type === \"ordered-list\") {\n        return new Ast.Node(\"list\", {\n            ordered: true\n        }, node.children.map(_toMarkdoc));\n    }\n    if (node.type === \"unordered-list\") {\n        return new Ast.Node(\"list\", {\n            ordered: false\n        }, node.children.map(_toMarkdoc));\n    }\n    if (node.type === \"layout\") {\n        return new Ast.Node(\"tag\", {\n            layout: node.layout\n        }, node.children.map(_toMarkdoc), \"layout\");\n    }\n    if (node.type === \"layout-area\") {\n        return new Ast.Node(\"tag\", {}, node.children.flatMap(_toMarkdoc), \"layout-area\");\n    }\n    if (node.type === \"component-block\") {\n        const isVoid = node.children.length === 1 && node.children[0].type === \"component-inline-prop\" && node.children[0].propPath === undefined;\n        const componentBlock = config.componentBlocks[node.component];\n        const childrenAsMarkdoc = [];\n        for (const child of node.children){\n            if ((child.type === \"component-block-prop\" || child.type === \"component-inline-prop\") && child.propPath !== undefined) {\n                childrenAsMarkdoc.push({\n                    type: child.type,\n                    propPath: child.propPath,\n                    children: child.type === \"component-block-prop\" ? child.children.flatMap(_toMarkdoc) : [\n                        toInline(child.children)\n                    ]\n                });\n            }\n        }\n        let attributes = node.props;\n        if (componentBlock) {\n            const serialized = serializeProps(node.props, {\n                kind: \"object\",\n                fields: componentBlock.schema\n            }, undefined, config.slug, false);\n            attributes = serialized.value;\n            config.extraFiles.push(...serialized.extraFiles);\n            const singleChildField = findSingleChildField({\n                kind: \"object\",\n                fields: componentBlock.schema\n            });\n            if (singleChildField) {\n                const children = [];\n                toChildrenAndProps(childrenAsMarkdoc, children, attributes, singleChildField);\n                return new Ast.Node(\"tag\", attributes, children, node.component);\n            }\n        }\n        const children = isVoid ? [] : childrenAsMarkdoc.map((x)=>new Ast.Node(\"tag\", {\n                propPath: x.propPath\n            }, x.children, x.type));\n        return new Ast.Node(\"tag\", attributes, children, node.component);\n    }\n    if (node.type === \"component-block-prop\" || node.type === \"component-inline-prop\") {\n        return new Ast.Node(\"tag\", {\n            propPath: node.propPath\n        }, node.type === \"component-inline-prop\" ? [\n            toInline(node.children)\n        ] : node.children.flatMap(_toMarkdoc), node.type);\n    }\n    if (node.type === \"list-item\") {\n        const listItemContent = node.children[0];\n        if (listItemContent.type !== \"list-item-content\") {\n            throw new Error(\"list item content must contain a list-item-content\");\n        }\n        const inline = toInline(listItemContent.children);\n        const children = [\n            inline\n        ];\n        const nestedList = node.children[1];\n        if (nestedList) {\n            children.push(toMarkdoc(nestedList, config));\n        }\n        return new Ast.Node(\"item\", {}, children);\n    }\n    if (node.type === \"list-item-content\") {\n        throw new Error(\"list-item-content in unexpected position\");\n    }\n    debugger;\n    throw new Error(`unexpected node type: ${node.type}`);\n}\nfunction validateText(val, min, max, fieldLabel, slugInfo) {\n    if (val.length < min) {\n        if (min === 1) {\n            return `${fieldLabel} must not be empty`;\n        } else {\n            return `${fieldLabel} must be at least ${min} characters long`;\n        }\n    }\n    if (val.length > max) {\n        return `${fieldLabel} must be no longer than ${max} characters`;\n    }\n    if (slugInfo) {\n        if (val === \"\") {\n            return `${fieldLabel} must not be empty`;\n        }\n        if (val === \"..\") {\n            return `${fieldLabel} must not be ..`;\n        }\n        if (val === \".\") {\n            return `${fieldLabel} must not be .`;\n        }\n        if (slugInfo.glob === \"**\") {\n            const split = val.split(\"/\");\n            if (split.some((s)=>s === \"..\")) {\n                return `${fieldLabel} must not contain ..`;\n            }\n            if (split.some((s)=>s === \".\")) {\n                return `${fieldLabel} must not be .`;\n            }\n        }\n        if ((slugInfo.glob === \"*\" ? /[\\\\/]/ : /[\\\\]/).test(val)) {\n            return `${fieldLabel} must not contain slashes`;\n        }\n        if (/^\\s|\\s$/.test(val)) {\n            return `${fieldLabel} must not start or end with spaces`;\n        }\n        if (slugInfo.slugs.has(val)) {\n            return `${fieldLabel} must be unique`;\n        }\n    }\n}\nfunction parseAsNormalField(value) {\n    if (value === undefined) {\n        return \"\";\n    }\n    if (typeof value !== \"string\") {\n        throw new FieldDataError(\"Must be a string\");\n    }\n    return value;\n}\nconst emptySet = new Set();\nfunction text({ label, defaultValue = \"\", validation: { length: { max = Infinity, min = 0 } = {} } = {}, description, multiline = false }) {\n    function validate(value, slugField) {\n        const message = validateText(value, min, max, label, slugField);\n        if (message !== undefined) {\n            throw new FieldDataError(message);\n        }\n        return value;\n    }\n    return {\n        kind: \"form\",\n        formKind: \"slug\",\n        label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(TextFieldInput, {\n                label: label,\n                description: description,\n                min: min,\n                max: max,\n                multiline: multiline,\n                ...props\n            });\n        },\n        defaultValue () {\n            return typeof defaultValue === \"string\" ? defaultValue : defaultValue();\n        },\n        parse (value, args) {\n            if ((args === null || args === void 0 ? void 0 : args.slug) !== undefined) {\n                return args.slug;\n            }\n            return parseAsNormalField(value);\n        },\n        serialize (value) {\n            return {\n                value: value === \"\" ? undefined : value\n            };\n        },\n        serializeWithSlug (value) {\n            return {\n                slug: value,\n                value: undefined\n            };\n        },\n        reader: {\n            parse (value) {\n                const parsed = parseAsNormalField(value);\n                return validate(parsed, undefined);\n            },\n            parseWithSlug (_value, args) {\n                validate(parseAsNormalField(args.slug), {\n                    glob: args.glob,\n                    slugs: emptySet\n                });\n                return null;\n            }\n        },\n        validate (value, args) {\n            return validate(value, args === null || args === void 0 ? void 0 : args.slugField);\n        }\n    };\n}\n/* eslint-disable */ globalThis.Prism = {\n    manual: true\n};\n/* **********************************************\n     Begin prism-core.js\n********************************************** */ /// <reference lib=\"WebWorker\"/>\nvar _self = globalThis;\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */ var Prism = function(_self) {\n    // Private helper vars\n    var lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n    var uniqueId = 0;\n    // The grammar object for plaintext\n    var plainTextGrammar = {};\n    var _ = {\n        /**\n     * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n     * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n     * additional languages or plugins yourself.\n     *\n     * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n     *\n     * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n     * empty Prism object into the global scope before loading the Prism script like this:\n     *\n     * ```js\n     * window.Prism = window.Prism || {};\n     * Prism.manual = true;\n     * // add a new <script> to load Prism's script\n     * ```\n     *\n     * @default false\n     * @type {boolean}\n     * @memberof Prism\n     * @public\n     */ manual: _self.Prism && _self.Prism.manual,\n        /**\n     * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n     * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n     * own worker, you don't want it to do this.\n     *\n     * By setting this value to `true`, Prism will not add its own listeners to the worker.\n     *\n     * You obviously have to change this value before Prism executes. To do this, you can add an\n     * empty Prism object into the global scope before loading the Prism script like this:\n     *\n     * ```js\n     * window.Prism = window.Prism || {};\n     * Prism.disableWorkerMessageHandler = true;\n     * // Load Prism's script\n     * ```\n     *\n     * @default false\n     * @type {boolean}\n     * @memberof Prism\n     * @public\n     */ disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n        /**\n     * A namespace for utility methods.\n     *\n     * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n     * change or disappear at any time.\n     *\n     * @namespace\n     * @memberof Prism\n     */ util: {\n            encode: function encode(tokens) {\n                if (tokens instanceof Token) {\n                    return new Token(tokens.type, encode(tokens.content), tokens.alias);\n                } else if (Array.isArray(tokens)) {\n                    return tokens.map(encode);\n                } else {\n                    return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n                }\n            },\n            /**\n       * Returns the name of the type of the given value.\n       *\n       * @param {any} o\n       * @returns {string}\n       * @example\n       * type(null)      === 'Null'\n       * type(undefined) === 'Undefined'\n       * type(123)       === 'Number'\n       * type('foo')     === 'String'\n       * type(true)      === 'Boolean'\n       * type([1, 2])    === 'Array'\n       * type({})        === 'Object'\n       * type(String)    === 'Function'\n       * type(/abc+/)    === 'RegExp'\n       */ type: function(o) {\n                return Object.prototype.toString.call(o).slice(8, -1);\n            },\n            /**\n       * Returns a unique number for the given object. Later calls will still return the same number.\n       *\n       * @param {Object} obj\n       * @returns {number}\n       */ objId: function(obj) {\n                if (!obj[\"__id\"]) {\n                    Object.defineProperty(obj, \"__id\", {\n                        value: ++uniqueId\n                    });\n                }\n                return obj[\"__id\"];\n            },\n            /**\n       * Creates a deep clone of the given object.\n       *\n       * The main intended use of this function is to clone language definitions.\n       *\n       * @param {T} o\n       * @param {Record<number, any>} [visited]\n       * @returns {T}\n       * @template T\n       */ clone: function deepClone(o, visited) {\n                visited = visited || {};\n                var clone;\n                var id;\n                switch(_.util.type(o)){\n                    case \"Object\":\n                        id = _.util.objId(o);\n                        if (visited[id]) {\n                            return visited[id];\n                        }\n                        clone = /** @type {Record<string, any>} */ {};\n                        visited[id] = clone;\n                        for(var key in o){\n                            if (o.hasOwnProperty(key)) {\n                                clone[key] = deepClone(o[key], visited);\n                            }\n                        }\n                        return /** @type {any} */ clone;\n                    case \"Array\":\n                        id = _.util.objId(o);\n                        if (visited[id]) {\n                            return visited[id];\n                        }\n                        clone = [];\n                        visited[id] = clone;\n                        /** @type {Array} */ /** @type {any} */ o.forEach(function(v, i) {\n                            clone[i] = deepClone(v, visited);\n                        });\n                        return /** @type {any} */ clone;\n                    default:\n                        return o;\n                }\n            },\n            /**\n       * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n       *\n       * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n       *\n       * @param {Element} element\n       * @returns {string}\n       */ getLanguage: function(element) {\n                while(element){\n                    var m = lang.exec(element.className);\n                    if (m) {\n                        return m[1].toLowerCase();\n                    }\n                    element = element.parentElement;\n                }\n                return \"none\";\n            },\n            /**\n       * Sets the Prism `language-xxxx` class of the given element.\n       *\n       * @param {Element} element\n       * @param {string} language\n       * @returns {void}\n       */ setLanguage: function(element, language) {\n                // remove all `language-xxxx` classes\n                // (this might leave behind a leading space)\n                element.className = element.className.replace(RegExp(lang, \"gi\"), \"\");\n                // add the new `language-xxxx` class\n                // (using `classList` will automatically clean up spaces for us)\n                element.classList.add(\"language-\" + language);\n            },\n            /**\n       * Returns the script element that is currently executing.\n       *\n       * This does __not__ work for line script element.\n       *\n       * @returns {HTMLScriptElement | null}\n       */ currentScript: function() {\n                if (typeof document === \"undefined\") {\n                    return null;\n                }\n                if (\"currentScript\" in document && 1 < 2 /* hack to trip TS' flow analysis */ ) {\n                    return /** @type {any} */ document.currentScript;\n                }\n                // IE11 workaround\n                // we'll get the src of the current script by parsing IE11's error stack trace\n                // this will not work for inline scripts\n                try {\n                    throw new Error();\n                } catch (err) {\n                    // Get file src url from stack. Specifically works with the format of stack traces in IE.\n                    // A stack will look like this:\n                    //\n                    // Error\n                    //    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n                    //    at Global code (http://localhost/components/prism-core.js:606:1)\n                    var src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n                    if (src) {\n                        var scripts = document.getElementsByTagName(\"script\");\n                        for(var i in scripts){\n                            if (scripts[i].src == src) {\n                                return scripts[i];\n                            }\n                        }\n                    }\n                    return null;\n                }\n            },\n            /**\n       * Returns whether a given class is active for `element`.\n       *\n       * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n       * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n       * given class is just the given class with a `no-` prefix.\n       *\n       * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n       * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n       * ancestors have the given class or the negated version of it, then the default activation will be returned.\n       *\n       * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n       * version of it, the class is considered active.\n       *\n       * @param {Element} element\n       * @param {string} className\n       * @param {boolean} [defaultActivation=false]\n       * @returns {boolean}\n       */ isActive: function(element, className, defaultActivation) {\n                var no = \"no-\" + className;\n                while(element){\n                    var classList = element.classList;\n                    if (classList.contains(className)) {\n                        return true;\n                    }\n                    if (classList.contains(no)) {\n                        return false;\n                    }\n                    element = element.parentElement;\n                }\n                return !!defaultActivation;\n            }\n        },\n        /**\n     * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n     *\n     * @namespace\n     * @memberof Prism\n     * @public\n     */ languages: {\n            /**\n       * The grammar for plain, unformatted text.\n       */ plain: plainTextGrammar,\n            plaintext: plainTextGrammar,\n            text: plainTextGrammar,\n            txt: plainTextGrammar,\n            /**\n       * Creates a deep copy of the language with the given id and appends the given tokens.\n       *\n       * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n       * will be overwritten at its original position.\n       *\n       * ## Best practices\n       *\n       * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n       * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n       * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n       *\n       * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n       * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n       *\n       * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n       * @param {Grammar} redef The new tokens to append.\n       * @returns {Grammar} The new language created.\n       * @public\n       * @example\n       * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n       *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n       *     // at its original position\n       *     'comment': { ... },\n       *     // CSS doesn't have a 'color' token, so this token will be appended\n       *     'color': /\\b(?:red|green|blue)\\b/\n       * });\n       */ extend: function(id, redef) {\n                var lang = _.util.clone(_.languages[id]);\n                for(var key in redef){\n                    lang[key] = redef[key];\n                }\n                return lang;\n            },\n            /**\n       * Inserts tokens _before_ another token in a language definition or any other grammar.\n       *\n       * ## Usage\n       *\n       * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n       * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n       * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n       * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n       * this:\n       *\n       * ```js\n       * Prism.languages.markup.style = {\n       *     // token\n       * };\n       * ```\n       *\n       * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n       * before existing tokens. For the CSS example above, you would use it like this:\n       *\n       * ```js\n       * Prism.languages.insertBefore('markup', 'cdata', {\n       *     'style': {\n       *         // token\n       *     }\n       * });\n       * ```\n       *\n       * ## Special cases\n       *\n       * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n       * will be ignored.\n       *\n       * This behavior can be used to insert tokens after `before`:\n       *\n       * ```js\n       * Prism.languages.insertBefore('markup', 'comment', {\n       *     'comment': Prism.languages.markup.comment,\n       *     // tokens after 'comment'\n       * });\n       * ```\n       *\n       * ## Limitations\n       *\n       * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n       * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n       * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n       * deleting properties which is necessary to insert at arbitrary positions.\n       *\n       * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n       * Instead, it will create a new object and replace all references to the target object with the new one. This\n       * can be done without temporarily deleting properties, so the iteration order is well-defined.\n       *\n       * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n       * you hold the target object in a variable, then the value of the variable will not change.\n       *\n       * ```js\n       * var oldMarkup = Prism.languages.markup;\n       * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n       *\n       * assert(oldMarkup !== Prism.languages.markup);\n       * assert(newMarkup === Prism.languages.markup);\n       * ```\n       *\n       * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n       * object to be modified.\n       * @param {string} before The key to insert before.\n       * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n       * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n       * object to be modified.\n       *\n       * Defaults to `Prism.languages`.\n       * @returns {Grammar} The new grammar object.\n       * @public\n       */ insertBefore: function(inside, before, insert, root) {\n                root = root || /** @type {any} */ _.languages;\n                var grammar = root[inside];\n                /** @type {Grammar} */ var ret = {};\n                for(var token in grammar){\n                    if (grammar.hasOwnProperty(token)) {\n                        if (token == before) {\n                            for(var newToken in insert){\n                                if (insert.hasOwnProperty(newToken)) {\n                                    ret[newToken] = insert[newToken];\n                                }\n                            }\n                        }\n                        // Do not insert token which also occur in insert. See #1525\n                        if (!insert.hasOwnProperty(token)) {\n                            ret[token] = grammar[token];\n                        }\n                    }\n                }\n                var old = root[inside];\n                root[inside] = ret;\n                // Update references in other language definitions\n                _.languages.DFS(_.languages, function(key, value) {\n                    if (value === old && key != inside) {\n                        this[key] = ret;\n                    }\n                });\n                return ret;\n            },\n            // Traverse a language definition with Depth First Search\n            DFS: function DFS(o, callback, type, visited) {\n                visited = visited || {};\n                var objId = _.util.objId;\n                for(var i in o){\n                    if (o.hasOwnProperty(i)) {\n                        callback.call(o, i, o[i], type || i);\n                        var property = o[i];\n                        var propertyType = _.util.type(property);\n                        if (propertyType === \"Object\" && !visited[objId(property)]) {\n                            visited[objId(property)] = true;\n                            DFS(property, callback, null, visited);\n                        } else if (propertyType === \"Array\" && !visited[objId(property)]) {\n                            visited[objId(property)] = true;\n                            DFS(property, callback, i, visited);\n                        }\n                    }\n                }\n            }\n        },\n        plugins: {},\n        /**\n     * This is the most high-level function in Prism’s API.\n     * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n     * each one of them.\n     *\n     * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n     *\n     * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n     * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n     * @memberof Prism\n     * @public\n     */ highlightAll: function(async, callback) {\n            _.highlightAllUnder(document, async, callback);\n        },\n        /**\n     * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n     * {@link Prism.highlightElement} on each one of them.\n     *\n     * The following hooks will be run:\n     * 1. `before-highlightall`\n     * 2. `before-all-elements-highlight`\n     * 3. All hooks of {@link Prism.highlightElement} for each element.\n     *\n     * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n     * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n     * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n     * @memberof Prism\n     * @public\n     */ highlightAllUnder: function(container, async, callback) {\n            var env = {\n                callback: callback,\n                container: container,\n                selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n            };\n            _.hooks.run(\"before-highlightall\", env);\n            env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n            _.hooks.run(\"before-all-elements-highlight\", env);\n            for(var i = 0, element; element = env.elements[i++];){\n                _.highlightElement(element, async === true, env.callback);\n            }\n        },\n        /**\n     * Highlights the code inside a single element.\n     *\n     * The following hooks will be run:\n     * 1. `before-sanity-check`\n     * 2. `before-highlight`\n     * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n     * 4. `before-insert`\n     * 5. `after-highlight`\n     * 6. `complete`\n     *\n     * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n     * the element's language.\n     *\n     * @param {Element} element The element containing the code.\n     * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n     * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n     * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n     * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n     *\n     * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n     * asynchronous highlighting to work. You can build your own bundle on the\n     * [Download page](https://prismjs.com/download.html).\n     * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n     * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n     * @memberof Prism\n     * @public\n     */ highlightElement: function(element, async, callback) {\n            // Find language\n            var language = _.util.getLanguage(element);\n            var grammar = _.languages[language];\n            // Set language on the element, if not present\n            _.util.setLanguage(element, language);\n            // Set language on the parent, for styling\n            var parent = element.parentElement;\n            if (parent && parent.nodeName.toLowerCase() === \"pre\") {\n                _.util.setLanguage(parent, language);\n            }\n            var code = element.textContent;\n            var env = {\n                element: element,\n                language: language,\n                grammar: grammar,\n                code: code\n            };\n            function insertHighlightedCode(highlightedCode) {\n                env.highlightedCode = highlightedCode;\n                _.hooks.run(\"before-insert\", env);\n                env.element.innerHTML = env.highlightedCode;\n                _.hooks.run(\"after-highlight\", env);\n                _.hooks.run(\"complete\", env);\n                callback && callback.call(env.element);\n            }\n            _.hooks.run(\"before-sanity-check\", env);\n            // plugins may change/add the parent/element\n            parent = env.element.parentElement;\n            if (parent && parent.nodeName.toLowerCase() === \"pre\" && !parent.hasAttribute(\"tabindex\")) {\n                parent.setAttribute(\"tabindex\", \"0\");\n            }\n            if (!env.code) {\n                _.hooks.run(\"complete\", env);\n                callback && callback.call(env.element);\n                return;\n            }\n            _.hooks.run(\"before-highlight\", env);\n            if (!env.grammar) {\n                insertHighlightedCode(_.util.encode(env.code));\n                return;\n            }\n            if (async && _self.Worker) {\n                var worker = new Worker(_.filename);\n                worker.onmessage = function(evt) {\n                    insertHighlightedCode(evt.data);\n                };\n                worker.postMessage(JSON.stringify({\n                    language: env.language,\n                    code: env.code,\n                    immediateClose: true\n                }));\n            } else {\n                insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n            }\n        },\n        /**\n     * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n     * and the language definitions to use, and returns a string with the HTML produced.\n     *\n     * The following hooks will be run:\n     * 1. `before-tokenize`\n     * 2. `after-tokenize`\n     * 3. `wrap`: On each {@link Token}.\n     *\n     * @param {string} text A string with the code to be highlighted.\n     * @param {Grammar} grammar An object containing the tokens to use.\n     *\n     * Usually a language definition like `Prism.languages.markup`.\n     * @param {string} language The name of the language definition passed to `grammar`.\n     * @returns {string} The highlighted HTML.\n     * @memberof Prism\n     * @public\n     * @example\n     * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n     */ highlight: function(text, grammar, language) {\n            var env = {\n                code: text,\n                grammar: grammar,\n                language: language\n            };\n            _.hooks.run(\"before-tokenize\", env);\n            if (!env.grammar) {\n                throw new Error('The language \"' + env.language + '\" has no grammar.');\n            }\n            env.tokens = _.tokenize(env.code, env.grammar);\n            _.hooks.run(\"after-tokenize\", env);\n            return Token.stringify(_.util.encode(env.tokens), env.language);\n        },\n        /**\n     * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n     * and the language definitions to use, and returns an array with the tokenized code.\n     *\n     * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n     *\n     * This method could be useful in other contexts as well, as a very crude parser.\n     *\n     * @param {string} text A string with the code to be highlighted.\n     * @param {Grammar} grammar An object containing the tokens to use.\n     *\n     * Usually a language definition like `Prism.languages.markup`.\n     * @returns {TokenStream} An array of strings and tokens, a token stream.\n     * @memberof Prism\n     * @public\n     * @example\n     * let code = `var foo = 0;`;\n     * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n     * tokens.forEach(token => {\n     *     if (token instanceof Prism.Token && token.type === 'number') {\n     *         console.log(`Found numeric literal: ${token.content}`);\n     *     }\n     * });\n     */ tokenize: function(text, grammar) {\n            var rest = grammar.rest;\n            if (rest) {\n                for(var token in rest){\n                    grammar[token] = rest[token];\n                }\n                delete grammar.rest;\n            }\n            var tokenList = new LinkedList();\n            addAfter(tokenList, tokenList.head, text);\n            matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n            return toArray(tokenList);\n        },\n        /**\n     * @namespace\n     * @memberof Prism\n     * @public\n     */ hooks: {\n            all: {},\n            /**\n       * Adds the given callback to the list of callbacks for the given hook.\n       *\n       * The callback will be invoked when the hook it is registered for is run.\n       * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n       *\n       * One callback function can be registered to multiple hooks and the same hook multiple times.\n       *\n       * @param {string} name The name of the hook.\n       * @param {HookCallback} callback The callback function which is given environment variables.\n       * @public\n       */ add: function(name, callback) {\n                var hooks = _.hooks.all;\n                hooks[name] = hooks[name] || [];\n                hooks[name].push(callback);\n            },\n            /**\n       * Runs a hook invoking all registered callbacks with the given environment variables.\n       *\n       * Callbacks will be invoked synchronously and in the order in which they were registered.\n       *\n       * @param {string} name The name of the hook.\n       * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n       * @public\n       */ run: function(name, env) {\n                var callbacks = _.hooks.all[name];\n                if (!callbacks || !callbacks.length) {\n                    return;\n                }\n                for(var i = 0, callback; callback = callbacks[i++];){\n                    callback(env);\n                }\n            }\n        },\n        Token: Token\n    };\n    _self.Prism = _;\n    // Typescript note:\n    // The following can be used to import the Token type in JSDoc:\n    //\n    //   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n    /**\n   * Creates a new token.\n   *\n   * @param {string} type See {@link Token#type type}\n   * @param {string | TokenStream} content See {@link Token#content content}\n   * @param {string|string[]} [alias] The alias(es) of the token.\n   * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n   * @class\n   * @global\n   * @public\n   */ function Token(type, content, alias, matchedStr) {\n        /**\n     * The type of the token.\n     *\n     * This is usually the key of a pattern in a {@link Grammar}.\n     *\n     * @type {string}\n     * @see GrammarToken\n     * @public\n     */ this.type = type;\n        /**\n     * The strings or tokens contained by this token.\n     *\n     * This will be a token stream if the pattern matched also defined an `inside` grammar.\n     *\n     * @type {string | TokenStream}\n     * @public\n     */ this.content = content;\n        /**\n     * The alias(es) of the token.\n     *\n     * @type {string|string[]}\n     * @see GrammarToken\n     * @public\n     */ this.alias = alias;\n        // Copy of the full string this token was created from\n        this.length = (matchedStr || \"\").length | 0;\n    }\n    /**\n   * A token stream is an array of strings and {@link Token Token} objects.\n   *\n   * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n   * them.\n   *\n   * 1. No adjacent strings.\n   * 2. No empty strings.\n   *\n   *    The only exception here is the token stream that only contains the empty string and nothing else.\n   *\n   * @typedef {Array<string | Token>} TokenStream\n   * @global\n   * @public\n   */ /**\n   * Converts the given token or token stream to an HTML representation.\n   *\n   * The following hooks will be run:\n   * 1. `wrap`: On each {@link Token}.\n   *\n   * @param {string | Token | TokenStream} o The token or token stream to be converted.\n   * @param {string} language The name of current language.\n   * @returns {string} The HTML representation of the token or token stream.\n   * @memberof Token\n   * @static\n   */ Token.stringify = function stringify(o, language) {\n        if (typeof o == \"string\") {\n            return o;\n        }\n        if (Array.isArray(o)) {\n            var s = \"\";\n            o.forEach(function(e) {\n                s += stringify(e, language);\n            });\n            return s;\n        }\n        var env = {\n            type: o.type,\n            content: stringify(o.content, language),\n            tag: \"span\",\n            classes: [\n                \"token\",\n                o.type\n            ],\n            attributes: {},\n            language: language\n        };\n        var aliases = o.alias;\n        if (aliases) {\n            if (Array.isArray(aliases)) {\n                Array.prototype.push.apply(env.classes, aliases);\n            } else {\n                env.classes.push(aliases);\n            }\n        }\n        _.hooks.run(\"wrap\", env);\n        var attributes = \"\";\n        for(var name in env.attributes){\n            attributes += \" \" + name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n        }\n        return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + attributes + \">\" + env.content + \"</\" + env.tag + \">\";\n    };\n    /**\n   * @param {RegExp} pattern\n   * @param {number} pos\n   * @param {string} text\n   * @param {boolean} lookbehind\n   * @returns {RegExpExecArray | null}\n   */ function matchPattern(pattern, pos, text, lookbehind) {\n        pattern.lastIndex = pos;\n        var match = pattern.exec(text);\n        if (match && lookbehind && match[1]) {\n            // change the match to remove the text matched by the Prism lookbehind group\n            var lookbehindLength = match[1].length;\n            match.index += lookbehindLength;\n            match[0] = match[0].slice(lookbehindLength);\n        }\n        return match;\n    }\n    /**\n   * @param {string} text\n   * @param {LinkedList<string | Token>} tokenList\n   * @param {any} grammar\n   * @param {LinkedListNode<string | Token>} startNode\n   * @param {number} startPos\n   * @param {RematchOptions} [rematch]\n   * @returns {void}\n   * @private\n   *\n   * @typedef RematchOptions\n   * @property {string} cause\n   * @property {number} reach\n   */ function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n        for(var token in grammar){\n            if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n                continue;\n            }\n            var patterns = grammar[token];\n            patterns = Array.isArray(patterns) ? patterns : [\n                patterns\n            ];\n            for(var j = 0; j < patterns.length; ++j){\n                if (rematch && rematch.cause == token + \",\" + j) {\n                    return;\n                }\n                var patternObj = patterns[j];\n                var inside = patternObj.inside;\n                var lookbehind = !!patternObj.lookbehind;\n                var greedy = !!patternObj.greedy;\n                var alias = patternObj.alias;\n                if (greedy && !patternObj.pattern.global) {\n                    // Without the global flag, lastIndex won't work\n                    var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n                    patternObj.pattern = RegExp(patternObj.pattern.source, flags + \"g\");\n                }\n                /** @type {RegExp} */ var pattern = patternObj.pattern || patternObj;\n                for(// iterate the token list and keep track of the current token/string position\n                var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next){\n                    if (rematch && pos >= rematch.reach) {\n                        break;\n                    }\n                    var str = currentNode.value;\n                    if (tokenList.length > text.length) {\n                        // Something went terribly wrong, ABORT, ABORT!\n                        return;\n                    }\n                    if (str instanceof Token) {\n                        continue;\n                    }\n                    var removeCount = 1; // this is the to parameter of removeBetween\n                    var match;\n                    if (greedy) {\n                        match = matchPattern(pattern, pos, text, lookbehind);\n                        if (!match || match.index >= text.length) {\n                            break;\n                        }\n                        var from = match.index;\n                        var to = match.index + match[0].length;\n                        var p = pos;\n                        // find the node that contains the match\n                        p += currentNode.value.length;\n                        while(from >= p){\n                            currentNode = currentNode.next;\n                            p += currentNode.value.length;\n                        }\n                        // adjust pos (and p)\n                        p -= currentNode.value.length;\n                        pos = p;\n                        // the current node is a Token, then the match starts inside another Token, which is invalid\n                        if (currentNode.value instanceof Token) {\n                            continue;\n                        }\n                        // find the last node which is affected by this match\n                        for(var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === \"string\"); k = k.next){\n                            removeCount++;\n                            p += k.value.length;\n                        }\n                        removeCount--;\n                        // replace with the new match\n                        str = text.slice(pos, p);\n                        match.index -= pos;\n                    } else {\n                        match = matchPattern(pattern, 0, str, lookbehind);\n                        if (!match) {\n                            continue;\n                        }\n                    }\n                    // eslint-disable-next-line no-redeclare\n                    var from = match.index;\n                    var matchStr = match[0];\n                    var before = str.slice(0, from);\n                    var after = str.slice(from + matchStr.length);\n                    var reach = pos + str.length;\n                    if (rematch && reach > rematch.reach) {\n                        rematch.reach = reach;\n                    }\n                    var removeFrom = currentNode.prev;\n                    if (before) {\n                        removeFrom = addAfter(tokenList, removeFrom, before);\n                        pos += before.length;\n                    }\n                    removeRange(tokenList, removeFrom, removeCount);\n                    var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n                    currentNode = addAfter(tokenList, removeFrom, wrapped);\n                    if (after) {\n                        addAfter(tokenList, currentNode, after);\n                    }\n                    if (removeCount > 1) {\n                        // at least one Token object was removed, so we have to do some rematching\n                        // this can only happen if the current pattern is greedy\n                        /** @type {RematchOptions} */ var nestedRematch = {\n                            cause: token + \",\" + j,\n                            reach: reach\n                        };\n                        matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n                        // the reach might have been extended because of the rematching\n                        if (rematch && nestedRematch.reach > rematch.reach) {\n                            rematch.reach = nestedRematch.reach;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n   * @typedef LinkedListNode\n   * @property {T} value\n   * @property {LinkedListNode<T> | null} prev The previous node.\n   * @property {LinkedListNode<T> | null} next The next node.\n   * @template T\n   * @private\n   */ /**\n   * @template T\n   * @private\n   */ function LinkedList() {\n        /** @type {LinkedListNode<T>} */ var head = {\n            value: null,\n            prev: null,\n            next: null\n        };\n        /** @type {LinkedListNode<T>} */ var tail = {\n            value: null,\n            prev: head,\n            next: null\n        };\n        head.next = tail;\n        /** @type {LinkedListNode<T>} */ this.head = head;\n        /** @type {LinkedListNode<T>} */ this.tail = tail;\n        this.length = 0;\n    }\n    /**\n   * Adds a new node with the given value to the list.\n   *\n   * @param {LinkedList<T>} list\n   * @param {LinkedListNode<T>} node\n   * @param {T} value\n   * @returns {LinkedListNode<T>} The added node.\n   * @template T\n   */ function addAfter(list, node, value) {\n        // assumes that node != list.tail && values.length >= 0\n        var next = node.next;\n        var newNode = {\n            value: value,\n            prev: node,\n            next: next\n        };\n        node.next = newNode;\n        next.prev = newNode;\n        list.length++;\n        return newNode;\n    }\n    /**\n   * Removes `count` nodes after the given node. The given node will not be removed.\n   *\n   * @param {LinkedList<T>} list\n   * @param {LinkedListNode<T>} node\n   * @param {number} count\n   * @template T\n   */ function removeRange(list, node, count) {\n        var next = node.next;\n        for(var i = 0; i < count && next !== list.tail; i++){\n            next = next.next;\n        }\n        node.next = next;\n        next.prev = node;\n        list.length -= i;\n    }\n    /**\n   * @param {LinkedList<T>} list\n   * @returns {T[]}\n   * @template T\n   */ function toArray(list) {\n        var array = [];\n        var node = list.head.next;\n        while(node !== list.tail){\n            array.push(node.value);\n            node = node.next;\n        }\n        return array;\n    }\n    if (!_self.document) {\n        if (!_self.addEventListener) {\n            // in Node.js\n            return _;\n        }\n        if (!_.disableWorkerMessageHandler) {\n            // In worker\n            _self.addEventListener(\"message\", function(evt) {\n                var message = JSON.parse(evt.data);\n                var lang = message.language;\n                var code = message.code;\n                var immediateClose = message.immediateClose;\n                _self.postMessage(_.highlight(code, _.languages[lang], lang));\n                if (immediateClose) {\n                    _self.close();\n                }\n            }, false);\n        }\n        return _;\n    }\n    // Get current script and highlight\n    var script = _.util.currentScript();\n    if (script) {\n        _.filename = script.src;\n        if (script.hasAttribute(\"data-manual\")) {\n            _.manual = true;\n        }\n    }\n    function highlightAutomaticallyCallback() {\n        if (!_.manual) {\n            _.highlightAll();\n        }\n    }\n    if (!_.manual) {\n        // If the document state is \"loading\", then we'll use DOMContentLoaded.\n        // If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n        // DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n        // might take longer one animation frame to execute which can create a race condition where only some plugins have\n        // been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n        // See https://github.com/PrismJS/prism/issues/2102\n        var readyState = document.readyState;\n        if (readyState === \"loading\" || readyState === \"interactive\" && script && script.defer) {\n            document.addEventListener(\"DOMContentLoaded\", highlightAutomaticallyCallback);\n        } else {\n            if (window.requestAnimationFrame) {\n                window.requestAnimationFrame(highlightAutomaticallyCallback);\n            } else {\n                window.setTimeout(highlightAutomaticallyCallback, 16);\n            }\n        }\n    }\n    return _;\n}(_self);\n// some additional documentation/types\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */ /**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */ /**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */ /**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */ /* **********************************************\n     Begin prism-markup.js\n********************************************** */ Prism.languages.markup = {\n    \"comment\": {\n        pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n        greedy: true\n    },\n    \"prolog\": {\n        pattern: /<\\?[\\s\\S]+?\\?>/,\n        greedy: true\n    },\n    \"doctype\": {\n        // https://www.w3.org/TR/xml/#NT-doctypedecl\n        pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n        greedy: true,\n        inside: {\n            \"internal-subset\": {\n                pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n                lookbehind: true,\n                greedy: true,\n                inside: null // see below\n            },\n            \"string\": {\n                pattern: /\"[^\"]*\"|'[^']*'/,\n                greedy: true\n            },\n            \"punctuation\": /^<!|>$|[[\\]]/,\n            \"doctype-tag\": /^DOCTYPE/i,\n            \"name\": /[^\\s<>'\"]+/\n        }\n    },\n    \"cdata\": {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        greedy: true\n    },\n    \"tag\": {\n        pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n        greedy: true,\n        inside: {\n            \"tag\": {\n                pattern: /^<\\/?[^\\s>\\/]+/,\n                inside: {\n                    \"punctuation\": /^<\\/?/,\n                    \"namespace\": /^[^\\s>\\/:]+:/\n                }\n            },\n            \"special-attr\": [],\n            \"attr-value\": {\n                pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n                inside: {\n                    \"punctuation\": [\n                        {\n                            pattern: /^=/,\n                            alias: \"attr-equals\"\n                        },\n                        {\n                            pattern: /^(\\s*)[\"']|[\"']$/,\n                            lookbehind: true\n                        }\n                    ]\n                }\n            },\n            \"punctuation\": /\\/?>/,\n            \"attr-name\": {\n                pattern: /[^\\s>\\/]+/,\n                inside: {\n                    \"namespace\": /^[^\\s>\\/:]+:/\n                }\n            }\n        }\n    },\n    \"entity\": [\n        {\n            pattern: /&[\\da-z]{1,8};/i,\n            alias: \"named-entity\"\n        },\n        /&#x?[\\da-f]{1,8};/i\n    ]\n};\nPrism.languages.markup[\"tag\"].inside[\"attr-value\"].inside[\"entity\"] = Prism.languages.markup[\"entity\"];\nPrism.languages.markup[\"doctype\"].inside[\"internal-subset\"].inside = Prism.languages.markup;\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add(\"wrap\", function(env) {\n    if (env.type === \"entity\") {\n        env.attributes[\"title\"] = env.content.replace(/&amp;/, \"&\");\n    }\n});\nObject.defineProperty(Prism.languages.markup.tag, \"addInlined\", {\n    /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */ value: function addInlined(tagName, lang) {\n        var includedCdataInside = {};\n        includedCdataInside[\"language-\" + lang] = {\n            pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n            lookbehind: true,\n            inside: Prism.languages[lang]\n        };\n        includedCdataInside[\"cdata\"] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n        var inside = {\n            \"included-cdata\": {\n                pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n                inside: includedCdataInside\n            }\n        };\n        inside[\"language-\" + lang] = {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages[lang]\n        };\n        var def = {};\n        def[tagName] = {\n            pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function() {\n                return tagName;\n            }), \"i\"),\n            lookbehind: true,\n            greedy: true,\n            inside: inside\n        };\n        Prism.languages.insertBefore(\"markup\", \"cdata\", def);\n    }\n});\nObject.defineProperty(Prism.languages.markup.tag, \"addAttribute\", {\n    /**\n   * Adds an pattern to highlight languages embedded in HTML attributes.\n   *\n   * An example of an inlined language is CSS with `style` attributes.\n   *\n   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addAttribute('style', 'css');\n   */ value: function(attrName, lang) {\n        Prism.languages.markup.tag.inside[\"special-attr\"].push({\n            pattern: RegExp(/(^|[\"'\\s])/.source + \"(?:\" + attrName + \")\" + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, \"i\"),\n            lookbehind: true,\n            inside: {\n                \"attr-name\": /^[^\\s=]+/,\n                \"attr-value\": {\n                    pattern: /=[\\s\\S]+/,\n                    inside: {\n                        \"value\": {\n                            pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                            lookbehind: true,\n                            alias: [\n                                lang,\n                                \"language-\" + lang\n                            ],\n                            inside: Prism.languages[lang]\n                        },\n                        \"punctuation\": [\n                            {\n                                pattern: /^=/,\n                                alias: \"attr-equals\"\n                            },\n                            /\"|'/\n                        ]\n                    }\n                }\n            }\n        });\n    }\n});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\nPrism.languages.xml = Prism.languages.extend(\"markup\", {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n/* **********************************************\n     Begin prism-css.js\n********************************************** */ (function(Prism) {\n    var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n    Prism.languages.css = {\n        \"comment\": /\\/\\*[\\s\\S]*?\\*\\//,\n        \"atrule\": {\n            pattern: RegExp(\"@[\\\\w-](?:\" + /[^;{\\s\"']|\\s+(?!\\s)/.source + \"|\" + string.source + \")*?\" + /(?:;|(?=\\s*\\{))/.source),\n            inside: {\n                \"rule\": /^@[\\w-]+/,\n                \"selector-function-argument\": {\n                    pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n                    lookbehind: true,\n                    alias: \"selector\"\n                },\n                \"keyword\": {\n                    pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n                    lookbehind: true\n                }\n            }\n        },\n        \"url\": {\n            // https://drafts.csswg.org/css-values-3/#urls\n            pattern: RegExp(\"\\\\burl\\\\((?:\" + string.source + \"|\" + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + \")\\\\)\", \"i\"),\n            greedy: true,\n            inside: {\n                \"function\": /^url/i,\n                \"punctuation\": /^\\(|\\)$/,\n                \"string\": {\n                    pattern: RegExp(\"^\" + string.source + \"$\"),\n                    alias: \"url\"\n                }\n            }\n        },\n        \"selector\": {\n            pattern: RegExp(\"(^|[{}\\\\s])[^{}\\\\s](?:[^{};\\\"'\\\\s]|\\\\s+(?![\\\\s{])|\" + string.source + \")*(?=\\\\s*\\\\{)\"),\n            lookbehind: true\n        },\n        \"string\": {\n            pattern: string,\n            greedy: true\n        },\n        \"property\": {\n            pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n            lookbehind: true\n        },\n        \"important\": /!important\\b/i,\n        \"function\": {\n            pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n            lookbehind: true\n        },\n        \"punctuation\": /[(){};:,]/\n    };\n    Prism.languages.css[\"atrule\"].inside.rest = Prism.languages.css;\n    var markup = Prism.languages.markup;\n    if (markup) {\n        markup.tag.addInlined(\"style\", \"css\");\n        markup.tag.addAttribute(\"style\", \"css\");\n    }\n})(Prism);\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */ Prism.languages.clike = {\n    \"comment\": [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: true,\n            greedy: true\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: true,\n            greedy: true\n        }\n    ],\n    \"string\": {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n    },\n    \"class-name\": {\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n        lookbehind: true,\n        inside: {\n            \"punctuation\": /[.\\\\]/\n        }\n    },\n    \"keyword\": /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"function\": /\\b\\w+(?=\\()/,\n    \"number\": /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    \"operator\": /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n    \"punctuation\": /[{}[\\];(),.:]/\n};\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */ Prism.languages.javascript = Prism.languages.extend(\"clike\", {\n    \"class-name\": [\n        Prism.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n            lookbehind: true\n        }\n    ],\n    \"keyword\": [\n        {\n            pattern: /((?:^|\\})\\s*)catch\\b/,\n            lookbehind: true\n        },\n        {\n            pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: true\n        }\n    ],\n    // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n    \"function\": /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    \"number\": {\n        pattern: RegExp(/(^|[^\\w$])/.source + \"(?:\" + // constant\n        (/NaN|Infinity/.source + \"|\" + // binary integer\n        /0[bB][01]+(?:_[01]+)*n?/.source + \"|\" + // octal integer\n        /0[oO][0-7]+(?:_[0-7]+)*n?/.source + \"|\" + // hexadecimal integer\n        /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + \"|\" + // decimal bigint\n        /\\d+(?:_\\d+)*n/.source + \"|\" + // decimal number (integer or float) but no bigint\n        /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + \")\" + /(?![\\w$])/.source),\n        lookbehind: true\n    },\n    \"operator\": /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nPrism.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore(\"javascript\", \"keyword\", {\n    \"regex\": {\n        pattern: RegExp(// lookbehind\n        // eslint-disable-next-line regexp/no-dupe-characters-character-class\n        /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source + // Regex pattern:\n        // There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\n        // classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\n        // with the only syntax, so we have to define 2 different regex patterns.\n        /\\//.source + \"(?:\" + /(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source + \"|\" + // `v` flag syntax. This supports 3 levels of nested character classes.\n        /(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + \")\" + // lookahead\n        /(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n            \"regex-source\": {\n                pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n                lookbehind: true,\n                alias: \"language-regex\",\n                inside: Prism.languages.regex\n            },\n            \"regex-delimiter\": /^\\/|\\/$/,\n            \"regex-flags\": /^[a-z]+$/\n        }\n    },\n    // This must be declared before keyword because we use \"function\" inside the look-forward\n    \"function-variable\": {\n        pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n        alias: \"function\"\n    },\n    \"parameter\": [\n        {\n            pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        },\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        }\n    ],\n    \"constant\": /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore(\"javascript\", \"string\", {\n    \"hashbang\": {\n        pattern: /^#!.*/,\n        greedy: true,\n        alias: \"comment\"\n    },\n    \"template-string\": {\n        pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n        greedy: true,\n        inside: {\n            \"template-punctuation\": {\n                pattern: /^`|`$/,\n                alias: \"string\"\n            },\n            \"interpolation\": {\n                pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n                lookbehind: true,\n                inside: {\n                    \"interpolation-punctuation\": {\n                        pattern: /^\\$\\{|\\}$/,\n                        alias: \"punctuation\"\n                    },\n                    rest: Prism.languages.javascript\n                }\n            },\n            \"string\": /[\\s\\S]+/\n        }\n    },\n    \"string-property\": {\n        pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n        lookbehind: true,\n        greedy: true,\n        alias: \"property\"\n    }\n});\nPrism.languages.insertBefore(\"javascript\", \"operator\", {\n    \"literal-property\": {\n        pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n        lookbehind: true,\n        alias: \"property\"\n    }\n});\nif (Prism.languages.markup) {\n    Prism.languages.markup.tag.addInlined(\"script\", \"javascript\");\n    // add attribute support for all DOM events.\n    // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n    Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, \"javascript\");\n}\nPrism.languages.js = Prism.languages.javascript;\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */ (function() {\n    if (typeof Prism === \"undefined\" || typeof document === \"undefined\") {\n        return;\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n    }\n    var LOADING_MESSAGE = \"Loading…\";\n    var FAILURE_MESSAGE = function(status, message) {\n        return \"✖ Error \" + status + \" while fetching file: \" + message;\n    };\n    var FAILURE_EMPTY_MESSAGE = \"✖ Error: File does not exist or is empty\";\n    var EXTENSIONS = {\n        \"js\": \"javascript\",\n        \"py\": \"python\",\n        \"rb\": \"ruby\",\n        \"ps1\": \"powershell\",\n        \"psm1\": \"powershell\",\n        \"sh\": \"bash\",\n        \"bat\": \"batch\",\n        \"h\": \"c\",\n        \"tex\": \"latex\"\n    };\n    var STATUS_ATTR = \"data-src-status\";\n    var STATUS_LOADING = \"loading\";\n    var STATUS_LOADED = \"loaded\";\n    var STATUS_FAILED = \"failed\";\n    var SELECTOR = \"pre[data-src]:not([\" + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])' + \":not([\" + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\n    /**\n   * Loads the given file.\n   *\n   * @param {string} src The URL or path of the source file to load.\n   * @param {(result: string) => void} success\n   * @param {(reason: string) => void} error\n   */ function loadFile(src, success, error) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, true);\n        xhr.onreadystatechange = function() {\n            if (xhr.readyState == 4) {\n                if (xhr.status < 400 && xhr.responseText) {\n                    success(xhr.responseText);\n                } else {\n                    if (xhr.status >= 400) {\n                        error(FAILURE_MESSAGE(xhr.status, xhr.statusText));\n                    } else {\n                        error(FAILURE_EMPTY_MESSAGE);\n                    }\n                }\n            }\n        };\n        xhr.send(null);\n    }\n    /**\n   * Parses the given range.\n   *\n   * This returns a range with inclusive ends.\n   *\n   * @param {string | null | undefined} range\n   * @returns {[number, number | undefined] | undefined}\n   */ function parseRange(range) {\n        var m = /^\\s*(\\d+)\\s*(?:(,)\\s*(?:(\\d+)\\s*)?)?$/.exec(range || \"\");\n        if (m) {\n            var start = Number(m[1]);\n            var comma = m[2];\n            var end = m[3];\n            if (!comma) {\n                return [\n                    start,\n                    start\n                ];\n            }\n            if (!end) {\n                return [\n                    start,\n                    undefined\n                ];\n            }\n            return [\n                start,\n                Number(end)\n            ];\n        }\n        return undefined;\n    }\n    Prism.hooks.add(\"before-highlightall\", function(env) {\n        env.selector += \", \" + SELECTOR;\n    });\n    Prism.hooks.add(\"before-sanity-check\", function(env) {\n        var pre = /** @type {HTMLPreElement} */ env.element;\n        if (pre.matches(SELECTOR)) {\n            env.code = \"\"; // fast-path the whole thing and go to complete\n            pre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\n            // add code element with loading message\n            var code = pre.appendChild(document.createElement(\"CODE\"));\n            code.textContent = LOADING_MESSAGE;\n            var src = pre.getAttribute(\"data-src\");\n            var language = env.language;\n            if (language === \"none\") {\n                // the language might be 'none' because there is no language set;\n                // in this case, we want to use the extension as the language\n                var extension = (/\\.(\\w+)$/.exec(src) || [\n                    ,\n                    \"none\"\n                ])[1];\n                language = EXTENSIONS[extension] || extension;\n            }\n            // set language classes\n            Prism.util.setLanguage(code, language);\n            Prism.util.setLanguage(pre, language);\n            // preload the language\n            var autoloader = Prism.plugins.autoloader;\n            if (autoloader) {\n                autoloader.loadLanguages(language);\n            }\n            // load file\n            loadFile(src, function(text) {\n                // mark as loaded\n                pre.setAttribute(STATUS_ATTR, STATUS_LOADED);\n                // handle data-range\n                var range = parseRange(pre.getAttribute(\"data-range\"));\n                if (range) {\n                    var lines = text.split(/\\r\\n?|\\n/g);\n                    // the range is one-based and inclusive on both ends\n                    var start = range[0];\n                    var end = range[1] == null ? lines.length : range[1];\n                    if (start < 0) {\n                        start += lines.length;\n                    }\n                    start = Math.max(0, Math.min(start - 1, lines.length));\n                    if (end < 0) {\n                        end += lines.length;\n                    }\n                    end = Math.max(0, Math.min(end, lines.length));\n                    text = lines.slice(start, end).join(\"\\n\");\n                    // add data-start for line numbers\n                    if (!pre.hasAttribute(\"data-start\")) {\n                        pre.setAttribute(\"data-start\", String(start + 1));\n                    }\n                }\n                // highlight code\n                code.textContent = text;\n                Prism.highlightElement(code);\n            }, function(error) {\n                // mark as failed\n                pre.setAttribute(STATUS_ATTR, STATUS_FAILED);\n                code.textContent = error;\n            });\n        }\n    });\n    Prism.plugins.fileHighlight = {\n        /**\n     * Executes the File Highlight plugin for all matching `pre` elements under the given container.\n     *\n     * Note: Elements which are already loaded or currently loading will not be touched by this method.\n     *\n     * @param {ParentNode} [container=document]\n     */ highlight: function highlight(container) {\n            var elements = (container || document).querySelectorAll(SELECTOR);\n            for(var i = 0, element; element = elements[i++];){\n                Prism.highlightElement(element);\n            }\n        }\n    };\n    var logged = false;\n    /** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */ Prism.fileHighlight = function() {\n        if (!logged) {\n            console.warn(\"Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.\");\n            logged = true;\n        }\n        Prism.plugins.fileHighlight.highlight.apply(this, arguments);\n    };\n})();\nPrism.languages.clike = {\n    \"comment\": [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: true,\n            greedy: true\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: true,\n            greedy: true\n        }\n    ],\n    \"string\": {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n    },\n    \"class-name\": {\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n        lookbehind: true,\n        inside: {\n            \"punctuation\": /[.\\\\]/\n        }\n    },\n    \"keyword\": /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"function\": /\\b\\w+(?=\\()/,\n    \"number\": /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    \"operator\": /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n    \"punctuation\": /[{}[\\];(),.:]/\n};\nPrism.languages.c = Prism.languages.extend(\"clike\", {\n    \"comment\": {\n        pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        greedy: true\n    },\n    \"string\": {\n        // https://en.cppreference.com/w/c/language/string_literal\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n    },\n    \"class-name\": {\n        pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n        lookbehind: true\n    },\n    \"keyword\": /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    \"number\": /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    \"operator\": />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nPrism.languages.insertBefore(\"c\", \"string\", {\n    \"char\": {\n        // https://en.cppreference.com/w/c/language/character_constant\n        pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n        greedy: true\n    }\n});\nPrism.languages.insertBefore(\"c\", \"string\", {\n    \"macro\": {\n        // allow for multiline macro definitions\n        // spaces after the # character compile fine with gcc\n        pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n        lookbehind: true,\n        greedy: true,\n        alias: \"property\",\n        inside: {\n            \"string\": [\n                {\n                    // highlight the path of the include statement as a string\n                    pattern: /^(#\\s*include\\s*)<[^>]+>/,\n                    lookbehind: true\n                },\n                Prism.languages.c[\"string\"]\n            ],\n            \"char\": Prism.languages.c[\"char\"],\n            \"comment\": Prism.languages.c[\"comment\"],\n            \"macro-name\": [\n                {\n                    pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n                    lookbehind: true\n                },\n                {\n                    pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n                    lookbehind: true,\n                    alias: \"function\"\n                }\n            ],\n            // highlight macro directives as keywords\n            \"directive\": {\n                pattern: /^(#\\s*)[a-z]+/,\n                lookbehind: true,\n                alias: \"keyword\"\n            },\n            \"directive-hash\": /^#/,\n            \"punctuation\": /##|\\\\(?=[\\r\\n])/,\n            \"expression\": {\n                pattern: /\\S[\\s\\S]*/,\n                inside: Prism.languages.c\n            }\n        }\n    }\n});\nPrism.languages.insertBefore(\"c\", \"function\", {\n    // highlight predefined macros as constants\n    \"constant\": /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n});\ndelete Prism.languages.c[\"boolean\"];\n(function(Prism) {\n    var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n    var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function() {\n        return keyword.source;\n    });\n    Prism.languages.cpp = Prism.languages.extend(\"c\", {\n        \"class-name\": [\n            {\n                pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function() {\n                    return keyword.source;\n                })),\n                lookbehind: true\n            },\n            // This is intended to capture the class name of method implementations like:\n            //   void foo::bar() const {}\n            // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n            // it starts with an uppercase letter. This approximation should give decent results.\n            /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,\n            // This will capture the class name before destructors like:\n            //   Foo::~Foo() {}\n            /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,\n            // This also intends to capture the class name of method implementations but here the class has template\n            // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n            /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n        ],\n        \"keyword\": keyword,\n        \"number\": {\n            pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n            greedy: true\n        },\n        \"operator\": />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n        \"boolean\": /\\b(?:false|true)\\b/\n    });\n    Prism.languages.insertBefore(\"cpp\", \"string\", {\n        \"module\": {\n            // https://en.cppreference.com/w/cpp/language/modules\n            pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + \"(?:\" + // header-name\n            /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + \"|\" + // module name or partition or both\n            /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function() {\n                return modName;\n            }) + \")\"),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"string\": /^[<\"][\\s\\S]+/,\n                \"operator\": /:/,\n                \"punctuation\": /\\./\n            }\n        },\n        \"raw-string\": {\n            pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n            alias: \"string\",\n            greedy: true\n        }\n    });\n    Prism.languages.insertBefore(\"cpp\", \"keyword\", {\n        \"generic-function\": {\n            pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n            inside: {\n                \"function\": /^\\w+/,\n                \"generic\": {\n                    pattern: /<[\\s\\S]+/,\n                    alias: \"class-name\",\n                    inside: Prism.languages.cpp\n                }\n            }\n        }\n    });\n    Prism.languages.insertBefore(\"cpp\", \"operator\", {\n        \"double-colon\": {\n            pattern: /::/,\n            alias: \"punctuation\"\n        }\n    });\n    Prism.languages.insertBefore(\"cpp\", \"class-name\", {\n        // the base clause is an optional list of parent classes\n        // https://en.cppreference.com/w/cpp/language/class\n        \"base-clause\": {\n            pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n            lookbehind: true,\n            greedy: true,\n            inside: Prism.languages.extend(\"cpp\", {})\n        }\n    });\n    Prism.languages.insertBefore(\"inside\", \"double-colon\", {\n        // All untokenized words that are not namespaces should be class names\n        \"class-name\": /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n    }, Prism.languages.cpp[\"base-clause\"]);\n})(Prism);\nPrism.languages.arduino = Prism.languages.extend(\"cpp\", {\n    \"keyword\": /\\b(?:String|array|bool|boolean|break|byte|case|catch|continue|default|do|double|else|finally|for|function|goto|if|in|instanceof|int|integer|long|loop|new|null|return|setup|string|switch|throw|try|void|while|word)\\b/,\n    \"constant\": /\\b(?:ANALOG_MESSAGE|DEFAULT|DIGITAL_MESSAGE|EXTERNAL|FIRMATA_STRING|HIGH|INPUT|INPUT_PULLUP|INTERNAL|INTERNAL1V1|INTERNAL2V56|LED_BUILTIN|LOW|OUTPUT|REPORT_ANALOG|REPORT_DIGITAL|SET_PIN_MODE|SYSEX_START|SYSTEM_RESET)\\b/,\n    \"builtin\": /\\b(?:Audio|BSSID|Bridge|Client|Console|EEPROM|Esplora|EsploraTFT|Ethernet|EthernetClient|EthernetServer|EthernetUDP|File|FileIO|FileSystem|Firmata|GPRS|GSM|GSMBand|GSMClient|GSMModem|GSMPIN|GSMScanner|GSMServer|GSMVoiceCall|GSM_SMS|HttpClient|IPAddress|IRread|Keyboard|KeyboardController|LiquidCrystal|LiquidCrystal_I2C|Mailbox|Mouse|MouseController|PImage|Process|RSSI|RobotControl|RobotMotor|SD|SPI|SSID|Scheduler|Serial|Server|Servo|SoftwareSerial|Stepper|Stream|TFT|Task|USBHost|WiFi|WiFiClient|WiFiServer|WiFiUDP|Wire|YunClient|YunServer|abs|addParameter|analogRead|analogReadResolution|analogReference|analogWrite|analogWriteResolution|answerCall|attach|attachGPRS|attachInterrupt|attached|autoscroll|available|background|beep|begin|beginPacket|beginSD|beginSMS|beginSpeaker|beginTFT|beginTransmission|beginWrite|bit|bitClear|bitRead|bitSet|bitWrite|blink|blinkVersion|buffer|changePIN|checkPIN|checkPUK|checkReg|circle|cityNameRead|cityNameWrite|clear|clearScreen|click|close|compassRead|config|connect|connected|constrain|cos|countryNameRead|countryNameWrite|createChar|cursor|debugPrint|delay|delayMicroseconds|detach|detachInterrupt|digitalRead|digitalWrite|disconnect|display|displayLogos|drawBMP|drawCompass|encryptionType|end|endPacket|endSMS|endTransmission|endWrite|exists|exitValue|fill|find|findUntil|flush|gatewayIP|get|getAsynchronously|getBand|getButton|getCurrentCarrier|getIMEI|getKey|getModifiers|getOemKey|getPINUsed|getResult|getSignalStrength|getSocket|getVoiceCallStatus|getXChange|getYChange|hangCall|height|highByte|home|image|interrupts|isActionDone|isDirectory|isListening|isPIN|isPressed|isValid|keyPressed|keyReleased|keyboardRead|knobRead|leftToRight|line|lineFollowConfig|listen|listenOnLocalhost|loadImage|localIP|lowByte|macAddress|maintain|map|max|messageAvailable|micros|millis|min|mkdir|motorsStop|motorsWrite|mouseDragged|mouseMoved|mousePressed|mouseReleased|move|noAutoscroll|noBlink|noBuffer|noCursor|noDisplay|noFill|noInterrupts|noListenOnLocalhost|noStroke|noTone|onReceive|onRequest|open|openNextFile|overflow|parseCommand|parseFloat|parseInt|parsePacket|pauseMode|peek|pinMode|playFile|playMelody|point|pointTo|position|pow|prepare|press|print|printFirmwareVersion|printVersion|println|process|processInput|pulseIn|put|random|randomSeed|read|readAccelerometer|readBlue|readButton|readBytes|readBytesUntil|readGreen|readJoystickButton|readJoystickSwitch|readJoystickX|readJoystickY|readLightSensor|readMessage|readMicrophone|readNetworks|readRed|readSlider|readString|readStringUntil|readTemperature|ready|rect|release|releaseAll|remoteIP|remoteNumber|remotePort|remove|requestFrom|retrieveCallingNumber|rewindDirectory|rightToLeft|rmdir|robotNameRead|robotNameWrite|run|runAsynchronously|runShellCommand|runShellCommandAsynchronously|running|scanNetworks|scrollDisplayLeft|scrollDisplayRight|seek|sendAnalog|sendDigitalPortPair|sendDigitalPorts|sendString|sendSysex|serialEvent|setBand|setBitOrder|setClockDivider|setCursor|setDNS|setDataMode|setFirmwareVersion|setMode|setPINUsed|setSpeed|setTextSize|setTimeout|shiftIn|shiftOut|shutdown|sin|size|sqrt|startLoop|step|stop|stroke|subnetMask|switchPIN|tan|tempoWrite|text|tone|transfer|tuneWrite|turn|updateIR|userNameRead|userNameWrite|voiceCall|waitContinue|width|write|writeBlue|writeGreen|writeJSON|writeMessage|writeMicroseconds|writeRGB|writeRed|yield)\\b/\n});\nPrism.languages.ino = Prism.languages.arduino;\n(function(Prism) {\n    // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n    // + LC_ALL, RANDOM, REPLY, SECONDS.\n    // + make sure PS1..4 are here as they are not always set,\n    // - some useless things.\n    var envVars = \"\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b\";\n    var commandAfterHeredoc = {\n        pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n        lookbehind: true,\n        alias: \"punctuation\",\n        // this looks reasonably well in all themes\n        inside: null // see below\n    };\n    var insideString = {\n        \"bash\": commandAfterHeredoc,\n        \"environment\": {\n            pattern: RegExp(\"\\\\$\" + envVars),\n            alias: \"constant\"\n        },\n        \"variable\": [\n            // [0]: Arithmetic Environment\n            {\n                pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n                greedy: true,\n                inside: {\n                    // If there is a $ sign at the beginning highlight $(( and )) as variable\n                    \"variable\": [\n                        {\n                            pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n                            lookbehind: true\n                        },\n                        /^\\$\\(\\(/\n                    ],\n                    \"number\": /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n                    // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n                    \"operator\": /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n                    // If there is no $ sign at the beginning highlight (( and )) as punctuation\n                    \"punctuation\": /\\(\\(?|\\)\\)?|,|;/\n                }\n            },\n            // [1]: Command Substitution\n            {\n                pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n                greedy: true,\n                inside: {\n                    \"variable\": /^\\$\\(|^`|\\)$|`$/\n                }\n            },\n            // [2]: Brace expansion\n            {\n                pattern: /\\$\\{[^}]+\\}/,\n                greedy: true,\n                inside: {\n                    \"operator\": /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n                    \"punctuation\": /[\\[\\]]/,\n                    \"environment\": {\n                        pattern: RegExp(\"(\\\\{)\" + envVars),\n                        lookbehind: true,\n                        alias: \"constant\"\n                    }\n                }\n            },\n            /\\$(?:\\w+|[#?*!@$])/\n        ],\n        // Escape sequences from echo and printf's manuals, and escaped quotes.\n        \"entity\": /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n    };\n    Prism.languages.bash = {\n        \"shebang\": {\n            pattern: /^#!\\s*\\/.*/,\n            alias: \"important\"\n        },\n        \"comment\": {\n            pattern: /(^|[^\"{\\\\$])#.*/,\n            lookbehind: true\n        },\n        \"function-name\": [\n            // a) function foo {\n            // b) foo() {\n            // c) function foo() {\n            // but not “foo {”\n            {\n                // a) and c)\n                pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n                lookbehind: true,\n                alias: \"function\"\n            },\n            {\n                // b)\n                pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n                alias: \"function\"\n            }\n        ],\n        // Highlight variable names as variables in for and select beginnings.\n        \"for-or-select\": {\n            pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n            alias: \"variable\",\n            lookbehind: true\n        },\n        // Highlight variable names as variables in the left-hand part\n        // of assignments (“=” and “+=”).\n        \"assign-left\": {\n            pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?:\\.\\w+)*(?=\\+?=)/,\n            inside: {\n                \"environment\": {\n                    pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + envVars),\n                    lookbehind: true,\n                    alias: \"constant\"\n                }\n            },\n            alias: \"variable\",\n            lookbehind: true\n        },\n        // Highlight parameter names as variables\n        \"parameter\": {\n            pattern: /(^|\\s)-{1,2}(?:\\w+:[+-]?)?\\w+(?:\\.\\w+)*(?=[=\\s]|$)/,\n            alias: \"variable\",\n            lookbehind: true\n        },\n        \"string\": [\n            // Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n            {\n                pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n                lookbehind: true,\n                greedy: true,\n                inside: insideString\n            },\n            // Here-document with quotes around the tag\n            // → No expansion (so no “inside”).\n            {\n                pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n                lookbehind: true,\n                greedy: true,\n                inside: {\n                    \"bash\": commandAfterHeredoc\n                }\n            },\n            // “Normal” string\n            {\n                // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n                pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n                lookbehind: true,\n                greedy: true,\n                inside: insideString\n            },\n            {\n                // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n                pattern: /(^|[^$\\\\])'[^']*'/,\n                lookbehind: true,\n                greedy: true\n            },\n            {\n                // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n                pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n                greedy: true,\n                inside: {\n                    \"entity\": insideString.entity\n                }\n            }\n        ],\n        \"environment\": {\n            pattern: RegExp(\"\\\\$?\" + envVars),\n            alias: \"constant\"\n        },\n        \"variable\": insideString.variable,\n        \"function\": {\n            pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cargo|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|java|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|sysctl|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n            lookbehind: true\n        },\n        \"keyword\": {\n            pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n            lookbehind: true\n        },\n        // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n        \"builtin\": {\n            pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n            lookbehind: true,\n            // Alias added to make those easier to distinguish from strings.\n            alias: \"class-name\"\n        },\n        \"boolean\": {\n            pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n            lookbehind: true\n        },\n        \"file-descriptor\": {\n            pattern: /\\B&\\d\\b/,\n            alias: \"important\"\n        },\n        \"operator\": {\n            // Lots of redirections here, but not just that.\n            pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n            inside: {\n                \"file-descriptor\": {\n                    pattern: /^\\d/,\n                    alias: \"important\"\n                }\n            }\n        },\n        \"punctuation\": /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n        \"number\": {\n            pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n            lookbehind: true\n        }\n    };\n    commandAfterHeredoc.inside = Prism.languages.bash;\n    /* Patterns in command substitution. */ var toBeCopied = [\n        \"comment\",\n        \"function-name\",\n        \"for-or-select\",\n        \"assign-left\",\n        \"parameter\",\n        \"string\",\n        \"environment\",\n        \"function\",\n        \"keyword\",\n        \"builtin\",\n        \"boolean\",\n        \"file-descriptor\",\n        \"operator\",\n        \"punctuation\",\n        \"number\"\n    ];\n    var inside = insideString.variable[1].inside;\n    for(var i = 0; i < toBeCopied.length; i++){\n        inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n    }\n    Prism.languages.sh = Prism.languages.bash;\n    Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n(function(Prism) {\n    /**\n   * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\n   *\n   * Note: This is a simple text based replacement. Be careful when using backreferences!\n   *\n   * @param {string} pattern the given pattern.\n   * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n   * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\n   * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n   */ function replace(pattern, replacements) {\n        return pattern.replace(/<<(\\d+)>>/g, function(m, index) {\n            return \"(?:\" + replacements[+index] + \")\";\n        });\n    }\n    /**\n   * @param {string} pattern\n   * @param {string[]} replacements\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */ function re(pattern, replacements, flags) {\n        return RegExp(replace(pattern, replacements), flags || \"\");\n    }\n    /**\n   * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n   *\n   * @param {string} pattern\n   * @param {number} depthLog2\n   * @returns {string}\n   */ function nested(pattern, depthLog2) {\n        for(var i = 0; i < depthLog2; i++){\n            pattern = pattern.replace(/<<self>>/g, function() {\n                return \"(?:\" + pattern + \")\";\n            });\n        }\n        return pattern.replace(/<<self>>/g, \"[^\\\\s\\\\S]\");\n    }\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\n    var keywordKinds = {\n        // keywords which represent a return or variable type\n        type: \"bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void\",\n        // keywords which are used to declare a type\n        typeDeclaration: \"class enum interface record struct\",\n        // contextual keywords\n        // (\"var\" and \"dynamic\" are missing because they are used like types)\n        contextual: \"add alias and ascending async await by descending from(?=\\\\s*(?:\\\\w|$)) get global group into init(?=\\\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\\\s*{)\",\n        // all other keywords\n        other: \"abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield\"\n    };\n    // keywords\n    function keywordsToPattern(words) {\n        return \"\\\\b(?:\" + words.trim().replace(/ /g, \"|\") + \")\\\\b\";\n    }\n    var typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);\n    var keywords = RegExp(keywordsToPattern(keywordKinds.type + \" \" + keywordKinds.typeDeclaration + \" \" + keywordKinds.contextual + \" \" + keywordKinds.other));\n    var nonTypeKeywords = keywordsToPattern(keywordKinds.typeDeclaration + \" \" + keywordKinds.contextual + \" \" + keywordKinds.other);\n    var nonContextualKeywords = keywordsToPattern(keywordKinds.type + \" \" + keywordKinds.typeDeclaration + \" \" + keywordKinds.other);\n    // types\n    var generic = nested(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.\n    var nestedRound = nested(/\\((?:[^()]|<<self>>)*\\)/.source, 2);\n    var name = /@?\\b[A-Za-z_]\\w*\\b/.source;\n    var genericName = replace(/<<0>>(?:\\s*<<1>>)?/.source, [\n        name,\n        generic\n    ]);\n    var identifier = replace(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [\n        nonTypeKeywords,\n        genericName\n    ]);\n    var array = /\\[\\s*(?:,\\s*)*\\]/.source;\n    var typeExpressionWithoutTuple = replace(/<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source, [\n        identifier,\n        array\n    ]);\n    var tupleElement = replace(/[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [\n        generic,\n        nestedRound,\n        array\n    ]);\n    var tuple = replace(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [\n        tupleElement\n    ]);\n    var typeExpression = replace(/(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source, [\n        tuple,\n        identifier,\n        array\n    ]);\n    var typeInside = {\n        \"keyword\": keywords,\n        \"punctuation\": /[<>()?,.:[\\]]/\n    };\n    // strings & characters\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals\n    var character = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source; // simplified pattern\n    var regularString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source;\n    var verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source;\n    Prism.languages.csharp = Prism.languages.extend(\"clike\", {\n        \"string\": [\n            {\n                pattern: re(/(^|[^$\\\\])<<0>>/.source, [\n                    verbatimString\n                ]),\n                lookbehind: true,\n                greedy: true\n            },\n            {\n                pattern: re(/(^|[^@$\\\\])<<0>>/.source, [\n                    regularString\n                ]),\n                lookbehind: true,\n                greedy: true\n            }\n        ],\n        \"class-name\": [\n            {\n                // Using static\n                // using static System.Math;\n                pattern: re(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [\n                    identifier\n                ]),\n                lookbehind: true,\n                inside: typeInside\n            },\n            {\n                // Using alias (type)\n                // using Project = PC.MyCompany.Project;\n                pattern: re(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [\n                    name,\n                    typeExpression\n                ]),\n                lookbehind: true,\n                inside: typeInside\n            },\n            {\n                // Using alias (alias)\n                // using Project = PC.MyCompany.Project;\n                pattern: re(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [\n                    name\n                ]),\n                lookbehind: true\n            },\n            {\n                // Type declarations\n                // class Foo<A, B>\n                // interface Foo<out A, B>\n                pattern: re(/(\\b<<0>>\\s+)<<1>>/.source, [\n                    typeDeclarationKeywords,\n                    genericName\n                ]),\n                lookbehind: true,\n                inside: typeInside\n            },\n            {\n                // Single catch exception declaration\n                // catch(Foo)\n                // (things like catch(Foo e) is covered by variable declaration)\n                pattern: re(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [\n                    identifier\n                ]),\n                lookbehind: true,\n                inside: typeInside\n            },\n            {\n                // Name of the type parameter of generic constraints\n                // where Foo : class\n                pattern: re(/(\\bwhere\\s+)<<0>>/.source, [\n                    name\n                ]),\n                lookbehind: true\n            },\n            {\n                // Casts and checks via as and is.\n                // as Foo<A>, is Bar<B>\n                // (things like if(a is Foo b) is covered by variable declaration)\n                pattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [\n                    typeExpressionWithoutTuple\n                ]),\n                lookbehind: true,\n                inside: typeInside\n            },\n            {\n                // Variable, field and parameter declaration\n                // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)\n                pattern: re(/\\b<<0>>(?=\\s+(?!<<1>>|with\\s*\\{)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/.source, [\n                    typeExpression,\n                    nonContextualKeywords,\n                    name\n                ]),\n                inside: typeInside\n            }\n        ],\n        \"keyword\": keywords,\n        // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals\n        \"number\": /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:[dflmu]|lu|ul)?\\b/i,\n        \"operator\": />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n        \"punctuation\": /\\?\\.?|::|[{}[\\];(),.:]/\n    });\n    Prism.languages.insertBefore(\"csharp\", \"number\", {\n        \"range\": {\n            pattern: /\\.\\./,\n            alias: \"operator\"\n        }\n    });\n    Prism.languages.insertBefore(\"csharp\", \"punctuation\", {\n        \"named-parameter\": {\n            pattern: re(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [\n                name\n            ]),\n            lookbehind: true,\n            alias: \"punctuation\"\n        }\n    });\n    Prism.languages.insertBefore(\"csharp\", \"class-name\", {\n        \"namespace\": {\n            // namespace Foo.Bar {}\n            // using Foo.Bar;\n            pattern: re(/(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source, [\n                name\n            ]),\n            lookbehind: true,\n            inside: {\n                \"punctuation\": /\\./\n            }\n        },\n        \"type-expression\": {\n            // default(Foo), typeof(Foo<Bar>), sizeof(int)\n            pattern: re(/(\\b(?:default|sizeof|typeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/.source, [\n                nestedRound\n            ]),\n            lookbehind: true,\n            alias: \"class-name\",\n            inside: typeInside\n        },\n        \"return-type\": {\n            // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0\n            // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];\n            // int Foo => 0; int Foo { get; set } = 0;\n            pattern: re(/<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source, [\n                typeExpression,\n                identifier\n            ]),\n            inside: typeInside,\n            alias: \"class-name\"\n        },\n        \"constructor-invocation\": {\n            // new List<Foo<Bar[]>> { }\n            pattern: re(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [\n                typeExpression\n            ]),\n            lookbehind: true,\n            inside: typeInside,\n            alias: \"class-name\"\n        },\n        /*'explicit-implementation': {\n    \t// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();\n    \tpattern: replace(/\\b<<0>>(?=\\.<<1>>)/, className, methodOrPropertyDeclaration),\n    \tinside: classNameInside,\n    \talias: 'class-name'\n    },*/ \"generic-method\": {\n            // foo<Bar>()\n            pattern: re(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [\n                name,\n                generic\n            ]),\n            inside: {\n                \"function\": re(/^<<0>>/.source, [\n                    name\n                ]),\n                \"generic\": {\n                    pattern: RegExp(generic),\n                    alias: \"class-name\",\n                    inside: typeInside\n                }\n            }\n        },\n        \"type-list\": {\n            // The list of types inherited or of generic constraints\n            // class Foo<F> : Bar, IList<FooBar>\n            // where F : Bar, IList<int>\n            pattern: re(/\\b((?:<<0>>\\s+<<1>>|record\\s+<<1>>\\s*<<5>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>|<<1>>\\s*<<5>>|<<6>>)(?:\\s*,\\s*(?:<<3>>|<<4>>|<<6>>))*(?=\\s*(?:where|[{;]|=>|$))/.source, [\n                typeDeclarationKeywords,\n                genericName,\n                name,\n                typeExpression,\n                keywords.source,\n                nestedRound,\n                /\\bnew\\s*\\(\\s*\\)/.source\n            ]),\n            lookbehind: true,\n            inside: {\n                \"record-arguments\": {\n                    pattern: re(/(^(?!new\\s*\\()<<0>>\\s*)<<1>>/.source, [\n                        genericName,\n                        nestedRound\n                    ]),\n                    lookbehind: true,\n                    greedy: true,\n                    inside: Prism.languages.csharp\n                },\n                \"keyword\": keywords,\n                \"class-name\": {\n                    pattern: RegExp(typeExpression),\n                    greedy: true,\n                    inside: typeInside\n                },\n                \"punctuation\": /[,()]/\n            }\n        },\n        \"preprocessor\": {\n            pattern: /(^[\\t ]*)#.*/m,\n            lookbehind: true,\n            alias: \"property\",\n            inside: {\n                // highlight preprocessor directives as keywords\n                \"directive\": {\n                    pattern: /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,\n                    lookbehind: true,\n                    alias: \"keyword\"\n                }\n            }\n        }\n    });\n    // attributes\n    var regularStringOrCharacter = regularString + \"|\" + character;\n    var regularStringCharacterOrComment = replace(/\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source, [\n        regularStringOrCharacter\n    ]);\n    var roundExpression = nested(replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n        regularStringCharacterOrComment\n    ]), 2);\n    // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets\n    var attrTarget = /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/.source;\n    var attr = replace(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [\n        identifier,\n        roundExpression\n    ]);\n    Prism.languages.insertBefore(\"csharp\", \"class-name\", {\n        \"attribute\": {\n            // Attributes\n            // [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]\n            pattern: re(/((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/.source, [\n                attrTarget,\n                attr\n            ]),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"target\": {\n                    pattern: re(/^<<0>>(?=\\s*:)/.source, [\n                        attrTarget\n                    ]),\n                    alias: \"keyword\"\n                },\n                \"attribute-arguments\": {\n                    pattern: re(/\\(<<0>>*\\)/.source, [\n                        roundExpression\n                    ]),\n                    inside: Prism.languages.csharp\n                },\n                \"class-name\": {\n                    pattern: RegExp(identifier),\n                    inside: {\n                        \"punctuation\": /\\./\n                    }\n                },\n                \"punctuation\": /[:,]/\n            }\n        }\n    });\n    // string interpolation\n    var formatString = /:[^}\\r\\n]+/.source;\n    // multi line\n    var mInterpolationRound = nested(replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n        regularStringCharacterOrComment\n    ]), 2);\n    var mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n        mInterpolationRound,\n        formatString\n    ]);\n    // single line\n    var sInterpolationRound = nested(replace(/[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/.source, [\n        regularStringOrCharacter\n    ]), 2);\n    var sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n        sInterpolationRound,\n        formatString\n    ]);\n    function createInterpolationInside(interpolation, interpolationRound) {\n        return {\n            \"interpolation\": {\n                pattern: re(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [\n                    interpolation\n                ]),\n                lookbehind: true,\n                inside: {\n                    \"format-string\": {\n                        pattern: re(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [\n                            interpolationRound,\n                            formatString\n                        ]),\n                        lookbehind: true,\n                        inside: {\n                            \"punctuation\": /^:/\n                        }\n                    },\n                    \"punctuation\": /^\\{|\\}$/,\n                    \"expression\": {\n                        pattern: /[\\s\\S]+/,\n                        alias: \"language-csharp\",\n                        inside: Prism.languages.csharp\n                    }\n                }\n            },\n            \"string\": /[\\s\\S]+/\n        };\n    }\n    Prism.languages.insertBefore(\"csharp\", \"string\", {\n        \"interpolation-string\": [\n            {\n                pattern: re(/(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source, [\n                    mInterpolation\n                ]),\n                lookbehind: true,\n                greedy: true,\n                inside: createInterpolationInside(mInterpolation, mInterpolationRound)\n            },\n            {\n                pattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [\n                    sInterpolation\n                ]),\n                lookbehind: true,\n                greedy: true,\n                inside: createInterpolationInside(sInterpolation, sInterpolationRound)\n            }\n        ],\n        \"char\": {\n            pattern: RegExp(character),\n            greedy: true\n        }\n    });\n    Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;\n})(Prism);\nPrism.languages.markup = {\n    \"comment\": {\n        pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n        greedy: true\n    },\n    \"prolog\": {\n        pattern: /<\\?[\\s\\S]+?\\?>/,\n        greedy: true\n    },\n    \"doctype\": {\n        // https://www.w3.org/TR/xml/#NT-doctypedecl\n        pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n        greedy: true,\n        inside: {\n            \"internal-subset\": {\n                pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n                lookbehind: true,\n                greedy: true,\n                inside: null // see below\n            },\n            \"string\": {\n                pattern: /\"[^\"]*\"|'[^']*'/,\n                greedy: true\n            },\n            \"punctuation\": /^<!|>$|[[\\]]/,\n            \"doctype-tag\": /^DOCTYPE/i,\n            \"name\": /[^\\s<>'\"]+/\n        }\n    },\n    \"cdata\": {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        greedy: true\n    },\n    \"tag\": {\n        pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n        greedy: true,\n        inside: {\n            \"tag\": {\n                pattern: /^<\\/?[^\\s>\\/]+/,\n                inside: {\n                    \"punctuation\": /^<\\/?/,\n                    \"namespace\": /^[^\\s>\\/:]+:/\n                }\n            },\n            \"special-attr\": [],\n            \"attr-value\": {\n                pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n                inside: {\n                    \"punctuation\": [\n                        {\n                            pattern: /^=/,\n                            alias: \"attr-equals\"\n                        },\n                        {\n                            pattern: /^(\\s*)[\"']|[\"']$/,\n                            lookbehind: true\n                        }\n                    ]\n                }\n            },\n            \"punctuation\": /\\/?>/,\n            \"attr-name\": {\n                pattern: /[^\\s>\\/]+/,\n                inside: {\n                    \"namespace\": /^[^\\s>\\/:]+:/\n                }\n            }\n        }\n    },\n    \"entity\": [\n        {\n            pattern: /&[\\da-z]{1,8};/i,\n            alias: \"named-entity\"\n        },\n        /&#x?[\\da-f]{1,8};/i\n    ]\n};\nPrism.languages.markup[\"tag\"].inside[\"attr-value\"].inside[\"entity\"] = Prism.languages.markup[\"entity\"];\nPrism.languages.markup[\"doctype\"].inside[\"internal-subset\"].inside = Prism.languages.markup;\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add(\"wrap\", function(env) {\n    if (env.type === \"entity\") {\n        env.attributes[\"title\"] = env.content.replace(/&amp;/, \"&\");\n    }\n});\nObject.defineProperty(Prism.languages.markup.tag, \"addInlined\", {\n    /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */ value: function addInlined(tagName, lang) {\n        var includedCdataInside = {};\n        includedCdataInside[\"language-\" + lang] = {\n            pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n            lookbehind: true,\n            inside: Prism.languages[lang]\n        };\n        includedCdataInside[\"cdata\"] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n        var inside = {\n            \"included-cdata\": {\n                pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n                inside: includedCdataInside\n            }\n        };\n        inside[\"language-\" + lang] = {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages[lang]\n        };\n        var def = {};\n        def[tagName] = {\n            pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function() {\n                return tagName;\n            }), \"i\"),\n            lookbehind: true,\n            greedy: true,\n            inside: inside\n        };\n        Prism.languages.insertBefore(\"markup\", \"cdata\", def);\n    }\n});\nObject.defineProperty(Prism.languages.markup.tag, \"addAttribute\", {\n    /**\n   * Adds an pattern to highlight languages embedded in HTML attributes.\n   *\n   * An example of an inlined language is CSS with `style` attributes.\n   *\n   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addAttribute('style', 'css');\n   */ value: function(attrName, lang) {\n        Prism.languages.markup.tag.inside[\"special-attr\"].push({\n            pattern: RegExp(/(^|[\"'\\s])/.source + \"(?:\" + attrName + \")\" + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, \"i\"),\n            lookbehind: true,\n            inside: {\n                \"attr-name\": /^[^\\s=]+/,\n                \"attr-value\": {\n                    pattern: /=[\\s\\S]+/,\n                    inside: {\n                        \"value\": {\n                            pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                            lookbehind: true,\n                            alias: [\n                                lang,\n                                \"language-\" + lang\n                            ],\n                            inside: Prism.languages[lang]\n                        },\n                        \"punctuation\": [\n                            {\n                                pattern: /^=/,\n                                alias: \"attr-equals\"\n                            },\n                            /\"|'/\n                        ]\n                    }\n                }\n            }\n        });\n    }\n});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\nPrism.languages.xml = Prism.languages.extend(\"markup\", {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n(function(Prism) {\n    var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n    Prism.languages.css = {\n        \"comment\": /\\/\\*[\\s\\S]*?\\*\\//,\n        \"atrule\": {\n            pattern: RegExp(\"@[\\\\w-](?:\" + /[^;{\\s\"']|\\s+(?!\\s)/.source + \"|\" + string.source + \")*?\" + /(?:;|(?=\\s*\\{))/.source),\n            inside: {\n                \"rule\": /^@[\\w-]+/,\n                \"selector-function-argument\": {\n                    pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n                    lookbehind: true,\n                    alias: \"selector\"\n                },\n                \"keyword\": {\n                    pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n                    lookbehind: true\n                }\n            }\n        },\n        \"url\": {\n            // https://drafts.csswg.org/css-values-3/#urls\n            pattern: RegExp(\"\\\\burl\\\\((?:\" + string.source + \"|\" + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + \")\\\\)\", \"i\"),\n            greedy: true,\n            inside: {\n                \"function\": /^url/i,\n                \"punctuation\": /^\\(|\\)$/,\n                \"string\": {\n                    pattern: RegExp(\"^\" + string.source + \"$\"),\n                    alias: \"url\"\n                }\n            }\n        },\n        \"selector\": {\n            pattern: RegExp(\"(^|[{}\\\\s])[^{}\\\\s](?:[^{};\\\"'\\\\s]|\\\\s+(?![\\\\s{])|\" + string.source + \")*(?=\\\\s*\\\\{)\"),\n            lookbehind: true\n        },\n        \"string\": {\n            pattern: string,\n            greedy: true\n        },\n        \"property\": {\n            pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n            lookbehind: true\n        },\n        \"important\": /!important\\b/i,\n        \"function\": {\n            pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n            lookbehind: true\n        },\n        \"punctuation\": /[(){};:,]/\n    };\n    Prism.languages.css[\"atrule\"].inside.rest = Prism.languages.css;\n    var markup = Prism.languages.markup;\n    if (markup) {\n        markup.tag.addInlined(\"style\", \"css\");\n        markup.tag.addAttribute(\"style\", \"css\");\n    }\n})(Prism);\n(function(Prism) {\n    Prism.languages.diff = {\n        \"coord\": [\n            // Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n            /^(?:\\*{3}|-{3}|\\+{3}).*$/m,\n            // Match \"@@ ... @@\" coord lines in unified diff.\n            /^@@.*@@$/m,\n            // Match coord lines in normal diff (starts with a number).\n            /^\\d.*$/m\n        ]\n    };\n    /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */ var PREFIXES = {\n        \"deleted-sign\": \"-\",\n        \"deleted-arrow\": \"<\",\n        \"inserted-sign\": \"+\",\n        \"inserted-arrow\": \">\",\n        \"unchanged\": \" \",\n        \"diff\": \"!\"\n    };\n    // add a token for each prefix\n    Object.keys(PREFIXES).forEach(function(name) {\n        var prefix = PREFIXES[name];\n        var alias = [];\n        if (!/^\\w+$/.test(name)) {\n            // \"deleted-sign\" -> \"deleted\"\n            alias.push(/\\w+/.exec(name)[0]);\n        }\n        if (name === \"diff\") {\n            alias.push(\"bold\");\n        }\n        Prism.languages.diff[name] = {\n            pattern: RegExp(\"^(?:[\" + prefix + \"].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+\", \"m\"),\n            alias: alias,\n            inside: {\n                \"line\": {\n                    pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n                    lookbehind: true\n                },\n                \"prefix\": {\n                    pattern: /[\\s\\S]/,\n                    alias: /\\w+/.exec(name)[0]\n                }\n            }\n        };\n    });\n    // make prefixes available to Diff plugin\n    Object.defineProperty(Prism.languages.diff, \"PREFIXES\", {\n        value: PREFIXES\n    });\n})(Prism);\nPrism.languages.go = Prism.languages.extend(\"clike\", {\n    \"string\": {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n        lookbehind: true,\n        greedy: true\n    },\n    \"keyword\": /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n    \"boolean\": /\\b(?:_|false|iota|nil|true)\\b/,\n    \"number\": [\n        // binary and octal integers\n        /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i,\n        // hexadecimal integers and floats\n        /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n        // decimal integers and floats\n        /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i\n    ],\n    \"operator\": /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n    \"builtin\": /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n});\nPrism.languages.insertBefore(\"go\", \"string\", {\n    \"char\": {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n        greedy: true\n    }\n});\ndelete Prism.languages.go[\"class-name\"];\nPrism.languages.ini = {\n    /**\n   * The component mimics the behavior of the Win32 API parser.\n   *\n   * @see {@link https://github.com/PrismJS/prism/issues/2775#issuecomment-787477723}\n   */ \"comment\": {\n        pattern: /(^[ \\f\\t\\v]*)[#;][^\\n\\r]*/m,\n        lookbehind: true\n    },\n    \"section\": {\n        pattern: /(^[ \\f\\t\\v]*)\\[[^\\n\\r\\]]*\\]?/m,\n        lookbehind: true,\n        inside: {\n            \"section-name\": {\n                pattern: /(^\\[[ \\f\\t\\v]*)[^ \\f\\t\\v\\]]+(?:[ \\f\\t\\v]+[^ \\f\\t\\v\\]]+)*/,\n                lookbehind: true,\n                alias: \"selector\"\n            },\n            \"punctuation\": /\\[|\\]/\n        }\n    },\n    \"key\": {\n        pattern: /(^[ \\f\\t\\v]*)[^ \\f\\n\\r\\t\\v=]+(?:[ \\f\\t\\v]+[^ \\f\\n\\r\\t\\v=]+)*(?=[ \\f\\t\\v]*=)/m,\n        lookbehind: true,\n        alias: \"attr-name\"\n    },\n    \"value\": {\n        pattern: /(=[ \\f\\t\\v]*)[^ \\f\\n\\r\\t\\v]+(?:[ \\f\\t\\v]+[^ \\f\\n\\r\\t\\v]+)*/,\n        lookbehind: true,\n        alias: \"attr-value\",\n        inside: {\n            \"inner-value\": {\n                pattern: /^(\"|').+(?=\\1$)/,\n                lookbehind: true\n            }\n        }\n    },\n    \"punctuation\": /=/\n};\n(function(Prism) {\n    var keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\\s*[(){}[\\]<>=%~.:,;?+\\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/;\n    // full package (optional) + parent classes (optional)\n    var classNamePrefix = /(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;\n    // based on the java naming conventions\n    var className = {\n        pattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n        lookbehind: true,\n        inside: {\n            \"namespace\": {\n                pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n                inside: {\n                    \"punctuation\": /\\./\n                }\n            },\n            \"punctuation\": /\\./\n        }\n    };\n    Prism.languages.java = Prism.languages.extend(\"clike\", {\n        \"string\": {\n            pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n            lookbehind: true,\n            greedy: true\n        },\n        \"class-name\": [\n            className,\n            {\n                // variables, parameters, and constructor references\n                // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n                pattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()]|\\s*(?:\\[[\\s,]*\\]\\s*)?::\\s*new\\b)/.source),\n                lookbehind: true,\n                inside: className.inside\n            },\n            {\n                // class names based on keyword\n                // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n                pattern: RegExp(/(\\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\\s+)/.source + classNamePrefix + /[A-Z]\\w*\\b/.source),\n                lookbehind: true,\n                inside: className.inside\n            }\n        ],\n        \"keyword\": keywords,\n        \"function\": [\n            Prism.languages.clike.function,\n            {\n                pattern: /(::\\s*)[a-z_]\\w*/,\n                lookbehind: true\n            }\n        ],\n        \"number\": /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n        \"operator\": {\n            pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n            lookbehind: true\n        },\n        \"constant\": /\\b[A-Z][A-Z_\\d]+\\b/\n    });\n    Prism.languages.insertBefore(\"java\", \"string\", {\n        \"triple-quoted-string\": {\n            // http://openjdk.java.net/jeps/355#Description\n            pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n            greedy: true,\n            alias: \"string\"\n        },\n        \"char\": {\n            pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n            greedy: true\n        }\n    });\n    Prism.languages.insertBefore(\"java\", \"class-name\", {\n        \"annotation\": {\n            pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n            lookbehind: true,\n            alias: \"punctuation\"\n        },\n        \"generics\": {\n            pattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n            inside: {\n                \"class-name\": className,\n                \"keyword\": keywords,\n                \"punctuation\": /[<>(),.:]/,\n                \"operator\": /[?&|]/\n            }\n        },\n        \"import\": [\n            {\n                pattern: RegExp(/(\\bimport\\s+)/.source + classNamePrefix + /(?:[A-Z]\\w*|\\*)(?=\\s*;)/.source),\n                lookbehind: true,\n                inside: {\n                    \"namespace\": className.inside.namespace,\n                    \"punctuation\": /\\./,\n                    \"operator\": /\\*/,\n                    \"class-name\": /\\w+/\n                }\n            },\n            {\n                pattern: RegExp(/(\\bimport\\s+static\\s+)/.source + classNamePrefix + /(?:\\w+|\\*)(?=\\s*;)/.source),\n                lookbehind: true,\n                alias: \"static\",\n                inside: {\n                    \"namespace\": className.inside.namespace,\n                    \"static\": /\\b\\w+$/,\n                    \"punctuation\": /\\./,\n                    \"operator\": /\\*/,\n                    \"class-name\": /\\w+/\n                }\n            }\n        ],\n        \"namespace\": {\n            pattern: RegExp(/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(/<keyword>/g, function() {\n                return keywords.source;\n            })),\n            lookbehind: true,\n            inside: {\n                \"punctuation\": /\\./\n            }\n        }\n    });\n})(Prism);\n(function(Prism) {\n    var specialEscape = {\n        pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n        alias: \"escape\"\n    };\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/;\n    var charSet = {\n        pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n        alias: \"class-name\"\n    };\n    var charSetWithoutDot = {\n        pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n        alias: \"class-name\"\n    };\n    var rangeChar = \"(?:[^\\\\\\\\-]|\" + escape.source + \")\";\n    var range = RegExp(rangeChar + \"-\" + rangeChar);\n    // the name of a capturing group\n    var groupName = {\n        pattern: /(<|')[^<>']+(?=[>']$)/,\n        lookbehind: true,\n        alias: \"variable\"\n    };\n    Prism.languages.regex = {\n        \"char-class\": {\n            pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n            lookbehind: true,\n            inside: {\n                \"char-class-negation\": {\n                    pattern: /(^\\[)\\^/,\n                    lookbehind: true,\n                    alias: \"operator\"\n                },\n                \"char-class-punctuation\": {\n                    pattern: /^\\[|\\]$/,\n                    alias: \"punctuation\"\n                },\n                \"range\": {\n                    pattern: range,\n                    inside: {\n                        \"escape\": escape,\n                        \"range-punctuation\": {\n                            pattern: /-/,\n                            alias: \"operator\"\n                        }\n                    }\n                },\n                \"special-escape\": specialEscape,\n                \"char-set\": charSetWithoutDot,\n                \"escape\": escape\n            }\n        },\n        \"special-escape\": specialEscape,\n        \"char-set\": charSet,\n        \"backreference\": [\n            {\n                // a backreference which is not an octal escape\n                pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n                alias: \"keyword\"\n            },\n            {\n                pattern: /\\\\k<[^<>']+>/,\n                alias: \"keyword\",\n                inside: {\n                    \"group-name\": groupName\n                }\n            }\n        ],\n        \"anchor\": {\n            pattern: /[$^]|\\\\[ABbGZz]/,\n            alias: \"function\"\n        },\n        \"escape\": escape,\n        \"group\": [\n            {\n                // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n                // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n                // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n                pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n                alias: \"punctuation\",\n                inside: {\n                    \"group-name\": groupName\n                }\n            },\n            {\n                pattern: /\\)/,\n                alias: \"punctuation\"\n            }\n        ],\n        \"quantifier\": {\n            pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n            alias: \"number\"\n        },\n        \"alternation\": {\n            pattern: /\\|/,\n            alias: \"keyword\"\n        }\n    };\n})(Prism);\nPrism.languages.javascript = Prism.languages.extend(\"clike\", {\n    \"class-name\": [\n        Prism.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n            lookbehind: true\n        }\n    ],\n    \"keyword\": [\n        {\n            pattern: /((?:^|\\})\\s*)catch\\b/,\n            lookbehind: true\n        },\n        {\n            pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: true\n        }\n    ],\n    // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n    \"function\": /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    \"number\": {\n        pattern: RegExp(/(^|[^\\w$])/.source + \"(?:\" + // constant\n        (/NaN|Infinity/.source + \"|\" + // binary integer\n        /0[bB][01]+(?:_[01]+)*n?/.source + \"|\" + // octal integer\n        /0[oO][0-7]+(?:_[0-7]+)*n?/.source + \"|\" + // hexadecimal integer\n        /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + \"|\" + // decimal bigint\n        /\\d+(?:_\\d+)*n/.source + \"|\" + // decimal number (integer or float) but no bigint\n        /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + \")\" + /(?![\\w$])/.source),\n        lookbehind: true\n    },\n    \"operator\": /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nPrism.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore(\"javascript\", \"keyword\", {\n    \"regex\": {\n        pattern: RegExp(// lookbehind\n        // eslint-disable-next-line regexp/no-dupe-characters-character-class\n        /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source + // Regex pattern:\n        // There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\n        // classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\n        // with the only syntax, so we have to define 2 different regex patterns.\n        /\\//.source + \"(?:\" + /(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source + \"|\" + // `v` flag syntax. This supports 3 levels of nested character classes.\n        /(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + \")\" + // lookahead\n        /(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n            \"regex-source\": {\n                pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n                lookbehind: true,\n                alias: \"language-regex\",\n                inside: Prism.languages.regex\n            },\n            \"regex-delimiter\": /^\\/|\\/$/,\n            \"regex-flags\": /^[a-z]+$/\n        }\n    },\n    // This must be declared before keyword because we use \"function\" inside the look-forward\n    \"function-variable\": {\n        pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n        alias: \"function\"\n    },\n    \"parameter\": [\n        {\n            pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        },\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        }\n    ],\n    \"constant\": /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore(\"javascript\", \"string\", {\n    \"hashbang\": {\n        pattern: /^#!.*/,\n        greedy: true,\n        alias: \"comment\"\n    },\n    \"template-string\": {\n        pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n        greedy: true,\n        inside: {\n            \"template-punctuation\": {\n                pattern: /^`|`$/,\n                alias: \"string\"\n            },\n            \"interpolation\": {\n                pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n                lookbehind: true,\n                inside: {\n                    \"interpolation-punctuation\": {\n                        pattern: /^\\$\\{|\\}$/,\n                        alias: \"punctuation\"\n                    },\n                    rest: Prism.languages.javascript\n                }\n            },\n            \"string\": /[\\s\\S]+/\n        }\n    },\n    \"string-property\": {\n        pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n        lookbehind: true,\n        greedy: true,\n        alias: \"property\"\n    }\n});\nPrism.languages.insertBefore(\"javascript\", \"operator\", {\n    \"literal-property\": {\n        pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n        lookbehind: true,\n        alias: \"property\"\n    }\n});\nif (Prism.languages.markup) {\n    Prism.languages.markup.tag.addInlined(\"script\", \"javascript\");\n    // add attribute support for all DOM events.\n    // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n    Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, \"javascript\");\n}\nPrism.languages.js = Prism.languages.javascript;\n(function(Prism) {\n    var javascript = Prism.util.clone(Prism.languages.javascript);\n    var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n    var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n    var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n    /**\n   * @param {string} source\n   * @param {string} [flags]\n   */ function re(source, flags) {\n        source = source.replace(/<S>/g, function() {\n            return space;\n        }).replace(/<BRACES>/g, function() {\n            return braces;\n        }).replace(/<SPREAD>/g, function() {\n            return spread;\n        });\n        return RegExp(source, flags);\n    }\n    spread = re(spread).source;\n    Prism.languages.jsx = Prism.languages.extend(\"markup\", javascript);\n    Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n    Prism.languages.jsx.tag.inside[\"tag\"].pattern = /^<\\/?[^\\s>\\/]*/;\n    Prism.languages.jsx.tag.inside[\"attr-value\"].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n    Prism.languages.jsx.tag.inside[\"tag\"].inside[\"class-name\"] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n    Prism.languages.jsx.tag.inside[\"comment\"] = javascript[\"comment\"];\n    Prism.languages.insertBefore(\"inside\", \"attr-name\", {\n        \"spread\": {\n            pattern: re(/<SPREAD>/.source),\n            inside: Prism.languages.jsx\n        }\n    }, Prism.languages.jsx.tag);\n    Prism.languages.insertBefore(\"inside\", \"special-attr\", {\n        \"script\": {\n            // Allow for two levels of nesting\n            pattern: re(/=<BRACES>/.source),\n            alias: \"language-javascript\",\n            inside: {\n                \"script-punctuation\": {\n                    pattern: /^=(?=\\{)/,\n                    alias: \"punctuation\"\n                },\n                rest: Prism.languages.jsx\n            }\n        }\n    }, Prism.languages.jsx.tag);\n    // The following will handle plain text inside tags\n    var stringifyToken = function(token) {\n        if (!token) {\n            return \"\";\n        }\n        if (typeof token === \"string\") {\n            return token;\n        }\n        if (typeof token.content === \"string\") {\n            return token.content;\n        }\n        return token.content.map(stringifyToken).join(\"\");\n    };\n    var walkTokens = function(tokens) {\n        var openedTags = [];\n        for(var i = 0; i < tokens.length; i++){\n            var token = tokens[i];\n            var notTagNorBrace = false;\n            if (typeof token !== \"string\") {\n                if (token.type === \"tag\" && token.content[0] && token.content[0].type === \"tag\") {\n                    // We found a tag, now find its kind\n                    if (token.content[0].content[0].content === \"</\") {\n                        // Closing tag\n                        if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n                            // Pop matching opening tag\n                            openedTags.pop();\n                        }\n                    } else {\n                        if (token.content[token.content.length - 1].content === \"/>\") ;\n                        else {\n                            // Opening tag\n                            openedTags.push({\n                                tagName: stringifyToken(token.content[0].content[1]),\n                                openedBraces: 0\n                            });\n                        }\n                    }\n                } else if (openedTags.length > 0 && token.type === \"punctuation\" && token.content === \"{\") {\n                    // Here we might have entered a JSX context inside a tag\n                    openedTags[openedTags.length - 1].openedBraces++;\n                } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === \"punctuation\" && token.content === \"}\") {\n                    // Here we might have left a JSX context inside a tag\n                    openedTags[openedTags.length - 1].openedBraces--;\n                } else {\n                    notTagNorBrace = true;\n                }\n            }\n            if (notTagNorBrace || typeof token === \"string\") {\n                if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n                    // Here we are inside a tag, and not inside a JSX context.\n                    // That's plain text: drop any tokens matched.\n                    var plainText = stringifyToken(token);\n                    // And merge text with adjacent text\n                    if (i < tokens.length - 1 && (typeof tokens[i + 1] === \"string\" || tokens[i + 1].type === \"plain-text\")) {\n                        plainText += stringifyToken(tokens[i + 1]);\n                        tokens.splice(i + 1, 1);\n                    }\n                    if (i > 0 && (typeof tokens[i - 1] === \"string\" || tokens[i - 1].type === \"plain-text\")) {\n                        plainText = stringifyToken(tokens[i - 1]) + plainText;\n                        tokens.splice(i - 1, 1);\n                        i--;\n                    }\n                    tokens[i] = new Prism.Token(\"plain-text\", plainText, null, plainText);\n                }\n            }\n            if (token.content && typeof token.content !== \"string\") {\n                walkTokens(token.content);\n            }\n        }\n    };\n    Prism.hooks.add(\"after-tokenize\", function(env) {\n        if (env.language !== \"jsx\" && env.language !== \"tsx\") {\n            return;\n        }\n        walkTokens(env.tokens);\n    });\n})(Prism);\n// https://www.json.org/json-en.html\nPrism.languages.json = {\n    \"property\": {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n        lookbehind: true,\n        greedy: true\n    },\n    \"string\": {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n        lookbehind: true,\n        greedy: true\n    },\n    \"comment\": {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        greedy: true\n    },\n    \"number\": /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    \"punctuation\": /[{}[\\],]/,\n    \"operator\": /:/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"null\": {\n        pattern: /\\bnull\\b/,\n        alias: \"keyword\"\n    }\n};\nPrism.languages.webmanifest = Prism.languages.json;\n(function(Prism) {\n    Prism.languages.kotlin = Prism.languages.extend(\"clike\", {\n        \"keyword\": {\n            // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get\n            pattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n            lookbehind: true\n        },\n        \"function\": [\n            {\n                pattern: /(?:`[^\\r\\n`]+`|\\b\\w+)(?=\\s*\\()/,\n                greedy: true\n            },\n            {\n                pattern: /(\\.)(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\{)/,\n                lookbehind: true,\n                greedy: true\n            }\n        ],\n        \"number\": /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n        \"operator\": /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n    });\n    delete Prism.languages.kotlin[\"class-name\"];\n    var interpolationInside = {\n        \"interpolation-punctuation\": {\n            pattern: /^\\$\\{?|\\}$/,\n            alias: \"punctuation\"\n        },\n        \"expression\": {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.kotlin\n        }\n    };\n    Prism.languages.insertBefore(\"kotlin\", \"string\", {\n        // https://kotlinlang.org/spec/expressions.html#string-interpolation-expressions\n        \"string-literal\": [\n            {\n                pattern: /\"\"\"(?:[^$]|\\$(?:(?!\\{)|\\{[^{}]*\\}))*?\"\"\"/,\n                alias: \"multiline\",\n                inside: {\n                    \"interpolation\": {\n                        pattern: /\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n                        inside: interpolationInside\n                    },\n                    \"string\": /[\\s\\S]+/\n                }\n            },\n            {\n                pattern: /\"(?:[^\"\\\\\\r\\n$]|\\\\.|\\$(?:(?!\\{)|\\{[^{}]*\\}))*\"/,\n                alias: \"singleline\",\n                inside: {\n                    \"interpolation\": {\n                        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n                        lookbehind: true,\n                        inside: interpolationInside\n                    },\n                    \"string\": /[\\s\\S]+/\n                }\n            }\n        ],\n        \"char\": {\n            // https://kotlinlang.org/spec/expressions.html#character-literals\n            pattern: /'(?:[^'\\\\\\r\\n]|\\\\(?:.|u[a-fA-F0-9]{0,4}))'/,\n            greedy: true\n        }\n    });\n    delete Prism.languages.kotlin[\"string\"];\n    Prism.languages.insertBefore(\"kotlin\", \"keyword\", {\n        \"annotation\": {\n            pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n            alias: \"builtin\"\n        }\n    });\n    Prism.languages.insertBefore(\"kotlin\", \"function\", {\n        \"label\": {\n            pattern: /\\b\\w+@|@\\w+\\b/,\n            alias: \"symbol\"\n        }\n    });\n    Prism.languages.kt = Prism.languages.kotlin;\n    Prism.languages.kts = Prism.languages.kotlin;\n})(Prism);\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */ Prism.languages.less = Prism.languages.extend(\"css\", {\n    \"comment\": [\n        /\\/\\*[\\s\\S]*?\\*\\//,\n        {\n            pattern: /(^|[^\\\\])\\/\\/.*/,\n            lookbehind: true\n        }\n    ],\n    \"atrule\": {\n        pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n        inside: {\n            \"punctuation\": /[:()]/\n        }\n    },\n    // selectors and mixins are considered the same\n    \"selector\": {\n        pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n        inside: {\n            // mixin parameters\n            \"variable\": /@+[\\w-]+/\n        }\n    },\n    \"property\": /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n    \"operator\": /[+\\-*\\/]/\n});\nPrism.languages.insertBefore(\"less\", \"property\", {\n    \"variable\": [\n        // Variable declaration (the colon must be consumed!)\n        {\n            pattern: /@[\\w-]+\\s*:/,\n            inside: {\n                \"punctuation\": /:/\n            }\n        },\n        // Variable usage\n        /@@?[\\w-]+/\n    ],\n    \"mixin-usage\": {\n        pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n        lookbehind: true,\n        alias: \"function\"\n    }\n});\nPrism.languages.lua = {\n    \"comment\": /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n    // \\z may be used to skip the following space\n    \"string\": {\n        pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[^z]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n        greedy: true\n    },\n    \"number\": /\\b0x[a-f\\d]+(?:\\.[a-f\\d]*)?(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|(?:\\.\\d*)?(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n    \"keyword\": /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n    \"function\": /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n    \"operator\": [\n        /[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,\n        {\n            // Match \"..\" but don't break \"...\"\n            pattern: /(^|[^.])\\.\\.(?!\\.)/,\n            lookbehind: true\n        }\n    ],\n    \"punctuation\": /[\\[\\](){},;]|\\.+|:+/\n};\nPrism.languages.makefile = {\n    \"comment\": {\n        pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n        lookbehind: true\n    },\n    \"string\": {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n    },\n    \"builtin-target\": {\n        pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n        alias: \"builtin\"\n    },\n    \"target\": {\n        pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n        alias: \"symbol\",\n        inside: {\n            \"variable\": /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n        }\n    },\n    \"variable\": /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n    // Directives\n    \"keyword\": /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n    \"function\": {\n        pattern: /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n        lookbehind: true\n    },\n    \"operator\": /(?:::|[?:+!])?=|[|@]/,\n    \"punctuation\": /[:;(){}]/\n};\n(function(Prism) {\n    // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n    // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n    var anchorOrAlias = /[*&][^\\s[\\]{},]+/;\n    // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n    var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/;\n    // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n    var properties = \"(?:\" + tag.source + \"(?:[ \t]+\" + anchorOrAlias.source + \")?|\" + anchorOrAlias.source + \"(?:[ \t]+\" + tag.source + \")?)\";\n    // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n    // This is a simplified version that doesn't support \"#\" and multiline keys\n    // All these long scarry character classes are simplified versions of YAML's characters\n    var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function() {\n        return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n    });\n    var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n    /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */ function createValuePattern(value, flags) {\n        flags = (flags || \"\").replace(/m/g, \"\") + \"m\"; // add m flag\n        var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function() {\n            return properties;\n        }).replace(/<<value>>/g, function() {\n            return value;\n        });\n        return RegExp(pattern, flags);\n    }\n    Prism.languages.yaml = {\n        \"scalar\": {\n            pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function() {\n                return properties;\n            })),\n            lookbehind: true,\n            alias: \"string\"\n        },\n        \"comment\": /#.*/,\n        \"key\": {\n            pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function() {\n                return properties;\n            }).replace(/<<key>>/g, function() {\n                return \"(?:\" + plainKey + \"|\" + string + \")\";\n            })),\n            lookbehind: true,\n            greedy: true,\n            alias: \"atrule\"\n        },\n        \"directive\": {\n            pattern: /(^[ \\t]*)%.+/m,\n            lookbehind: true,\n            alias: \"important\"\n        },\n        \"datetime\": {\n            pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n            lookbehind: true,\n            alias: \"number\"\n        },\n        \"boolean\": {\n            pattern: createValuePattern(/false|true/.source, \"i\"),\n            lookbehind: true,\n            alias: \"important\"\n        },\n        \"null\": {\n            pattern: createValuePattern(/null|~/.source, \"i\"),\n            lookbehind: true,\n            alias: \"important\"\n        },\n        \"string\": {\n            pattern: createValuePattern(string),\n            lookbehind: true,\n            greedy: true\n        },\n        \"number\": {\n            pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, \"i\"),\n            lookbehind: true\n        },\n        \"tag\": tag,\n        \"important\": anchorOrAlias,\n        \"punctuation\": /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n    };\n    Prism.languages.yml = Prism.languages.yaml;\n})(Prism);\n(function(Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n    /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */ function createInline(pattern) {\n        pattern = pattern.replace(/<inner>/g, function() {\n            return inner;\n        });\n        return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + \"(?:\" + pattern + \")\");\n    }\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function() {\n        return tableCell;\n    });\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n    Prism.languages.markdown = Prism.languages.extend(\"markup\", {});\n    Prism.languages.insertBefore(\"markdown\", \"prolog\", {\n        \"front-matter-block\": {\n            pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"punctuation\": /^---|---$/,\n                \"front-matter\": {\n                    pattern: /\\S+(?:\\s+\\S+)*/,\n                    alias: [\n                        \"yaml\",\n                        \"language-yaml\"\n                    ],\n                    inside: Prism.languages.yaml\n                }\n            }\n        },\n        \"blockquote\": {\n            // > ...\n            pattern: /^>(?:[\\t ]*>)*/m,\n            alias: \"punctuation\"\n        },\n        \"table\": {\n            pattern: RegExp(\"^\" + tableRow + tableLine + \"(?:\" + tableRow + \")*\", \"m\"),\n            inside: {\n                \"table-data-rows\": {\n                    pattern: RegExp(\"^(\" + tableRow + tableLine + \")(?:\" + tableRow + \")*$\"),\n                    lookbehind: true,\n                    inside: {\n                        \"table-data\": {\n                            pattern: RegExp(tableCell),\n                            inside: Prism.languages.markdown\n                        },\n                        \"punctuation\": /\\|/\n                    }\n                },\n                \"table-line\": {\n                    pattern: RegExp(\"^(\" + tableRow + \")\" + tableLine + \"$\"),\n                    lookbehind: true,\n                    inside: {\n                        \"punctuation\": /\\||:?-{3,}:?/\n                    }\n                },\n                \"table-header-row\": {\n                    pattern: RegExp(\"^\" + tableRow + \"$\"),\n                    inside: {\n                        \"table-header\": {\n                            pattern: RegExp(tableCell),\n                            alias: \"important\",\n                            inside: Prism.languages.markdown\n                        },\n                        \"punctuation\": /\\|/\n                    }\n                }\n            }\n        },\n        \"code\": [\n            {\n                // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n                pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n                lookbehind: true,\n                alias: \"keyword\"\n            },\n            {\n                // ```optional language\n                // code block\n                // ```\n                pattern: /^```[\\s\\S]*?^```$/m,\n                greedy: true,\n                inside: {\n                    \"code-block\": {\n                        pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n                        lookbehind: true\n                    },\n                    \"code-language\": {\n                        pattern: /^(```).+/,\n                        lookbehind: true\n                    },\n                    \"punctuation\": /```/\n                }\n            }\n        ],\n        \"title\": [\n            {\n                // title 1\n                // =======\n                // title 2\n                // -------\n                pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n                alias: \"important\",\n                inside: {\n                    punctuation: /==+$|--+$/\n                }\n            },\n            {\n                // # title 1\n                // ###### title 6\n                pattern: /(^\\s*)#.+/m,\n                lookbehind: true,\n                alias: \"important\",\n                inside: {\n                    punctuation: /^#+|#+$/\n                }\n            }\n        ],\n        \"hr\": {\n            // ***\n            // ---\n            // * * *\n            // -----------\n            pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n            lookbehind: true,\n            alias: \"punctuation\"\n        },\n        \"list\": {\n            // * item\n            // + item\n            // - item\n            // 1. item\n            pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n            lookbehind: true,\n            alias: \"punctuation\"\n        },\n        \"url-reference\": {\n            // [id]: http://example.com \"Optional title\"\n            // [id]: http://example.com 'Optional title'\n            // [id]: http://example.com (Optional title)\n            // [id]: <http://example.com> \"Optional title\"\n            pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n            inside: {\n                \"variable\": {\n                    pattern: /^(!?\\[)[^\\]]+/,\n                    lookbehind: true\n                },\n                \"string\": /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n                \"punctuation\": /^[\\[\\]!:]|[<>]/\n            },\n            alias: \"url\"\n        },\n        \"bold\": {\n            // **strong**\n            // __strong__\n            // allow one nested instance of italic text using the same delimiter\n            pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"content\": {\n                    pattern: /(^..)[\\s\\S]+(?=..$)/,\n                    lookbehind: true,\n                    inside: {} // see below\n                },\n                \"punctuation\": /\\*\\*|__/\n            }\n        },\n        \"italic\": {\n            // *em*\n            // _em_\n            // allow one nested instance of bold text using the same delimiter\n            pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"content\": {\n                    pattern: /(^.)[\\s\\S]+(?=.$)/,\n                    lookbehind: true,\n                    inside: {} // see below\n                },\n                \"punctuation\": /[*_]/\n            }\n        },\n        \"strike\": {\n            // ~~strike through~~\n            // ~strike~\n            // eslint-disable-next-line regexp/strict\n            pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"content\": {\n                    pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n                    lookbehind: true,\n                    inside: {} // see below\n                },\n                \"punctuation\": /~~?/\n            }\n        },\n        \"code-snippet\": {\n            // `code`\n            // ``code``\n            pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n            lookbehind: true,\n            greedy: true,\n            alias: [\n                \"code\",\n                \"keyword\"\n            ]\n        },\n        \"url\": {\n            // [example](http://example.com \"Optional title\")\n            // [example][id]\n            // [example] [id]\n            pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"operator\": /^!/,\n                \"content\": {\n                    pattern: /(^\\[)[^\\]]+(?=\\])/,\n                    lookbehind: true,\n                    inside: {} // see below\n                },\n                \"variable\": {\n                    pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n                    lookbehind: true\n                },\n                \"url\": {\n                    pattern: /(^\\]\\()[^\\s)]+/,\n                    lookbehind: true\n                },\n                \"string\": {\n                    pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n                    lookbehind: true\n                }\n            }\n        }\n    });\n    [\n        \"url\",\n        \"bold\",\n        \"italic\",\n        \"strike\"\n    ].forEach(function(token) {\n        [\n            \"url\",\n            \"bold\",\n            \"italic\",\n            \"strike\",\n            \"code-snippet\"\n        ].forEach(function(inside) {\n            if (token !== inside) {\n                Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n            }\n        });\n    });\n    Prism.hooks.add(\"after-tokenize\", function(env) {\n        if (env.language !== \"markdown\" && env.language !== \"md\") {\n            return;\n        }\n        function walkTokens(tokens) {\n            if (!tokens || typeof tokens === \"string\") {\n                return;\n            }\n            for(var i = 0, l = tokens.length; i < l; i++){\n                var token = tokens[i];\n                if (token.type !== \"code\") {\n                    walkTokens(token.content);\n                    continue;\n                }\n                /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */ var codeLang = token.content[1];\n                var codeBlock = token.content[3];\n                if (codeLang && codeBlock && codeLang.type === \"code-language\" && codeBlock.type === \"code-block\" && typeof codeLang.content === \"string\") {\n                    // this might be a language that Prism does not support\n                    // do some replacements to support C++, C#, and F#\n                    var lang = codeLang.content.replace(/\\b#/g, \"sharp\").replace(/\\b\\+\\+/g, \"pp\");\n                    // only use the first word\n                    lang = (/[a-z][\\w-]*/i.exec(lang) || [\n                        \"\"\n                    ])[0].toLowerCase();\n                    var alias = \"language-\" + lang;\n                    // add alias\n                    if (!codeBlock.alias) {\n                        codeBlock.alias = [\n                            alias\n                        ];\n                    } else if (typeof codeBlock.alias === \"string\") {\n                        codeBlock.alias = [\n                            codeBlock.alias,\n                            alias\n                        ];\n                    } else {\n                        codeBlock.alias.push(alias);\n                    }\n                }\n            }\n        }\n        walkTokens(env.tokens);\n    });\n    Prism.hooks.add(\"wrap\", function(env) {\n        if (env.type !== \"code-block\") {\n            return;\n        }\n        var codeLang = \"\";\n        for(var i = 0, l = env.classes.length; i < l; i++){\n            var cls = env.classes[i];\n            var match = /language-(.+)/.exec(cls);\n            if (match) {\n                codeLang = match[1];\n                break;\n            }\n        }\n        var grammar = Prism.languages[codeLang];\n        if (!grammar) {\n            if (codeLang && codeLang !== \"none\" && Prism.plugins.autoloader) {\n                var id = \"md-\" + new Date().valueOf() + \"-\" + Math.floor(Math.random() * 1e16);\n                env.attributes[\"id\"] = id;\n                Prism.plugins.autoloader.loadLanguages(codeLang, function() {\n                    var ele = document.getElementById(id);\n                    if (ele) {\n                        ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n                    }\n                });\n            }\n        } else {\n            env.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n        }\n    });\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, \"gi\");\n    /**\n   * A list of known entity names.\n   *\n   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n   *\n   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n   */ var KNOWN_ENTITY_NAMES = {\n        \"amp\": \"&\",\n        \"lt\": \"<\",\n        \"gt\": \">\",\n        \"quot\": '\"'\n    };\n    // IE 11 doesn't support `String.fromCodePoint`\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n    /**\n   * Returns the text content of a given HTML source code string.\n   *\n   * @param {string} html\n   * @returns {string}\n   */ function textContent(html) {\n        // remove all tags\n        var text = html.replace(tagPattern, \"\");\n        // decode known entities\n        text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function(m, code) {\n            code = code.toLowerCase();\n            if (code[0] === \"#\") {\n                var value;\n                if (code[1] === \"x\") {\n                    value = parseInt(code.slice(2), 16);\n                } else {\n                    value = Number(code.slice(1));\n                }\n                return fromCodePoint(value);\n            } else {\n                var known = KNOWN_ENTITY_NAMES[code];\n                if (known) {\n                    return known;\n                }\n                // unable to decode\n                return m;\n            }\n        });\n        return text;\n    }\n    Prism.languages.md = Prism.languages.markdown;\n})(Prism);\nPrism.languages.objectivec = Prism.languages.extend(\"c\", {\n    \"string\": {\n        pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n    },\n    \"keyword\": /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n    \"operator\": /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete Prism.languages.objectivec[\"class-name\"];\nPrism.languages.objc = Prism.languages.objectivec;\n(function(Prism) {\n    var brackets = /(?:\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}|\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)/.source;\n    Prism.languages.perl = {\n        \"comment\": [\n            {\n                // POD\n                pattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n                lookbehind: true,\n                greedy: true\n            },\n            {\n                pattern: /(^|[^\\\\$])#.*/,\n                lookbehind: true,\n                greedy: true\n            }\n        ],\n        // TODO Could be nice to handle Heredoc too.\n        \"string\": [\n            {\n                pattern: RegExp(/\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\s*/.source + \"(?:\" + [\n                    // q/.../\n                    /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n                    // q a...a\n                    // eslint-disable-next-line regexp/strict\n                    /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n                    // q(...)\n                    // q{...}\n                    // q[...]\n                    // q<...>\n                    brackets\n                ].join(\"|\") + \")\"),\n                greedy: true\n            },\n            // \"...\", `...`\n            {\n                pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n                greedy: true\n            },\n            // '...'\n            // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n            {\n                pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n                greedy: true\n            }\n        ],\n        \"regex\": [\n            {\n                pattern: RegExp(/\\b(?:m|qr)(?![a-zA-Z0-9])\\s*/.source + \"(?:\" + [\n                    // m/.../\n                    /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n                    // m a...a\n                    // eslint-disable-next-line regexp/strict\n                    /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n                    // m(...)\n                    // m{...}\n                    // m[...]\n                    // m<...>\n                    brackets\n                ].join(\"|\") + \")\" + /[msixpodualngc]*/.source),\n                greedy: true\n            },\n            // The lookbehinds prevent -s from breaking\n            {\n                pattern: RegExp(/(^|[^-])\\b(?:s|tr|y)(?![a-zA-Z0-9])\\s*/.source + \"(?:\" + [\n                    // s/.../.../\n                    // eslint-disable-next-line regexp/strict\n                    /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n                    // s a...a...a\n                    // eslint-disable-next-line regexp/strict\n                    /([a-zA-Z0-9])(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3/.source,\n                    // s(...)(...)\n                    // s{...}{...}\n                    // s[...][...]\n                    // s<...><...>\n                    // s(...)[...]\n                    brackets + /\\s*/.source + brackets\n                ].join(\"|\") + \")\" + /[msixpodualngcer]*/.source),\n                lookbehind: true,\n                greedy: true\n            },\n            // /.../\n            // The look-ahead tries to prevent two divisions on\n            // the same line from being highlighted as regex.\n            // This does not support multi-line regex.\n            {\n                pattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,\n                greedy: true\n            }\n        ],\n        // FIXME Not sure about the handling of ::, ', and #\n        \"variable\": [\n            // ${^POSTMATCH}\n            /[&*$@%]\\{\\^[A-Z]+\\}/,\n            // $^V\n            /[&*$@%]\\^[A-Z_]/,\n            // ${...}\n            /[&*$@%]#?(?=\\{)/,\n            // $foo\n            /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/,\n            // $1\n            /[&*$@%]\\d+/,\n            // $_, @_, %!\n            // The negative lookahead prevents from breaking the %= operator\n            /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/\n        ],\n        \"filehandle\": {\n            // <>, <FOO>, _\n            pattern: /<(?![<=])\\S*?>|\\b_\\b/,\n            alias: \"symbol\"\n        },\n        \"v-string\": {\n            // v1.2, 1.2.3\n            pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n            alias: \"string\"\n        },\n        \"function\": {\n            pattern: /(\\bsub[ \\t]+)\\w+/,\n            lookbehind: true\n        },\n        \"keyword\": /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n        \"number\": /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n        \"operator\": /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,\n        \"punctuation\": /[{}[\\];(),:]/\n    };\n})(Prism);\n(function(Prism) {\n    /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */ function getPlaceholder(language, index) {\n        return \"___\" + language.toUpperCase() + index + \"___\";\n    }\n    Object.defineProperties(Prism.languages[\"markup-templating\"] = {}, {\n        buildPlaceholders: {\n            /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */ value: function(env, language, placeholderPattern, replaceFilter) {\n                if (env.language !== language) {\n                    return;\n                }\n                var tokenStack = env.tokenStack = [];\n                env.code = env.code.replace(placeholderPattern, function(match) {\n                    if (typeof replaceFilter === \"function\" && !replaceFilter(match)) {\n                        return match;\n                    }\n                    var i = tokenStack.length;\n                    var placeholder;\n                    // Check for existing strings\n                    while(env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1){\n                        ++i;\n                    }\n                    // Create a sparse array\n                    tokenStack[i] = match;\n                    return placeholder;\n                });\n                // Switch the grammar to markup\n                env.grammar = Prism.languages.markup;\n            }\n        },\n        tokenizePlaceholders: {\n            /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */ value: function(env, language) {\n                if (env.language !== language || !env.tokenStack) {\n                    return;\n                }\n                // Switch the grammar back\n                env.grammar = Prism.languages[language];\n                var j = 0;\n                var keys = Object.keys(env.tokenStack);\n                function walkTokens(tokens) {\n                    for(var i = 0; i < tokens.length; i++){\n                        // all placeholders are replaced already\n                        if (j >= keys.length) {\n                            break;\n                        }\n                        var token = tokens[i];\n                        if (typeof token === \"string\" || token.content && typeof token.content === \"string\") {\n                            var k = keys[j];\n                            var t = env.tokenStack[k];\n                            var s = typeof token === \"string\" ? token : token.content;\n                            var placeholder = getPlaceholder(language, k);\n                            var index = s.indexOf(placeholder);\n                            if (index > -1) {\n                                ++j;\n                                var before = s.substring(0, index);\n                                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), \"language-\" + language, t);\n                                var after = s.substring(index + placeholder.length);\n                                var replacement = [];\n                                if (before) {\n                                    replacement.push.apply(replacement, walkTokens([\n                                        before\n                                    ]));\n                                }\n                                replacement.push(middle);\n                                if (after) {\n                                    replacement.push.apply(replacement, walkTokens([\n                                        after\n                                    ]));\n                                }\n                                if (typeof token === \"string\") {\n                                    tokens.splice.apply(tokens, [\n                                        i,\n                                        1\n                                    ].concat(replacement));\n                                } else {\n                                    token.content = replacement;\n                                }\n                            }\n                        } else if (token.content /* && typeof token.content !== 'string' */ ) {\n                            walkTokens(token.content);\n                        }\n                    }\n                    return tokens;\n                }\n                walkTokens(env.tokens);\n            }\n        }\n    });\n})(Prism);\n/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n * Rewritten by Tom Pavelec\n *\n * Supports PHP 5.3 - 8.0\n */ (function(Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;\n    var constant = [\n        {\n            pattern: /\\b(?:false|true)\\b/i,\n            alias: \"boolean\"\n        },\n        {\n            pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n            greedy: true,\n            lookbehind: true\n        },\n        {\n            pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n            greedy: true,\n            lookbehind: true\n        },\n        /\\b(?:null)\\b/i,\n        /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/\n    ];\n    var number = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;\n    var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\n    var punctuation = /[{}\\[\\](),:;]/;\n    Prism.languages.php = {\n        \"delimiter\": {\n            pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n            alias: \"important\"\n        },\n        \"comment\": comment,\n        \"variable\": /\\$+(?:\\w+\\b|(?=\\{))/,\n        \"package\": {\n            pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n            lookbehind: true,\n            inside: {\n                \"punctuation\": /\\\\/\n            }\n        },\n        \"class-name-definition\": {\n            pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n            lookbehind: true,\n            alias: \"class-name\"\n        },\n        \"function-definition\": {\n            pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n            lookbehind: true,\n            alias: \"function\"\n        },\n        \"keyword\": [\n            {\n                pattern: /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n                alias: \"type-casting\",\n                greedy: true,\n                lookbehind: true\n            },\n            {\n                pattern: /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n                alias: \"type-hint\",\n                greedy: true,\n                lookbehind: true\n            },\n            {\n                pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|never|object|self|static|string|void)\\b/i,\n                alias: \"return-type\",\n                greedy: true,\n                lookbehind: true\n            },\n            {\n                pattern: /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n                alias: \"type-declaration\",\n                greedy: true\n            },\n            {\n                pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n                alias: \"type-declaration\",\n                greedy: true,\n                lookbehind: true\n            },\n            {\n                pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n                alias: \"static-context\",\n                greedy: true\n            },\n            {\n                // yield from\n                pattern: /(\\byield\\s+)from\\b/i,\n                lookbehind: true\n            },\n            // `class` is always a keyword unlike other keywords\n            /\\bclass\\b/i,\n            {\n                // https://www.php.net/manual/en/reserved.keywords.php\n                //\n                // keywords cannot be preceded by \"->\"\n                // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n                pattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n                lookbehind: true\n            }\n        ],\n        \"argument-name\": {\n            pattern: /([(,]\\s*)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n            lookbehind: true\n        },\n        \"class-name\": [\n            {\n                pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                greedy: true,\n                lookbehind: true\n            },\n            {\n                pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                greedy: true,\n                lookbehind: true\n            },\n            {\n                pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n                greedy: true\n            },\n            {\n                pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n                alias: \"class-name-fully-qualified\",\n                greedy: true,\n                lookbehind: true,\n                inside: {\n                    \"punctuation\": /\\\\/\n                }\n            },\n            {\n                pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n                alias: \"class-name-fully-qualified\",\n                greedy: true,\n                inside: {\n                    \"punctuation\": /\\\\/\n                }\n            },\n            {\n                pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n                alias: \"class-name-fully-qualified\",\n                greedy: true,\n                lookbehind: true,\n                inside: {\n                    \"punctuation\": /\\\\/\n                }\n            },\n            {\n                pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n                alias: \"type-declaration\",\n                greedy: true\n            },\n            {\n                pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n                alias: [\n                    \"class-name-fully-qualified\",\n                    \"type-declaration\"\n                ],\n                greedy: true,\n                inside: {\n                    \"punctuation\": /\\\\/\n                }\n            },\n            {\n                pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n                alias: \"static-context\",\n                greedy: true\n            },\n            {\n                pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n                alias: [\n                    \"class-name-fully-qualified\",\n                    \"static-context\"\n                ],\n                greedy: true,\n                inside: {\n                    \"punctuation\": /\\\\/\n                }\n            },\n            {\n                pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n                alias: \"type-hint\",\n                greedy: true,\n                lookbehind: true\n            },\n            {\n                pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n                alias: [\n                    \"class-name-fully-qualified\",\n                    \"type-hint\"\n                ],\n                greedy: true,\n                lookbehind: true,\n                inside: {\n                    \"punctuation\": /\\\\/\n                }\n            },\n            {\n                pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                alias: \"return-type\",\n                greedy: true,\n                lookbehind: true\n            },\n            {\n                pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n                alias: [\n                    \"class-name-fully-qualified\",\n                    \"return-type\"\n                ],\n                greedy: true,\n                lookbehind: true,\n                inside: {\n                    \"punctuation\": /\\\\/\n                }\n            }\n        ],\n        \"constant\": constant,\n        \"function\": {\n            pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n            lookbehind: true,\n            inside: {\n                \"punctuation\": /\\\\/\n            }\n        },\n        \"property\": {\n            pattern: /(->\\s*)\\w+/,\n            lookbehind: true\n        },\n        \"number\": number,\n        \"operator\": operator,\n        \"punctuation\": punctuation\n    };\n    var string_interpolation = {\n        pattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n        lookbehind: true,\n        inside: Prism.languages.php\n    };\n    var string = [\n        {\n            pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n            alias: \"nowdoc-string\",\n            greedy: true,\n            inside: {\n                \"delimiter\": {\n                    pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n                    alias: \"symbol\",\n                    inside: {\n                        \"punctuation\": /^<<<'?|[';]$/\n                    }\n                }\n            }\n        },\n        {\n            pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n            alias: \"heredoc-string\",\n            greedy: true,\n            inside: {\n                \"delimiter\": {\n                    pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n                    alias: \"symbol\",\n                    inside: {\n                        \"punctuation\": /^<<<\"?|[\";]$/\n                    }\n                },\n                \"interpolation\": string_interpolation\n            }\n        },\n        {\n            pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n            alias: \"backtick-quoted-string\",\n            greedy: true\n        },\n        {\n            pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n            alias: \"single-quoted-string\",\n            greedy: true\n        },\n        {\n            pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n            alias: \"double-quoted-string\",\n            greedy: true,\n            inside: {\n                \"interpolation\": string_interpolation\n            }\n        }\n    ];\n    Prism.languages.insertBefore(\"php\", \"variable\", {\n        \"string\": string,\n        \"attribute\": {\n            pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n            greedy: true,\n            inside: {\n                \"attribute-content\": {\n                    pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n                    lookbehind: true,\n                    // inside can appear subset of php\n                    inside: {\n                        \"comment\": comment,\n                        \"string\": string,\n                        \"attribute-class-name\": [\n                            {\n                                pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                                alias: \"class-name\",\n                                greedy: true,\n                                lookbehind: true\n                            },\n                            {\n                                pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                                alias: [\n                                    \"class-name\",\n                                    \"class-name-fully-qualified\"\n                                ],\n                                greedy: true,\n                                lookbehind: true,\n                                inside: {\n                                    \"punctuation\": /\\\\/\n                                }\n                            }\n                        ],\n                        \"constant\": constant,\n                        \"number\": number,\n                        \"operator\": operator,\n                        \"punctuation\": punctuation\n                    }\n                },\n                \"delimiter\": {\n                    pattern: /^#\\[|\\]$/,\n                    alias: \"punctuation\"\n                }\n            }\n        }\n    });\n    Prism.hooks.add(\"before-tokenize\", function(env) {\n        if (!/<\\?/.test(env.code)) {\n            return;\n        }\n        var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g;\n        Prism.languages[\"markup-templating\"].buildPlaceholders(env, \"php\", phpPattern);\n    });\n    Prism.hooks.add(\"after-tokenize\", function(env) {\n        Prism.languages[\"markup-templating\"].tokenizePlaceholders(env, \"php\");\n    });\n})(Prism);\nPrism.languages.python = {\n    \"comment\": {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        greedy: true\n    },\n    \"string-interpolation\": {\n        pattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n        greedy: true,\n        inside: {\n            \"interpolation\": {\n                // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n                pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n                lookbehind: true,\n                inside: {\n                    \"format-spec\": {\n                        pattern: /(:)[^:(){}]+(?=\\}$)/,\n                        lookbehind: true\n                    },\n                    \"conversion-option\": {\n                        pattern: /![sra](?=[:}]$)/,\n                        alias: \"punctuation\"\n                    },\n                    rest: null\n                }\n            },\n            \"string\": /[\\s\\S]+/\n        }\n    },\n    \"triple-quoted-string\": {\n        pattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n        greedy: true,\n        alias: \"string\"\n    },\n    \"string\": {\n        pattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n        greedy: true\n    },\n    \"function\": {\n        pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n        lookbehind: true\n    },\n    \"class-name\": {\n        pattern: /(\\bclass\\s+)\\w+/i,\n        lookbehind: true\n    },\n    \"decorator\": {\n        pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n        lookbehind: true,\n        alias: [\n            \"annotation\",\n            \"punctuation\"\n        ],\n        inside: {\n            \"punctuation\": /\\./\n        }\n    },\n    \"keyword\": /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n    \"builtin\": /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n    \"boolean\": /\\b(?:False|None|True)\\b/,\n    \"number\": /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n    \"operator\": /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    \"punctuation\": /[{}[\\];(),.:]/\n};\nPrism.languages.python[\"string-interpolation\"].inside[\"interpolation\"].inside.rest = Prism.languages.python;\nPrism.languages.py = Prism.languages.python;\nPrism.languages.r = {\n    \"comment\": /#.*/,\n    \"string\": {\n        pattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n    },\n    \"percent-operator\": {\n        // Includes user-defined operators\n        // and %%, %*%, %/%, %in%, %o%, %x%\n        pattern: /%[^%\\s]*%/,\n        alias: \"operator\"\n    },\n    \"boolean\": /\\b(?:FALSE|TRUE)\\b/,\n    \"ellipsis\": /\\.\\.(?:\\.|\\d+)/,\n    \"number\": [\n        /\\b(?:Inf|NaN)\\b/,\n        /(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/\n    ],\n    \"keyword\": /\\b(?:NA|NA_character_|NA_complex_|NA_integer_|NA_real_|NULL|break|else|for|function|if|in|next|repeat|while)\\b/,\n    \"operator\": /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,\n    \"punctuation\": /[(){}\\[\\],;]/\n};\n/**\n * Original by Samuel Flores\n *\n * Adds the following new token classes:\n *     constant, builtin, variable, symbol, regex\n */ (function(Prism) {\n    Prism.languages.ruby = Prism.languages.extend(\"clike\", {\n        \"comment\": {\n            pattern: /#.*|^=begin\\s[\\s\\S]*?^=end/m,\n            greedy: true\n        },\n        \"class-name\": {\n            pattern: /(\\b(?:class|module)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+|\\b[A-Z_]\\w*(?=\\s*\\.\\s*new\\b)/,\n            lookbehind: true,\n            inside: {\n                \"punctuation\": /[.\\\\]/\n            }\n        },\n        \"keyword\": /\\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/,\n        \"operator\": /\\.{2,3}|&\\.|===|<?=>|[!=]?~|(?:&&|\\|\\||<<|>>|\\*\\*|[+\\-*/%<>!^&|=])=?|[?:]/,\n        \"punctuation\": /[(){}[\\].,;]/\n    });\n    Prism.languages.insertBefore(\"ruby\", \"operator\", {\n        \"double-colon\": {\n            pattern: /::/,\n            alias: \"punctuation\"\n        }\n    });\n    var interpolation = {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)#\\{(?:[^{}]|\\{[^{}]*\\})*\\}/,\n        lookbehind: true,\n        inside: {\n            \"content\": {\n                pattern: /^(#\\{)[\\s\\S]+(?=\\}$)/,\n                lookbehind: true,\n                inside: Prism.languages.ruby\n            },\n            \"delimiter\": {\n                pattern: /^#\\{|\\}$/,\n                alias: \"punctuation\"\n            }\n        }\n    };\n    delete Prism.languages.ruby.function;\n    var percentExpression = \"(?:\" + [\n        /([^a-zA-Z0-9\\s{(\\[<=])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n        /\\((?:[^()\\\\]|\\\\[\\s\\S]|\\((?:[^()\\\\]|\\\\[\\s\\S])*\\))*\\)/.source,\n        /\\{(?:[^{}\\\\]|\\\\[\\s\\S]|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\})*\\}/.source,\n        /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S]|\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\])*\\]/.source,\n        /<(?:[^<>\\\\]|\\\\[\\s\\S]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)*>/.source\n    ].join(\"|\") + \")\";\n    var symbolName = /(?:\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|(?:\\b[a-zA-Z_]\\w*|[^\\s\\0-\\x7F]+)[?!]?|\\$.)/.source;\n    Prism.languages.insertBefore(\"ruby\", \"keyword\", {\n        \"regex-literal\": [\n            {\n                pattern: RegExp(/%r/.source + percentExpression + /[egimnosux]{0,6}/.source),\n                greedy: true,\n                inside: {\n                    \"interpolation\": interpolation,\n                    \"regex\": /[\\s\\S]+/\n                }\n            },\n            {\n                pattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n                lookbehind: true,\n                greedy: true,\n                inside: {\n                    \"interpolation\": interpolation,\n                    \"regex\": /[\\s\\S]+/\n                }\n            }\n        ],\n        \"variable\": /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        \"symbol\": [\n            {\n                pattern: RegExp(/(^|[^:]):/.source + symbolName),\n                lookbehind: true,\n                greedy: true\n            },\n            {\n                pattern: RegExp(/([\\r\\n{(,][ \\t]*)/.source + symbolName + /(?=:(?!:))/.source),\n                lookbehind: true,\n                greedy: true\n            }\n        ],\n        \"method-definition\": {\n            pattern: /(\\bdef\\s+)\\w+(?:\\s*\\.\\s*\\w+)?/,\n            lookbehind: true,\n            inside: {\n                \"function\": /\\b\\w+$/,\n                \"keyword\": /^self\\b/,\n                \"class-name\": /^\\w+/,\n                \"punctuation\": /\\./\n            }\n        }\n    });\n    Prism.languages.insertBefore(\"ruby\", \"string\", {\n        \"string-literal\": [\n            {\n                pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),\n                greedy: true,\n                inside: {\n                    \"interpolation\": interpolation,\n                    \"string\": /[\\s\\S]+/\n                }\n            },\n            {\n                pattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n                greedy: true,\n                inside: {\n                    \"interpolation\": interpolation,\n                    \"string\": /[\\s\\S]+/\n                }\n            },\n            {\n                pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n                alias: \"heredoc-string\",\n                greedy: true,\n                inside: {\n                    \"delimiter\": {\n                        pattern: /^<<[-~]?[a-z_]\\w*|\\b[a-z_]\\w*$/i,\n                        inside: {\n                            \"symbol\": /\\b\\w+/,\n                            \"punctuation\": /^<<[-~]?/\n                        }\n                    },\n                    \"interpolation\": interpolation,\n                    \"string\": /[\\s\\S]+/\n                }\n            },\n            {\n                pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n                alias: \"heredoc-string\",\n                greedy: true,\n                inside: {\n                    \"delimiter\": {\n                        pattern: /^<<[-~]?'[a-z_]\\w*'|\\b[a-z_]\\w*$/i,\n                        inside: {\n                            \"symbol\": /\\b\\w+/,\n                            \"punctuation\": /^<<[-~]?'|'$/\n                        }\n                    },\n                    \"string\": /[\\s\\S]+/\n                }\n            }\n        ],\n        \"command-literal\": [\n            {\n                pattern: RegExp(/%x/.source + percentExpression),\n                greedy: true,\n                inside: {\n                    \"interpolation\": interpolation,\n                    \"command\": {\n                        pattern: /[\\s\\S]+/,\n                        alias: \"string\"\n                    }\n                }\n            },\n            {\n                pattern: /`(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|[^\\\\`#\\r\\n])*`/,\n                greedy: true,\n                inside: {\n                    \"interpolation\": interpolation,\n                    \"command\": {\n                        pattern: /[\\s\\S]+/,\n                        alias: \"string\"\n                    }\n                }\n            }\n        ]\n    });\n    delete Prism.languages.ruby.string;\n    Prism.languages.insertBefore(\"ruby\", \"number\", {\n        \"builtin\": /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\\b/,\n        \"constant\": /\\b[A-Z][A-Z0-9_]*(?:[?!]|\\b)/\n    });\n    Prism.languages.rb = Prism.languages.ruby;\n})(Prism);\n(function(Prism) {\n    var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source;\n    for(var i = 0; i < 2; i++){\n        // support 4 levels of nested comments\n        multilineComment = multilineComment.replace(/<self>/g, function() {\n            return multilineComment;\n        });\n    }\n    multilineComment = multilineComment.replace(/<self>/g, function() {\n        return /[^\\s\\S]/.source;\n    });\n    Prism.languages.rust = {\n        \"comment\": [\n            {\n                pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n                lookbehind: true,\n                greedy: true\n            },\n            {\n                pattern: /(^|[^\\\\:])\\/\\/.*/,\n                lookbehind: true,\n                greedy: true\n            }\n        ],\n        \"string\": {\n            pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n            greedy: true\n        },\n        \"char\": {\n            pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n            greedy: true\n        },\n        \"attribute\": {\n            pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n            greedy: true,\n            alias: \"attr-name\",\n            inside: {\n                \"string\": null // see below\n            }\n        },\n        // Closure params should not be confused with bitwise OR |\n        \"closure-params\": {\n            pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"closure-punctuation\": {\n                    pattern: /^\\||\\|$/,\n                    alias: \"punctuation\"\n                },\n                rest: null // see below\n            }\n        },\n        \"lifetime-annotation\": {\n            pattern: /'\\w+/,\n            alias: \"symbol\"\n        },\n        \"fragment-specifier\": {\n            pattern: /(\\$\\w+:)[a-z]+/,\n            lookbehind: true,\n            alias: \"punctuation\"\n        },\n        \"variable\": /\\$\\w+/,\n        \"function-definition\": {\n            pattern: /(\\bfn\\s+)\\w+/,\n            lookbehind: true,\n            alias: \"function\"\n        },\n        \"type-definition\": {\n            pattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n            lookbehind: true,\n            alias: \"class-name\"\n        },\n        \"module-declaration\": [\n            {\n                pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n                lookbehind: true,\n                alias: \"namespace\"\n            },\n            {\n                pattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n                lookbehind: true,\n                alias: \"namespace\",\n                inside: {\n                    \"punctuation\": /::/\n                }\n            }\n        ],\n        \"keyword\": [\n            // https://github.com/rust-lang/reference/blob/master/src/keywords.md\n            /\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n            // primitives and str\n            // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n            /\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/\n        ],\n        // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n        // and Rust's naming conventions recommend snake_case anyway.\n        // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n        \"function\": /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n        \"macro\": {\n            pattern: /\\b\\w+!/,\n            alias: \"property\"\n        },\n        \"constant\": /\\b[A-Z_][A-Z_\\d]+\\b/,\n        \"class-name\": /\\b[A-Z]\\w*\\b/,\n        \"namespace\": {\n            pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n            inside: {\n                \"punctuation\": /::/\n            }\n        },\n        // Hex, oct, bin, dec numbers with visual separators and type suffix\n        \"number\": /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n        \"boolean\": /\\b(?:false|true)\\b/,\n        \"punctuation\": /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n        \"operator\": /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n    };\n    Prism.languages.rust[\"closure-params\"].inside.rest = Prism.languages.rust;\n    Prism.languages.rust[\"attribute\"].inside[\"string\"] = Prism.languages.rust[\"string\"];\n})(Prism);\n(function(Prism) {\n    Prism.languages.sass = Prism.languages.extend(\"css\", {\n        // Sass comments don't need to be closed, only indented\n        \"comment\": {\n            pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n            lookbehind: true,\n            greedy: true\n        }\n    });\n    Prism.languages.insertBefore(\"sass\", \"atrule\", {\n        // We want to consume the whole line\n        \"atrule-line\": {\n            // Includes support for = and + shortcuts\n            pattern: /^(?:[ \\t]*)[@+=].+/m,\n            greedy: true,\n            inside: {\n                \"atrule\": /(?:@[\\w-]+|[+=])/\n            }\n        }\n    });\n    delete Prism.languages.sass.atrule;\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n    var operator = [\n        /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/,\n        {\n            pattern: /(\\s)-(?=\\s)/,\n            lookbehind: true\n        }\n    ];\n    Prism.languages.insertBefore(\"sass\", \"property\", {\n        // We want to consume the whole line\n        \"variable-line\": {\n            pattern: /^[ \\t]*\\$.+/m,\n            greedy: true,\n            inside: {\n                \"punctuation\": /:/,\n                \"variable\": variable,\n                \"operator\": operator\n            }\n        },\n        // We want to consume the whole line\n        \"property-line\": {\n            pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n            greedy: true,\n            inside: {\n                \"property\": [\n                    /[^:\\s]+(?=\\s*:)/,\n                    {\n                        pattern: /(:)[^:\\s]+/,\n                        lookbehind: true\n                    }\n                ],\n                \"punctuation\": /:/,\n                \"variable\": variable,\n                \"operator\": operator,\n                \"important\": Prism.languages.sass.important\n            }\n        }\n    });\n    delete Prism.languages.sass.property;\n    delete Prism.languages.sass.important;\n    // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore(\"sass\", \"punctuation\", {\n        \"selector\": {\n            pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n            lookbehind: true,\n            greedy: true\n        }\n    });\n})(Prism);\nPrism.languages.scss = Prism.languages.extend(\"css\", {\n    \"comment\": {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n    },\n    \"atrule\": {\n        pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n        inside: {\n            \"rule\": /@[\\w-]+/\n        }\n    },\n    // url, compassified\n    \"url\": /(?:[-a-z]+-)?url(?=\\()/i,\n    // CSS selector regex is not appropriate for Sass\n    // since there can be lot more things (var, @ directive, nesting..)\n    // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n    // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n    // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n    // can \"pass\" as a selector- e.g: proper#{$erty})\n    // this one was hard to do, so please be careful if you edit this one :)\n    \"selector\": {\n        // Initial look-ahead is used to prevent matching of blank selectors\n        pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n        inside: {\n            \"parent\": {\n                pattern: /&/,\n                alias: \"important\"\n            },\n            \"placeholder\": /%[-\\w]+/,\n            \"variable\": /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n        }\n    },\n    \"property\": {\n        pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n        inside: {\n            \"variable\": /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n        }\n    }\n});\nPrism.languages.insertBefore(\"scss\", \"atrule\", {\n    \"keyword\": [\n        /@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i,\n        {\n            pattern: /( )(?:from|through)(?= )/,\n            lookbehind: true\n        }\n    ]\n});\nPrism.languages.insertBefore(\"scss\", \"important\", {\n    // var and interpolated vars\n    \"variable\": /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore(\"scss\", \"function\", {\n    \"module-modifier\": {\n        pattern: /\\b(?:as|hide|show|with)\\b/i,\n        alias: \"keyword\"\n    },\n    \"placeholder\": {\n        pattern: /%[-\\w]+/,\n        alias: \"selector\"\n    },\n    \"statement\": {\n        pattern: /\\B!(?:default|optional)\\b/i,\n        alias: \"keyword\"\n    },\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"null\": {\n        pattern: /\\bnull\\b/,\n        alias: \"keyword\"\n    },\n    \"operator\": {\n        pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n        lookbehind: true\n    }\n});\nPrism.languages.scss[\"atrule\"].inside.rest = Prism.languages.scss;\nPrism.languages.sql = {\n    \"comment\": {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n        lookbehind: true\n    },\n    \"variable\": [\n        {\n            pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n            greedy: true\n        },\n        /@[\\w.$]+/\n    ],\n    \"string\": {\n        pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n        greedy: true,\n        lookbehind: true\n    },\n    \"identifier\": {\n        pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n            \"punctuation\": /^`|`$/\n        }\n    },\n    \"function\": /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n    // Should we highlight user defined functions too?\n    \"keyword\": /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n    \"boolean\": /\\b(?:FALSE|NULL|TRUE)\\b/i,\n    \"number\": /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n    \"operator\": /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n    \"punctuation\": /[;[\\]()`,.]/\n};\nPrism.languages.swift = {\n    \"comment\": {\n        // Nested comments are supported up to 2 levels\n        pattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n        lookbehind: true,\n        greedy: true\n    },\n    \"string-literal\": [\n        // https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n        {\n            pattern: RegExp(/(^|[^\"#])/.source + \"(?:\" + /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source + \"|\" + /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source + \")\" + /(?![\"#])/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"interpolation\": {\n                    pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n                    lookbehind: true,\n                    inside: null // see below\n                },\n                \"interpolation-punctuation\": {\n                    pattern: /^\\)|\\\\\\($/,\n                    alias: \"punctuation\"\n                },\n                \"punctuation\": /\\\\(?=[\\r\\n])/,\n                \"string\": /[\\s\\S]+/\n            }\n        },\n        {\n            pattern: RegExp(/(^|[^\"#])(#+)/.source + \"(?:\" + /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source + \"|\" + /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source + \")\" + \"\\\\2\"),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"interpolation\": {\n                    pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n                    lookbehind: true,\n                    inside: null // see below\n                },\n                \"interpolation-punctuation\": {\n                    pattern: /^\\)|\\\\#+\\($/,\n                    alias: \"punctuation\"\n                },\n                \"string\": /[\\s\\S]+/\n            }\n        }\n    ],\n    \"directive\": {\n        // directives with conditions\n        pattern: RegExp(/#/.source + \"(?:\" + (/(?:elseif|if)\\b/.source + \"(?:[ \t]*\" + /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source + \")+\") + \"|\" + /(?:else|endif)\\b/.source + \")\"),\n        alias: \"property\",\n        inside: {\n            \"directive-name\": /^#\\w+/,\n            \"boolean\": /\\b(?:false|true)\\b/,\n            \"number\": /\\b\\d+(?:\\.\\d+)*\\b/,\n            \"operator\": /!|&&|\\|\\||[<>]=?/,\n            \"punctuation\": /[(),]/\n        }\n    },\n    \"literal\": {\n        pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n        alias: \"constant\"\n    },\n    \"other-directive\": {\n        pattern: /#\\w+\\b/,\n        alias: \"property\"\n    },\n    \"attribute\": {\n        pattern: /@\\w+/,\n        alias: \"atrule\"\n    },\n    \"function-definition\": {\n        pattern: /(\\bfunc\\s+)\\w+/,\n        lookbehind: true,\n        alias: \"function\"\n    },\n    \"label\": {\n        // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n        pattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n        lookbehind: true,\n        alias: \"important\"\n    },\n    \"keyword\": /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"nil\": {\n        pattern: /\\bnil\\b/,\n        alias: \"constant\"\n    },\n    \"short-argument\": /\\$\\d+\\b/,\n    \"omit\": {\n        pattern: /\\b_\\b/,\n        alias: \"keyword\"\n    },\n    \"number\": /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n    \"class-name\": /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    \"constant\": /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n    // This regex only supports ASCII operators.\n    \"operator\": /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n    \"punctuation\": /[{}[\\]();,.:\\\\]/\n};\nPrism.languages.swift[\"string-literal\"].forEach(function(rule) {\n    rule.inside[\"interpolation\"].inside = Prism.languages.swift;\n});\n(function(Prism) {\n    Prism.languages.typescript = Prism.languages.extend(\"javascript\", {\n        \"class-name\": {\n            pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n            lookbehind: true,\n            greedy: true,\n            inside: null // see below\n        },\n        \"builtin\": /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    });\n    // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n    /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n    /\\btype\\b(?=\\s*(?:[\\{*]|$))/);\n    // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript[\"parameter\"];\n    delete Prism.languages.typescript[\"literal-property\"];\n    // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend(\"typescript\", {});\n    delete typeInside[\"class-name\"];\n    Prism.languages.typescript[\"class-name\"].inside = typeInside;\n    Prism.languages.insertBefore(\"typescript\", \"function\", {\n        \"decorator\": {\n            pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n            inside: {\n                \"at\": {\n                    pattern: /^@/,\n                    alias: \"operator\"\n                },\n                \"function\": /^[\\s\\S]+/\n            }\n        },\n        \"generic-function\": {\n            // e.g. foo<T extends \"bar\" | \"baz\">( ...\n            pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n            greedy: true,\n            inside: {\n                \"function\": /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n                \"generic\": {\n                    pattern: /<[\\s\\S]+/,\n                    // everything after the first <\n                    alias: \"class-name\",\n                    inside: typeInside\n                }\n            }\n        }\n    });\n    Prism.languages.ts = Prism.languages.typescript;\n})(Prism);\n(function(Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript);\n    Prism.languages.tsx = Prism.languages.extend(\"jsx\", typescript);\n    // doesn't work with TS because TS is too complex\n    delete Prism.languages.tsx[\"parameter\"];\n    delete Prism.languages.tsx[\"literal-property\"];\n    // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag;\n    tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + \"(?:\" + tag.pattern.source + \")\", tag.pattern.flags);\n    tag.lookbehind = true;\n})(Prism);\nPrism.languages.basic = {\n    \"comment\": {\n        pattern: /(?:!|REM\\b).+/i,\n        inside: {\n            \"keyword\": /^REM/i\n        }\n    },\n    \"string\": {\n        pattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^\\w +\\-.])*\"/,\n        greedy: true\n    },\n    \"number\": /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n    \"keyword\": /\\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SELECT CASE|SHARED|SHELL|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\\$|\\b)/i,\n    \"function\": /\\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\\$|\\b)/i,\n    \"operator\": /<[=>]?|>=?|[+\\-*\\/^=&]|\\b(?:AND|EQV|IMP|NOT|OR|XOR)\\b/i,\n    \"punctuation\": /[,;:()]/\n};\nPrism.languages.vbnet = Prism.languages.extend(\"basic\", {\n    \"comment\": [\n        {\n            pattern: /(?:!|REM\\b).+/i,\n            inside: {\n                \"keyword\": /^REM/i\n            }\n        },\n        {\n            pattern: /(^|[^\\\\:])'.*/,\n            lookbehind: true,\n            greedy: true\n        }\n    ],\n    \"string\": {\n        pattern: /(^|[^\"])\"(?:\"\"|[^\"])*\"(?!\")/,\n        lookbehind: true,\n        greedy: true\n    },\n    \"keyword\": /(?:\\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDBL|CDEC|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DEFAULT|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LET|LIB|LIKE|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPERATOR|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHELL|SHORT|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SWAP|SYNCLOCK|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\\$|\\b)/i,\n    \"punctuation\": /[,;:(){}]/\n});\nconst languages = [\n    {\n        label: \"C\",\n        value: \"c\"\n    },\n    {\n        label: \"C++\",\n        value: \"cpp\"\n    },\n    {\n        label: \"Arduino\",\n        value: \"arduino\"\n    },\n    {\n        label: \"Bash\",\n        value: \"bash\"\n    },\n    {\n        label: \"C#\",\n        value: \"csharp\"\n    },\n    {\n        label: \"CSS\",\n        value: \"css\"\n    },\n    {\n        label: \"Diff\",\n        value: \"diff\"\n    },\n    {\n        label: \"Go\",\n        value: \"go\"\n    },\n    {\n        label: \"INI\",\n        value: \"ini\"\n    },\n    {\n        label: \"Java\",\n        value: \"java\"\n    },\n    {\n        label: \"JavaScript\",\n        value: \"javascript\"\n    },\n    {\n        label: \"JSX\",\n        value: \"jsx\"\n    },\n    {\n        label: \"JSON\",\n        value: \"json\"\n    },\n    {\n        label: \"Kotlin\",\n        value: \"kotlin\"\n    },\n    {\n        label: \"Less\",\n        value: \"less\"\n    },\n    {\n        label: \"Lua\",\n        value: \"lua\"\n    },\n    {\n        label: \"Makefile\",\n        value: \"makefile\"\n    },\n    {\n        label: \"Markdown\",\n        value: \"markdown\"\n    },\n    {\n        label: \"Objective-C\",\n        value: \"objectivec\"\n    },\n    {\n        label: \"Perl\",\n        value: \"perl\"\n    },\n    {\n        label: \"PHP\",\n        value: \"php\"\n    },\n    {\n        label: \"Python\",\n        value: \"python\"\n    },\n    {\n        label: \"R\",\n        value: \"r\"\n    },\n    {\n        label: \"Ruby\",\n        value: \"ruby\"\n    },\n    {\n        label: \"Rust\",\n        value: \"rust\"\n    },\n    {\n        label: \"Sass\",\n        value: \"sass\"\n    },\n    {\n        label: \"SCSS\",\n        value: \"scss\"\n    },\n    {\n        label: \"SQL\",\n        value: \"sql\"\n    },\n    {\n        label: \"Swift\",\n        value: \"swift\"\n    },\n    {\n        label: \"TypeScript\",\n        value: \"typescript\"\n    },\n    {\n        label: \"TSX\",\n        value: \"tsx\"\n    },\n    {\n        label: \"VB.NET\",\n        value: \"vbnet\"\n    },\n    {\n        label: \"YAML\",\n        value: \"yaml\"\n    }\n];\nconst canonicalNameToLabel = new Map(languages.map((x)=>[\n        x.value,\n        x.label\n    ]));\nconst labelToCanonicalName = new Map(languages.map((x)=>[\n        x.label,\n        x.value\n    ]));\nconst languageToCanonicalName = new Map(languages.map((lang)=>[\n        Prism.languages[lang.value],\n        lang.value\n    ]));\nconst aliasesToCanonicalName = new Map(Object.keys(Prism.languages).flatMap((lang)=>{\n    const canonicalName = languageToCanonicalName.get(Prism.languages[lang]);\n    if (canonicalName === undefined) {\n        return [];\n    }\n    return [\n        [\n            lang,\n            canonicalName\n        ]\n    ];\n}));\nconst languagesToAliases = new Map(languages.map((lang)=>[\n        lang.value,\n        []\n    ]));\nfor (const [alias, canonicalName] of aliasesToCanonicalName){\n    languagesToAliases.get(canonicalName).push(alias);\n}\nconst languagesWithAliases = [\n    {\n        label: \"Plain text\",\n        value: \"plain\",\n        aliases: []\n    },\n    ...[\n        ...languagesToAliases\n    ].map(([canonicalName, aliases])=>({\n            label: canonicalNameToLabel.get(canonicalName),\n            value: canonicalName,\n            aliases\n        }))\n];\nconst aliasesToLabel = new Map([\n    ...aliasesToCanonicalName\n].map(([alias, canonicalName])=>[\n        alias,\n        canonicalNameToLabel.get(canonicalName)\n    ]));\nconst codeBlockShortcutPattern = /^```(\\w+)? ?$/;\nfunction withCodeBlock(documentFeatures, componentBlocks, editor) {\n    const { insertBreak, normalizeNode, insertText } = editor;\n    function codeBlockShortcut(block) {\n        var _aliasesToCanonicalNa;\n        if ((block === null || block === void 0 ? void 0 : block[0].type) !== \"paragraph\" || block[0].children.length !== 1 || block[0].children[0].type !== undefined) {\n            return false;\n        }\n        const match = codeBlockShortcutPattern.exec(block[0].children[0].text);\n        if (!match) {\n            return false;\n        }\n        const locationDocumentFeatures = getAncestorComponentChildFieldDocumentFeatures(editor, documentFeatures, componentBlocks);\n        if (locationDocumentFeatures && (locationDocumentFeatures.kind === \"inline\" || !locationDocumentFeatures.documentFeatures.formatting.blockTypes.code)) {\n            return false;\n        }\n        // so that this starts a new undo group\n        editor.history.undos.push({\n            operations: [],\n            selectionBefore: editor.selection\n        });\n        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.select(editor, block[1]);\n        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.delete(editor);\n        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.wrapNodes(editor, {\n            type: \"code\",\n            ...match[1] ? {\n                language: (_aliasesToCanonicalNa = aliasesToCanonicalName.get(match[1].toLowerCase())) !== null && _aliasesToCanonicalNa !== void 0 ? _aliasesToCanonicalNa : match[1]\n            } : {},\n            children: []\n        }, {\n            match: (node)=>node.type === \"paragraph\"\n        });\n        return true;\n    }\n    editor.insertBreak = ()=>{\n        const block = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.above(editor, {\n            match: isBlock\n        });\n        if ((block === null || block === void 0 ? void 0 : block[0].type) === \"code\" && slate__WEBPACK_IMPORTED_MODULE_6__.Text.isText(block[0].children[0])) {\n            const text = block[0].children[0].text;\n            if (text[text.length - 1] === \"\\n\" && editor.selection && slate__WEBPACK_IMPORTED_MODULE_6__.Range.isCollapsed(editor.selection) && slate__WEBPACK_IMPORTED_MODULE_6__.Point.equals(slate__WEBPACK_IMPORTED_MODULE_6__.Editor.end(editor, block[1]), editor.selection.anchor)) {\n                insertBreak();\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.setNodes(editor, {\n                    type: \"paragraph\",\n                    children: []\n                });\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.delete(editor, {\n                    distance: 1,\n                    at: {\n                        path: [\n                            ...block[1],\n                            0\n                        ],\n                        offset: text.length - 1\n                    }\n                });\n                return;\n            }\n            editor.insertText(\"\\n\");\n            return;\n        }\n        if (editor.selection && slate__WEBPACK_IMPORTED_MODULE_6__.Range.isCollapsed(editor.selection) && codeBlockShortcut(block)) {\n            return;\n        }\n        insertBreak();\n    };\n    editor.insertText = (text)=>{\n        insertText(text);\n        if (text === \" \" && editor.selection && slate__WEBPACK_IMPORTED_MODULE_6__.Range.isCollapsed(editor.selection)) {\n            codeBlockShortcut(slate__WEBPACK_IMPORTED_MODULE_6__.Editor.above(editor, {\n                match: isBlock\n            }));\n        }\n    };\n    editor.normalizeNode = ([node, path])=>{\n        if (node.type === \"code\" && slate__WEBPACK_IMPORTED_MODULE_6__.Element.isElement(node)) {\n            for (const [index, childNode] of node.children.entries()){\n                if (!slate__WEBPACK_IMPORTED_MODULE_6__.Text.isText(childNode)) {\n                    if (editor.isVoid(childNode)) {\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                            at: [\n                                ...path,\n                                index\n                            ]\n                        });\n                    } else {\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n                            at: [\n                                ...path,\n                                index\n                            ]\n                        });\n                    }\n                    return;\n                }\n                const marks = Object.keys(childNode).filter((x)=>x !== \"text\");\n                if (marks.length) {\n                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unsetNodes(editor, marks, {\n                        at: [\n                            ...path,\n                            index\n                        ]\n                    });\n                    return;\n                }\n            }\n        }\n        normalizeNode([\n            node,\n            path\n        ]);\n    };\n    return editor;\n}\nfunction findChildPropPathsForProp(value, schema, path) {\n    switch(schema.kind){\n        case \"form\":\n            return [];\n        case \"child\":\n            return [\n                {\n                    path: path,\n                    options: schema.options\n                }\n            ];\n        case \"conditional\":\n            return findChildPropPathsForProp(value.value, schema.values[value.discriminant], path.concat(\"value\"));\n        case \"object\":\n            {\n                const paths = [];\n                Object.keys(schema.fields).forEach((key)=>{\n                    paths.push(...findChildPropPathsForProp(value[key], schema.fields[key], path.concat(key)));\n                });\n                return paths;\n            }\n        case \"array\":\n            {\n                const paths = [];\n                value.forEach((val, i)=>{\n                    paths.push(...findChildPropPathsForProp(val, schema.element, path.concat(i)));\n                });\n                return paths;\n            }\n    }\n}\nfunction findChildPropPaths(value, props) {\n    const propPaths = findChildPropPathsForProp(value, {\n        kind: \"object\",\n        fields: props\n    }, []);\n    if (!propPaths.length) {\n        return [\n            {\n                path: undefined,\n                options: {\n                    kind: \"inline\",\n                    placeholder: \"\"\n                }\n            }\n        ];\n    }\n    return propPaths;\n}\nfunction getAncestorComponentBlock(editor) {\n    if (editor.selection) {\n        const ancestorEntry = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.above(editor, {\n            match: (node)=>isBlock(node) && node.type !== \"paragraph\"\n        });\n        if (ancestorEntry && (ancestorEntry[0].type === \"component-block-prop\" || ancestorEntry[0].type === \"component-inline-prop\")) {\n            return {\n                isInside: true,\n                componentBlock: slate__WEBPACK_IMPORTED_MODULE_6__.Editor.parent(editor, ancestorEntry[1]),\n                prop: ancestorEntry\n            };\n        }\n    }\n    return {\n        isInside: false\n    };\n}\nconst alreadyNormalizedThings = new WeakMap();\nfunction normalizeNodeWithinComponentProp([node, path], editor, fieldOptions) {\n    let alreadyNormalizedNodes = alreadyNormalizedThings.get(fieldOptions);\n    if (!alreadyNormalizedNodes) {\n        alreadyNormalizedNodes = new WeakSet();\n        alreadyNormalizedThings.set(fieldOptions, alreadyNormalizedNodes);\n    }\n    if (alreadyNormalizedNodes.has(node)) {\n        return false;\n    }\n    let didNormalization = false;\n    if (fieldOptions.inlineMarks !== \"inherit\" && slate__WEBPACK_IMPORTED_MODULE_6__.Text.isText(node)) {\n        didNormalization = normalizeTextBasedOnInlineMarksAndSoftBreaks([\n            node,\n            path\n        ], editor, fieldOptions.inlineMarks, fieldOptions.softBreaks);\n    }\n    if (slate__WEBPACK_IMPORTED_MODULE_6__.Element.isElement(node)) {\n        let childrenHasChanged = node.children.map((node, i)=>normalizeNodeWithinComponentProp([\n                node,\n                [\n                    ...path,\n                    i\n                ]\n            ], editor, fieldOptions))// .map then .some because we don't want to exit early\n        .some((x)=>x);\n        if (fieldOptions.kind === \"block\") {\n            if (node.type === \"component-block\") {\n                if (!fieldOptions.componentBlocks) {\n                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n                        at: path\n                    });\n                    didNormalization = true;\n                }\n            } else {\n                didNormalization = normalizeElementBasedOnDocumentFeatures([\n                    node,\n                    path\n                ], editor, fieldOptions.documentFeatures) || childrenHasChanged;\n            }\n        } else {\n            didNormalization = normalizeInlineBasedOnLinks([\n                node,\n                path\n            ], editor, fieldOptions.documentFeatures.links);\n        }\n    }\n    if (didNormalization === false) {\n        alreadyNormalizedNodes.add(node);\n    }\n    return didNormalization;\n}\nfunction canSchemaContainChildField(rootSchema) {\n    const queue = new Set([\n        rootSchema\n    ]);\n    for (const schema of queue){\n        if (schema.kind === \"form\") ;\n        else if (schema.kind === \"child\") {\n            return true;\n        } else if (schema.kind === \"array\") {\n            queue.add(schema.element);\n        } else if (schema.kind === \"object\") {\n            for (const innerProp of Object.values(schema.fields)){\n                queue.add(innerProp);\n            }\n        } else if (schema.kind === \"conditional\") {\n            for (const innerProp of Object.values(schema.values)){\n                queue.add(innerProp);\n            }\n        } else {\n            (0,emery__WEBPACK_IMPORTED_MODULE_1__.assertNever)(schema);\n        }\n    }\n    return false;\n}\nfunction doesSchemaOnlyEverContainASingleChildField(rootSchema) {\n    const queue = new Set([\n        rootSchema\n    ]);\n    let hasFoundChildField = false;\n    for (const schema of queue){\n        if (schema.kind === \"form\") ;\n        else if (schema.kind === \"child\") {\n            if (hasFoundChildField) {\n                return false;\n            }\n            hasFoundChildField = true;\n        } else if (schema.kind === \"array\") {\n            if (canSchemaContainChildField(schema.element)) {\n                return false;\n            }\n        } else if (schema.kind === \"object\") {\n            for (const innerProp of Object.values(schema.fields)){\n                queue.add(innerProp);\n            }\n        } else if (schema.kind === \"conditional\") {\n            for (const innerProp of Object.values(schema.values)){\n                queue.add(innerProp);\n            }\n        } else {\n            (0,emery__WEBPACK_IMPORTED_MODULE_1__.assertNever)(schema);\n        }\n    }\n    return hasFoundChildField;\n}\nfunction findArrayFieldsWithSingleChildField(schema, value) {\n    const propPaths = [];\n    traverseProps(schema, value, (schema, value, path)=>{\n        if (schema.kind === \"array\" && doesSchemaOnlyEverContainASingleChildField(schema.element)) {\n            propPaths.push([\n                path,\n                schema\n            ]);\n        }\n    });\n    return propPaths;\n}\nfunction isEmptyChildFieldNode(element) {\n    const firstChild = element.children[0];\n    return element.children.length === 1 && (element.type === \"component-inline-prop\" && firstChild.type === undefined && firstChild.text === \"\" || element.type === \"component-block-prop\" && firstChild.type === \"paragraph\" && firstChild.children.length === 1 && firstChild.children[0].type === undefined && firstChild.children[0].text === \"\");\n}\nfunction withComponentBlocks(blockComponents, editorDocumentFeatures, editor) {\n    // note that conflicts between the editor document features\n    // and the child field document features are dealt with elsewhere\n    const memoizedGetDocumentFeaturesForChildField = (0,_emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_4__[\"default\"])((options)=>{\n        return getDocumentFeaturesForChildField(editorDocumentFeatures, options);\n    });\n    const { normalizeNode, deleteBackward, insertBreak } = editor;\n    editor.deleteBackward = (unit)=>{\n        if (editor.selection) {\n            const ancestorComponentBlock = getAncestorComponentBlock(editor);\n            if (ancestorComponentBlock.isInside && slate__WEBPACK_IMPORTED_MODULE_6__.Range.isCollapsed(editor.selection) && slate__WEBPACK_IMPORTED_MODULE_6__.Editor.isStart(editor, editor.selection.anchor, ancestorComponentBlock.prop[1]) && ancestorComponentBlock.prop[1][ancestorComponentBlock.prop[1].length - 1] === 0) {\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n                    at: ancestorComponentBlock.componentBlock[1]\n                });\n                return;\n            }\n        }\n        deleteBackward(unit);\n    };\n    editor.insertBreak = ()=>{\n        const ancestorComponentBlock = getAncestorComponentBlock(editor);\n        if (editor.selection && ancestorComponentBlock.isInside) {\n            const { prop: [componentPropNode, componentPropPath], componentBlock: [componentBlockNode, componentBlockPath] } = ancestorComponentBlock;\n            const isLastProp = componentPropPath[componentPropPath.length - 1] === componentBlockNode.children.length - 1;\n            if (componentPropNode.type === \"component-block-prop\") {\n                const [[paragraphNode, paragraphPath]] = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.nodes(editor, {\n                    match: (node)=>node.type === \"paragraph\"\n                });\n                const isLastParagraph = paragraphPath[paragraphPath.length - 1] === componentPropNode.children.length - 1;\n                if (slate__WEBPACK_IMPORTED_MODULE_6__.Node.string(paragraphNode) === \"\" && isLastParagraph) {\n                    if (isLastProp) {\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.moveNodes(editor, {\n                            at: paragraphPath,\n                            to: slate__WEBPACK_IMPORTED_MODULE_6__.Path.next(ancestorComponentBlock.componentBlock[1])\n                        });\n                    } else {\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.move(editor, {\n                            distance: 1,\n                            unit: \"line\"\n                        });\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                            at: paragraphPath\n                        });\n                    }\n                    return;\n                }\n            }\n            if (componentPropNode.type === \"component-inline-prop\") {\n                slate__WEBPACK_IMPORTED_MODULE_6__.Editor.withoutNormalizing(editor, ()=>{\n                    const componentBlock = blockComponents[componentBlockNode.component];\n                    if (componentPropNode.propPath !== undefined && componentBlock !== undefined) {\n                        const rootSchema = {\n                            kind: \"object\",\n                            fields: componentBlock.schema\n                        };\n                        const ancestorFields = getAncestorSchemas(rootSchema, componentPropNode.propPath, componentBlockNode.props);\n                        const idx = [\n                            ...ancestorFields\n                        ].reverse().findIndex((item)=>item.kind === \"array\");\n                        if (idx !== -1) {\n                            const arrayFieldIdx = ancestorFields.length - 1 - idx;\n                            const arrayField = ancestorFields[arrayFieldIdx];\n                            (0,emery__WEBPACK_IMPORTED_MODULE_1__.assert)(arrayField.kind === \"array\");\n                            const val = getValueAtPropPath(componentBlockNode.props, componentPropNode.propPath.slice(0, arrayFieldIdx));\n                            if (doesSchemaOnlyEverContainASingleChildField(arrayField.element)) {\n                                if (slate__WEBPACK_IMPORTED_MODULE_6__.Node.string(componentPropNode) === \"\" && val.length - 1 === componentPropNode.propPath[arrayFieldIdx]) {\n                                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                                        at: componentPropPath\n                                    });\n                                    if (isLastProp) {\n                                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.insertNodes(editor, {\n                                            type: \"paragraph\",\n                                            children: [\n                                                {\n                                                    text: \"\"\n                                                }\n                                            ]\n                                        }, {\n                                            at: slate__WEBPACK_IMPORTED_MODULE_6__.Path.next(componentBlockPath)\n                                        });\n                                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_6__.Path.next(componentBlockPath));\n                                    } else {\n                                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.move(editor, {\n                                            distance: 1,\n                                            unit: \"line\"\n                                        });\n                                    }\n                                } else {\n                                    insertBreak();\n                                }\n                                return;\n                            }\n                        }\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.splitNodes(editor, {\n                        always: true\n                    });\n                    const splitNodePath = slate__WEBPACK_IMPORTED_MODULE_6__.Path.next(componentPropPath);\n                    if (isLastProp) {\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.moveNodes(editor, {\n                            at: splitNodePath,\n                            to: slate__WEBPACK_IMPORTED_MODULE_6__.Path.next(componentBlockPath)\n                        });\n                    } else {\n                        moveChildren(editor, splitNodePath, [\n                            ...slate__WEBPACK_IMPORTED_MODULE_6__.Path.next(splitNodePath),\n                            0\n                        ]);\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                            at: splitNodePath\n                        });\n                    }\n                });\n                return;\n            }\n        }\n        insertBreak();\n    };\n    editor.normalizeNode = (entry)=>{\n        const [node, path] = entry;\n        if (node.type === \"component-inline-prop\" && !node.propPath && (node.children.length !== 1 || !slate__WEBPACK_IMPORTED_MODULE_6__.Text.isText(node.children[0]) || node.children[0].text !== \"\")) {\n            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                at: path\n            });\n            return;\n        }\n        if (node.type === \"component-block\") {\n            const componentBlock = blockComponents[node.component];\n            if (componentBlock) {\n                const rootSchema = {\n                    kind: \"object\",\n                    fields: componentBlock.schema\n                };\n                const updatedProps = addMissingFields(node.props, rootSchema);\n                if (updatedProps !== node.props) {\n                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.setNodes(editor, {\n                        props: updatedProps\n                    }, {\n                        at: path\n                    });\n                    return;\n                }\n                for (const [propPath, arrayField] of findArrayFieldsWithSingleChildField(rootSchema, node.props)){\n                    if (node.children.length === 1 && node.children[0].type === \"component-inline-prop\" && node.children[0].propPath === undefined) {\n                        break;\n                    }\n                    const nodesWithin = [];\n                    for (const [idx, childNode] of node.children.entries()){\n                        if ((childNode.type === \"component-block-prop\" || childNode.type === \"component-inline-prop\") && childNode.propPath !== undefined) {\n                            const subPath = childNode.propPath.concat();\n                            while(subPath.length){\n                                if (typeof subPath.pop() === \"number\") break;\n                            }\n                            if (areArraysEqual(propPath, subPath)) {\n                                nodesWithin.push([\n                                    idx,\n                                    childNode\n                                ]);\n                            }\n                        }\n                    }\n                    const arrVal = getValueAtPropPath(node.props, propPath);\n                    const prevKeys = getKeysForArrayValue(arrVal);\n                    const prevKeysSet = new Set(prevKeys);\n                    const alreadyUsedIndicies = new Set();\n                    const newVal = [];\n                    const newKeys = [];\n                    const getNewKey = ()=>{\n                        let key = getNewArrayElementKey();\n                        while(prevKeysSet.has(key)){\n                            key = getNewArrayElementKey();\n                        }\n                        return key;\n                    };\n                    for (const [, node] of nodesWithin){\n                        const idxFromValue = node.propPath[propPath.length];\n                        (0,emery__WEBPACK_IMPORTED_MODULE_1__.assert)(typeof idxFromValue === \"number\");\n                        if (arrVal.length <= idxFromValue || alreadyUsedIndicies.has(idxFromValue) && isEmptyChildFieldNode(node)) {\n                            newVal.push(getInitialPropsValue(arrayField.element));\n                            newKeys.push(getNewKey());\n                        } else {\n                            alreadyUsedIndicies.add(idxFromValue);\n                            newVal.push(arrVal[idxFromValue]);\n                            newKeys.push(alreadyUsedIndicies.has(idxFromValue) ? getNewKey() : prevKeys[idxFromValue]);\n                        }\n                    }\n                    setKeysForArrayValue(newVal, newKeys);\n                    if (!areArraysEqual(arrVal, newVal)) {\n                        const transformedProps = replaceValueAtPropPath(rootSchema, node.props, newVal, propPath);\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.setNodes(editor, {\n                            props: transformedProps\n                        }, {\n                            at: path\n                        });\n                        for (const [idx, [idxInChildrenOfBlock, nodeWithin]] of nodesWithin.entries()){\n                            const newPropPath = [\n                                ...nodeWithin.propPath\n                            ];\n                            newPropPath[propPath.length] = idx;\n                            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.setNodes(editor, {\n                                propPath: newPropPath\n                            }, {\n                                at: [\n                                    ...path,\n                                    idxInChildrenOfBlock\n                                ]\n                            });\n                        }\n                        return;\n                    }\n                }\n                const missingKeys = new Map(findChildPropPaths(node.props, componentBlock.schema).map((x)=>[\n                        JSON.stringify(x.path),\n                        x.options.kind\n                    ]));\n                node.children.forEach((node)=>{\n                    (0,emery__WEBPACK_IMPORTED_MODULE_1__.assert)(node.type === \"component-block-prop\" || node.type === \"component-inline-prop\");\n                    missingKeys.delete(JSON.stringify(node.propPath));\n                });\n                if (missingKeys.size) {\n                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.insertNodes(editor, [\n                        ...missingKeys\n                    ].map(([prop, kind])=>({\n                            type: `component-${kind}-prop`,\n                            propPath: prop ? JSON.parse(prop) : prop,\n                            children: [\n                                {\n                                    text: \"\"\n                                }\n                            ]\n                        })), {\n                        at: [\n                            ...path,\n                            node.children.length\n                        ]\n                    });\n                    return;\n                }\n                const foundProps = new Set();\n                const stringifiedInlinePropPaths = {};\n                findChildPropPaths(node.props, blockComponents[node.component].schema).forEach((x, index)=>{\n                    stringifiedInlinePropPaths[JSON.stringify(x.path)] = {\n                        options: x.options,\n                        index\n                    };\n                });\n                for (const [index, childNode] of node.children.entries()){\n                    if (// children that are not these will be handled by\n                    // the generic allowedChildren normalization\n                    childNode.type !== \"component-inline-prop\" && childNode.type !== \"component-block-prop\") {\n                        continue;\n                    }\n                    const childPath = [\n                        ...path,\n                        index\n                    ];\n                    const stringifiedPropPath = JSON.stringify(childNode.propPath);\n                    if (stringifiedInlinePropPaths[stringifiedPropPath] === undefined) {\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                            at: childPath\n                        });\n                        return;\n                    }\n                    if (foundProps.has(stringifiedPropPath)) {\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                            at: childPath\n                        });\n                        return;\n                    }\n                    foundProps.add(stringifiedPropPath);\n                    const propInfo = stringifiedInlinePropPaths[stringifiedPropPath];\n                    const expectedIndex = propInfo.index;\n                    if (index !== expectedIndex) {\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.moveNodes(editor, {\n                            at: childPath,\n                            to: [\n                                ...path,\n                                expectedIndex\n                            ]\n                        });\n                        return;\n                    }\n                    const expectedChildNodeType = `component-${propInfo.options.kind}-prop`;\n                    if (childNode.type !== expectedChildNodeType) {\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.setNodes(editor, {\n                            type: expectedChildNodeType\n                        }, {\n                            at: childPath\n                        });\n                        return;\n                    }\n                    const documentFeatures = memoizedGetDocumentFeaturesForChildField(propInfo.options);\n                    if (normalizeNodeWithinComponentProp([\n                        childNode,\n                        childPath\n                    ], editor, documentFeatures)) {\n                        return;\n                    }\n                }\n            }\n        }\n        normalizeNode(entry);\n    };\n    return editor;\n}\n// the only thing that this will fix is a new field being added to an object field, nothing else.\nfunction addMissingFields(value, schema) {\n    if (schema.kind === \"child\" || schema.kind === \"form\") {\n        return value;\n    }\n    if (schema.kind === \"conditional\") {\n        const conditionalValue = value;\n        const updatedInnerValue = addMissingFields(conditionalValue.value, schema.values[conditionalValue.discriminant.toString()]);\n        if (updatedInnerValue === conditionalValue.value) {\n            return value;\n        }\n        return {\n            discriminant: conditionalValue.discriminant,\n            value: updatedInnerValue\n        };\n    }\n    if (schema.kind === \"array\") {\n        const arrValue = value;\n        const newArrValue = arrValue.map((x)=>addMissingFields(x, schema.element));\n        if (areArraysEqual(arrValue, newArrValue)) {\n            return value;\n        }\n        return newArrValue;\n    }\n    if (schema.kind === \"object\") {\n        const objectValue = value;\n        let hasChanged = false;\n        const newObjectValue = {};\n        for (const [key, innerSchema] of Object.entries(schema.fields)){\n            const innerValue = objectValue[key];\n            if (innerValue === undefined) {\n                hasChanged = true;\n                newObjectValue[key] = getInitialPropsValue(innerSchema);\n                continue;\n            }\n            const newInnerValue = addMissingFields(innerValue, innerSchema);\n            if (newInnerValue !== innerValue) {\n                hasChanged = true;\n            }\n            newObjectValue[key] = newInnerValue;\n        }\n        if (hasChanged) {\n            return newObjectValue;\n        }\n        return value;\n    }\n    (0,emery__WEBPACK_IMPORTED_MODULE_1__.assertNever)(schema);\n}\nconst paragraphElement = ()=>({\n        type: \"paragraph\",\n        children: [\n            {\n                text: \"\"\n            }\n        ]\n    });\nfunction withParagraphs(editor) {\n    const { normalizeNode } = editor;\n    editor.normalizeNode = (entry)=>{\n        const [node, path] = entry;\n        if (slate__WEBPACK_IMPORTED_MODULE_6__.Editor.isEditor(node)) {\n            let lastNode = node.children[node.children.length - 1];\n            if ((lastNode === null || lastNode === void 0 ? void 0 : lastNode.type) !== \"paragraph\") {\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.insertNodes(editor, paragraphElement(), {\n                    at: [\n                        ...path,\n                        node.children.length\n                    ]\n                });\n                return;\n            }\n        }\n        normalizeNode(entry);\n    };\n    return editor;\n}\nfunction withLayouts(editor) {\n    const { normalizeNode, deleteBackward } = editor;\n    editor.deleteBackward = (unit)=>{\n        if (editor.selection && slate__WEBPACK_IMPORTED_MODULE_6__.Range.isCollapsed(editor.selection) && // this is just an little optimisation\n        // we're only doing things if we're at the start of a layout area\n        // and the start of anything will always be offset 0\n        // so we'll bailout if we're not at offset 0\n        editor.selection.anchor.offset === 0) {\n            const [aboveNode, abovePath] = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.above(editor, {\n                match: (node)=>node.type === \"layout-area\"\n            }) || [\n                editor,\n                []\n            ];\n            if (aboveNode.type === \"layout-area\" && slate__WEBPACK_IMPORTED_MODULE_6__.Point.equals(slate__WEBPACK_IMPORTED_MODULE_6__.Editor.start(editor, abovePath), editor.selection.anchor)) {\n                return;\n            }\n        }\n        deleteBackward(unit);\n    };\n    editor.normalizeNode = (entry)=>{\n        const [node, path] = entry;\n        if (slate__WEBPACK_IMPORTED_MODULE_6__.Element.isElement(node) && node.type === \"layout\") {\n            if (node.layout === undefined) {\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n                    at: path\n                });\n                return;\n            }\n            if (node.children.length < node.layout.length) {\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.insertNodes(editor, Array.from({\n                    length: node.layout.length - node.children.length\n                }).map(()=>({\n                        type: \"layout-area\",\n                        children: [\n                            paragraphElement()\n                        ]\n                    })), {\n                    at: [\n                        ...path,\n                        node.children.length\n                    ]\n                });\n                return;\n            }\n            if (node.children.length > node.layout.length) {\n                Array.from({\n                    length: node.children.length - node.layout.length\n                }).map((_, i)=>i).reverse().forEach((i)=>{\n                    const layoutAreaToRemovePath = [\n                        ...path,\n                        i + node.layout.length\n                    ];\n                    const child = node.children[i + node.layout.length];\n                    moveChildren(editor, layoutAreaToRemovePath, [\n                        ...path,\n                        node.layout.length - 1,\n                        node.children[node.layout.length - 1].children.length\n                    ], (node)=>node.type !== \"paragraph\" || slate__WEBPACK_IMPORTED_MODULE_6__.Node.string(child) !== \"\");\n                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                        at: layoutAreaToRemovePath\n                    });\n                });\n                return;\n            }\n        }\n        normalizeNode(entry);\n    };\n    return editor;\n}\nconst markdownLinkPattern = /(^|\\s)\\[(.+?)\\]\\((\\S+)\\)$/;\nfunction withLink(editorDocumentFeatures, componentBlocks, editor) {\n    const { insertText, isInline, normalizeNode } = editor;\n    editor.isInline = (element)=>{\n        return element.type === \"link\" ? true : isInline(element);\n    };\n    if (editorDocumentFeatures.links) {\n        editor.insertText = (text)=>{\n            insertText(text);\n            if (text !== \")\" || !editor.selection) {\n                return;\n            }\n            const startOfBlock = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.start(editor, slate__WEBPACK_IMPORTED_MODULE_6__.Editor.above(editor, {\n                match: isBlock\n            })[1]);\n            const startOfBlockToEndOfShortcutString = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.string(editor, {\n                anchor: editor.selection.anchor,\n                focus: startOfBlock\n            });\n            const match = markdownLinkPattern.exec(startOfBlockToEndOfShortcutString);\n            if (!match) {\n                return;\n            }\n            const ancestorComponentChildFieldDocumentFeatures = getAncestorComponentChildFieldDocumentFeatures(editor, editorDocumentFeatures, componentBlocks);\n            if ((ancestorComponentChildFieldDocumentFeatures === null || ancestorComponentChildFieldDocumentFeatures === void 0 ? void 0 : ancestorComponentChildFieldDocumentFeatures.documentFeatures.links) === false) {\n                return;\n            }\n            const [, maybeWhitespace, linkText, href] = match;\n            // by doing this, the insertText(')') above will happen in a different undo than the link replacement\n            // so that means that when someone does an undo after this\n            // it will undo to the state of \"[content](link)\" rather than \"[content](link\" (note the missing closing bracket)\n            editor.history.undos.push({\n                operations: [],\n                selectionBefore: editor.selection\n            });\n            const startOfShortcut = match.index === 0 ? startOfBlock : EditorAfterButIgnoringingPointsWithNoContent(editor, startOfBlock, {\n                distance: match.index\n            });\n            const startOfLinkText = EditorAfterButIgnoringingPointsWithNoContent(editor, startOfShortcut, {\n                distance: maybeWhitespace === \"\" ? 1 : 2\n            });\n            const endOfLinkText = EditorAfterButIgnoringingPointsWithNoContent(editor, startOfLinkText, {\n                distance: linkText.length\n            });\n            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.delete(editor, {\n                at: {\n                    anchor: endOfLinkText,\n                    focus: editor.selection.anchor\n                }\n            });\n            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.delete(editor, {\n                at: {\n                    anchor: startOfShortcut,\n                    focus: startOfLinkText\n                }\n            });\n            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.wrapNodes(editor, {\n                type: \"link\",\n                href,\n                children: []\n            }, {\n                at: {\n                    anchor: editor.selection.anchor,\n                    focus: startOfShortcut\n                },\n                split: true\n            });\n            const nextNode = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.next(editor);\n            if (nextNode) {\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.select(editor, nextNode[1]);\n            }\n        };\n    }\n    editor.normalizeNode = ([node, path])=>{\n        if (node.type === \"link\") {\n            if (slate__WEBPACK_IMPORTED_MODULE_6__.Node.string(node) === \"\") {\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n                    at: path\n                });\n                return;\n            }\n            for (const [idx, child] of node.children.entries()){\n                if (child.type === \"link\") {\n                    // links cannot contain links\n                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n                        at: [\n                            ...path,\n                            idx\n                        ]\n                    });\n                    return;\n                }\n            }\n        }\n        if (isInlineContainer(node)) {\n            let lastMergableLink = null;\n            for (const [idx, child] of node.children.entries()){\n                var _lastMergableLink;\n                if (child.type === \"link\" && child.href === ((_lastMergableLink = lastMergableLink) === null || _lastMergableLink === void 0 ? void 0 : _lastMergableLink.node.href)) {\n                    const firstLinkPath = [\n                        ...path,\n                        lastMergableLink.index\n                    ];\n                    const secondLinkPath = [\n                        ...path,\n                        idx\n                    ];\n                    const to = [\n                        ...firstLinkPath,\n                        lastMergableLink.node.children.length\n                    ];\n                    // note this is going in reverse, js doesn't have double-ended iterators so it's a for(;;)\n                    for(let i = child.children.length - 1; i >= 0; i--){\n                        const childPath = [\n                            ...secondLinkPath,\n                            i\n                        ];\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.moveNodes(editor, {\n                            at: childPath,\n                            to\n                        });\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                        at: secondLinkPath\n                    });\n                    return;\n                }\n                if (!slate__WEBPACK_IMPORTED_MODULE_6__.Text.isText(child) || child.text !== \"\") {\n                    lastMergableLink = null;\n                }\n                if (child.type === \"link\") {\n                    lastMergableLink = {\n                        index: idx,\n                        node: child\n                    };\n                }\n            }\n        }\n        normalizeNode([\n            node,\n            path\n        ]);\n    };\n    return editor;\n}\nconst isListType = (type)=>type === \"ordered-list\" || type === \"unordered-list\";\nconst isListNode = (node)=>isListType(node.type);\nfunction getAncestorList(editor) {\n    if (editor.selection) {\n        const listItem = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.above(editor, {\n            match: nodeTypeMatcher(\"list-item\")\n        });\n        const list = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.above(editor, {\n            match: isListNode\n        });\n        if (listItem && list) {\n            return {\n                isInside: true,\n                listItem,\n                list\n            };\n        }\n    }\n    return {\n        isInside: false\n    };\n}\nfunction withList(editor) {\n    const { insertBreak, normalizeNode, deleteBackward } = editor;\n    editor.deleteBackward = (unit)=>{\n        if (editor.selection) {\n            const ancestorList = getAncestorList(editor);\n            if (ancestorList.isInside && slate__WEBPACK_IMPORTED_MODULE_6__.Range.isCollapsed(editor.selection) && slate__WEBPACK_IMPORTED_MODULE_6__.Editor.isStart(editor, editor.selection.anchor, ancestorList.list[1])) {\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n                    match: isListNode,\n                    split: true\n                });\n                return;\n            }\n        }\n        deleteBackward(unit);\n    };\n    editor.insertBreak = ()=>{\n        const [listItem] = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.nodes(editor, {\n            match: (node)=>node.type === \"list-item\",\n            mode: \"lowest\"\n        });\n        if (listItem && slate__WEBPACK_IMPORTED_MODULE_6__.Node.string(listItem[0]) === \"\") {\n            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n                match: isListNode,\n                split: true\n            });\n            return;\n        }\n        insertBreak();\n    };\n    editor.normalizeNode = (entry)=>{\n        const [node, path] = entry;\n        if (slate__WEBPACK_IMPORTED_MODULE_6__.Element.isElement(node) || slate__WEBPACK_IMPORTED_MODULE_6__.Editor.isEditor(node)) {\n            const isElementBeingNormalizedAList = isListNode(node);\n            for (const [childNode, childPath] of slate__WEBPACK_IMPORTED_MODULE_6__.Node.children(editor, path)){\n                const index = childPath[childPath.length - 1];\n                // merge sibling lists\n                if (isListNode(childNode)) {\n                    var _node$children;\n                    if (((_node$children = node.children[childPath[childPath.length - 1] + 1]) === null || _node$children === void 0 ? void 0 : _node$children.type) === childNode.type) {\n                        const siblingNodePath = slate__WEBPACK_IMPORTED_MODULE_6__.Path.next(childPath);\n                        moveChildren(editor, siblingNodePath, [\n                            ...childPath,\n                            childNode.children.length\n                        ]);\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                            at: siblingNodePath\n                        });\n                        return;\n                    }\n                    if (isElementBeingNormalizedAList) {\n                        const previousChild = node.children[index - 1];\n                        if (slate__WEBPACK_IMPORTED_MODULE_6__.Element.isElement(previousChild)) {\n                            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.moveNodes(editor, {\n                                at: childPath,\n                                to: [\n                                    ...slate__WEBPACK_IMPORTED_MODULE_6__.Path.previous(childPath),\n                                    previousChild.children.length - 1\n                                ]\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n                                at: childPath\n                            });\n                        }\n                        return;\n                    }\n                }\n                if (node.type === \"list-item\" && childNode.type !== \"list-item-content\" && index === 0 && isBlock(childNode)) {\n                    if (path[path.length - 1] !== 0) {\n                        const previousChild = slate__WEBPACK_IMPORTED_MODULE_6__.Node.get(editor, slate__WEBPACK_IMPORTED_MODULE_6__.Path.previous(path));\n                        if (slate__WEBPACK_IMPORTED_MODULE_6__.Element.isElement(previousChild)) {\n                            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.moveNodes(editor, {\n                                at: path,\n                                to: [\n                                    ...slate__WEBPACK_IMPORTED_MODULE_6__.Path.previous(path),\n                                    previousChild.children.length\n                                ]\n                            });\n                            return;\n                        }\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n                        at: childPath\n                    });\n                    return;\n                }\n                if (node.type === \"list-item\" && childNode.type === \"list-item-content\" && index !== 0) {\n                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.splitNodes(editor, {\n                        at: childPath\n                    });\n                    return;\n                }\n            }\n        }\n        normalizeNode(entry);\n    };\n    return editor;\n}\nfunction order(a, b) {\n    return {\n        start: Math.min(a, b),\n        end: Math.max(a, b)\n    };\n}\nfunction getRelativeRowPath(hasHead, rowIndex) {\n    return hasHead ? rowIndex === 0 ? [\n        0,\n        0\n    ] : [\n        1,\n        rowIndex - 1\n    ] : [\n        0,\n        rowIndex\n    ];\n}\nfunction getSelectedTableArea(editor) {\n    var _Editor$above, _editor$selection, _Editor$above2, _editor$selection2;\n    const anchor = (_Editor$above = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.above(editor, {\n        match: nodeTypeMatcher(\"table-cell\"),\n        at: (_editor$selection = editor.selection) === null || _editor$selection === void 0 ? void 0 : _editor$selection.anchor.path\n    })) === null || _Editor$above === void 0 ? void 0 : _Editor$above[1];\n    const focus = (_Editor$above2 = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.above(editor, {\n        match: nodeTypeMatcher(\"table-cell\"),\n        at: (_editor$selection2 = editor.selection) === null || _editor$selection2 === void 0 ? void 0 : _editor$selection2.focus.path\n    })) === null || _Editor$above2 === void 0 ? void 0 : _Editor$above2[1];\n    const table = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.above(editor, {\n        match: nodeTypeMatcher(\"table\")\n    });\n    if (editor.selection && table && slate__WEBPACK_IMPORTED_MODULE_6__.Element.isElement(table[0].children[0]) && anchor && focus && slate__WEBPACK_IMPORTED_MODULE_6__.Path.equals(anchor.slice(0, -3), focus.slice(0, -3))) {\n        const [start, end] = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.edges(editor, editor.selection);\n        return {\n            tablePath: table[1],\n            table: table[0],\n            singleCell: slate__WEBPACK_IMPORTED_MODULE_6__.Path.equals(anchor, focus) ? slate__WEBPACK_IMPORTED_MODULE_6__.Point.equals(slate__WEBPACK_IMPORTED_MODULE_6__.Editor.start(editor, anchor), start) && slate__WEBPACK_IMPORTED_MODULE_6__.Point.equals(slate__WEBPACK_IMPORTED_MODULE_6__.Editor.end(editor, anchor), end) && !slate__WEBPACK_IMPORTED_MODULE_6__.Point.equals(start, end) ? \"selected\" : \"not-selected\" : \"many\",\n            row: order(anchor[anchor.length - 2] + anchor[anchor.length - 3], focus[focus.length - 2] + focus[anchor.length - 3]),\n            column: order(anchor[anchor.length - 1], focus[focus.length - 1])\n        };\n    }\n}\nconst cell = (header)=>({\n        type: \"table-cell\",\n        ...header ? {\n            header: true\n        } : {},\n        children: [\n            {\n                type: \"paragraph\",\n                children: [\n                    {\n                        text: \"\"\n                    }\n                ]\n            }\n        ]\n    });\nfunction cloneDescendant(node) {\n    if (slate__WEBPACK_IMPORTED_MODULE_6__.Text.isText(node)) return {\n        ...node\n    };\n    return {\n        ...node,\n        children: node.children.map(cloneDescendant)\n    };\n}\nfunction withTable(editor) {\n    const { deleteFragment, normalizeNode, getFragment, insertFragment, deleteBackward } = editor;\n    editor.insertFragment = (fragment)=>{\n        const selectedTableArea = getSelectedTableArea(editor);\n        if (!selectedTableArea || fragment.length !== 1 || fragment[0].type !== \"table\") {\n            insertFragment(fragment);\n            return;\n        }\n        const newRows = fragment[0].children.flatMap((child)=>child.type === \"table-head\" || child.type === \"table-body\" ? child.children : []);\n        if (!newRows.every(nodeTypeMatcher(\"table-row\"))) {\n            insertFragment(fragment);\n            return;\n        }\n        let { row, column, tablePath, table } = selectedTableArea;\n        const existingBody = selectedTableArea.table.children[selectedTableArea.table.children.length === 1 ? 0 : 1];\n        if (newRows[0].type !== \"table-row\" || existingBody.type !== \"table-body\" || existingBody.children[0].type !== \"table-row\") {\n            insertFragment(fragment);\n            return;\n        }\n        const hasHead = table.children[0].type === \"table-head\";\n        if (selectedTableArea.singleCell !== \"many\") {\n            row = {\n                start: row.start,\n                end: Math.min(row.start + newRows.length - 1, existingBody.children.length - 1 + (hasHead ? 1 : 0))\n            };\n            column = {\n                start: column.start,\n                end: Math.min(column.start + newRows[0].children.length - 1, existingBody.children[0].children.length - 1)\n            };\n        }\n        slate__WEBPACK_IMPORTED_MODULE_6__.Editor.withoutNormalizing(editor, ()=>{\n            for(let rowIndex = row.start; rowIndex <= row.end; rowIndex++){\n                const newRow = newRows[(rowIndex - row.start) % newRows.length];\n                for(let cellIndex = column.start; cellIndex <= column.end; cellIndex++){\n                    const relativeCellPath = [\n                        ...getRelativeRowPath(hasHead, rowIndex),\n                        cellIndex\n                    ];\n                    const cell = slate__WEBPACK_IMPORTED_MODULE_6__.Node.get(table, relativeCellPath);\n                    const newCell = newRow.children[(cellIndex - column.start) % newRow.children.length];\n                    if (cell.type !== \"table-cell\" || newCell.type !== \"table-cell\") {\n                        continue;\n                    }\n                    const cellPath = [\n                        ...tablePath,\n                        ...relativeCellPath\n                    ];\n                    for (const childIdx of [\n                        ...cell.children.keys()\n                    ].reverse()){\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                            at: [\n                                ...cellPath,\n                                childIdx\n                            ]\n                        });\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.insertNodes(editor, newCell.children.map(cloneDescendant), {\n                        at: [\n                            ...cellPath,\n                            0\n                        ]\n                    });\n                }\n            }\n            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.setSelection(editor, {\n                anchor: slate__WEBPACK_IMPORTED_MODULE_6__.Editor.start(editor, [\n                    ...tablePath,\n                    ...getRelativeRowPath(hasHead, row.start),\n                    column.start\n                ]),\n                focus: slate__WEBPACK_IMPORTED_MODULE_6__.Editor.end(editor, [\n                    ...tablePath,\n                    ...getRelativeRowPath(hasHead, row.end),\n                    column.end\n                ])\n            });\n        });\n    };\n    editor.deleteBackward = (unit)=>{\n        if (editor.selection && slate__WEBPACK_IMPORTED_MODULE_6__.Range.isCollapsed(editor.selection) && editor.selection.anchor.offset === 0) {\n            const tableCell = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.above(editor, {\n                match: nodeTypeMatcher(\"table-cell\")\n            });\n            if (tableCell && tableCell[0].children[0].type === \"paragraph\" && tableCell[0].children[0].children[0].type === undefined && slate__WEBPACK_IMPORTED_MODULE_6__.Path.equals(editor.selection.anchor.path, [\n                ...tableCell[1],\n                0,\n                0\n            ])) {\n                return;\n            }\n        }\n        deleteBackward(unit);\n    };\n    editor.getFragment = ()=>{\n        const selectedTableArea = getSelectedTableArea(editor);\n        if (selectedTableArea && selectedTableArea.singleCell !== \"not-selected\") {\n            var _table$children$;\n            const { table } = selectedTableArea;\n            const first = table.children[0].type === \"table-head\" || table.children[0].type === \"table-body\" ? table.children[0] : undefined;\n            if (!first) {\n                return getFragment();\n            }\n            const second = ((_table$children$ = table.children[1]) === null || _table$children$ === void 0 ? void 0 : _table$children$.type) === \"table-body\" ? table.children[1] : undefined;\n            const body = second || first;\n            const hasHead = first.type === \"table-head\";\n            const isSelectionInHead = selectedTableArea.row.start === 0 && !!second;\n            const columnLength = selectedTableArea.column.end - selectedTableArea.column.start + 1;\n            return [\n                {\n                    type: \"table\",\n                    children: [\n                        ...isSelectionInHead ? [\n                            {\n                                type: \"table-head\",\n                                children: [\n                                    {\n                                        type: \"table-row\",\n                                        children: Array.from({\n                                            length: columnLength\n                                        }).map((_, columnIndex)=>first.children[0].children[columnIndex + selectedTableArea.column.start])\n                                    }\n                                ]\n                            }\n                        ] : [],\n                        {\n                            type: \"table-body\",\n                            children: Array.from({\n                                length: selectedTableArea.row.end - selectedTableArea.row.start + (isSelectionInHead ? 0 : 1)\n                            }).map((_, rowIndex)=>({\n                                    type: \"table-row\",\n                                    children: Array.from({\n                                        length: columnLength\n                                    }).map((_, columnIndex)=>body.children[rowIndex + selectedTableArea.row.start - (hasHead && !isSelectionInHead ? 1 : 0)].children[columnIndex + selectedTableArea.column.start])\n                                }))\n                        }\n                    ]\n                }\n            ];\n        }\n        return getFragment();\n    };\n    editor.deleteFragment = (direction)=>{\n        if (!editor.selection || slate__WEBPACK_IMPORTED_MODULE_6__.Range.isCollapsed(editor.selection)) {\n            deleteFragment(direction);\n            return;\n        }\n        const selectedTableArea = getSelectedTableArea(editor);\n        if (!selectedTableArea || selectedTableArea.singleCell === \"not-selected\") {\n            deleteFragment(direction);\n            return;\n        }\n        const headOrBody = selectedTableArea.table.children[0];\n        if (!slate__WEBPACK_IMPORTED_MODULE_6__.Element.isElement(headOrBody) || !slate__WEBPACK_IMPORTED_MODULE_6__.Element.isElement(headOrBody.children[0])) {\n            deleteFragment(direction);\n            return;\n        }\n        const maxRowIdx = selectedTableArea.table.children.reduce((sum, headOrBody)=>sum + (headOrBody.type === \"table-head\" || headOrBody.type === \"table-body\" ? headOrBody.children.length : 0), 0) - 1;\n        const { row, column, tablePath } = selectedTableArea;\n        // note the fact that hasWholeColumnSelected uses row and hasWholeRowSelected uses column\n        // is not a mistake. if a whole column has been selected, then the starting row is 0 and the end is the last row\n        const hasWholeColumnSelected = row.start === 0 && row.end === maxRowIdx;\n        const hasWholeRowSelected = column.start === 0 && column.end === headOrBody.children[0].children.length - 1;\n        if (hasWholeColumnSelected && hasWholeRowSelected) {\n            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                at: tablePath\n            });\n            return;\n        }\n        const hasHead = headOrBody.type === \"table-head\";\n        if (hasWholeRowSelected) {\n            slate__WEBPACK_IMPORTED_MODULE_6__.Editor.withoutNormalizing(editor, ()=>{\n                for(let i = row.end; i >= row.start; i--){\n                    if (hasHead) {\n                        if (i === 0) {\n                            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                                at: [\n                                    ...tablePath,\n                                    0\n                                ]\n                            });\n                            continue;\n                        }\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                            at: [\n                                ...tablePath,\n                                1,\n                                i - 1\n                            ]\n                        });\n                        continue;\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                        at: [\n                            ...tablePath,\n                            0,\n                            i\n                        ]\n                    });\n                }\n            });\n            return;\n        }\n        if (hasWholeColumnSelected) {\n            slate__WEBPACK_IMPORTED_MODULE_6__.Editor.withoutNormalizing(editor, ()=>{\n                for(let i = column.end; i >= column.start; i--){\n                    for(let rowIdx = 0; rowIdx <= maxRowIdx; rowIdx++){\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                            at: [\n                                ...tablePath,\n                                ...getRelativeRowPath(hasHead, rowIdx),\n                                i\n                            ]\n                        });\n                    }\n                }\n                const selectionPath = [\n                    ...tablePath,\n                    0,\n                    0,\n                    column.start\n                ];\n                const point = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.start(editor, column.start === 0 ? selectionPath : slate__WEBPACK_IMPORTED_MODULE_6__.Path.previous(selectionPath));\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.select(editor, point);\n            });\n            return;\n        }\n        const selectionStart = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.start(editor, editor.selection).path;\n        slate__WEBPACK_IMPORTED_MODULE_6__.Editor.withoutNormalizing(editor, ()=>{\n            for(let rowIndex = row.start; rowIndex <= row.end; rowIndex++){\n                for(let cellIndex = column.start; cellIndex <= column.end; cellIndex++){\n                    const relativeCellPath = [\n                        ...getRelativeRowPath(hasHead, rowIndex),\n                        cellIndex\n                    ];\n                    const cell = slate__WEBPACK_IMPORTED_MODULE_6__.Node.get(selectedTableArea.table, relativeCellPath);\n                    if (!slate__WEBPACK_IMPORTED_MODULE_6__.Element.isElement(cell)) {\n                        continue;\n                    }\n                    const cellPath = [\n                        ...tablePath,\n                        ...relativeCellPath\n                    ];\n                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.insertNodes(editor, {\n                        type: \"paragraph\",\n                        children: [\n                            {\n                                text: \"\"\n                            }\n                        ]\n                    }, {\n                        at: [\n                            ...cellPath,\n                            0\n                        ]\n                    });\n                    for (const childIdx of [\n                        ...cell.children.keys()\n                    ].reverse()){\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.removeNodes(editor, {\n                            at: [\n                                ...cellPath,\n                                childIdx + 1\n                            ]\n                        });\n                    }\n                }\n            }\n            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.select(editor, selectionStart);\n        });\n    };\n    editor.normalizeNode = (entry)=>{\n        const [node, path] = entry;\n        if (node.type === \"table-head\" && node.children.length > 1) {\n            moveChildren(editor, path, slate__WEBPACK_IMPORTED_MODULE_6__.Path.next(path), (_, i)=>i !== 0);\n            return;\n        }\n        let didUpdateThings = false;\n        for (const parent of [\n            \"table-body\",\n            \"table-head\"\n        ]){\n            if (node.type === parent) {\n                for (const [rowIdx, row] of node.children.entries()){\n                    if (row.type === \"table-row\") {\n                        for (const [cellIdx, cell] of row.children.entries()){\n                            if (cell.type === \"table-cell\") {\n                                const at = [\n                                    ...path,\n                                    rowIdx,\n                                    cellIdx\n                                ];\n                                if (cell.header && parent === \"table-body\") {\n                                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unsetNodes(editor, \"header\", {\n                                        at\n                                    });\n                                    didUpdateThings = true;\n                                }\n                                if (!cell.header && parent === \"table-head\") {\n                                    slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.setNodes(editor, {\n                                        header: true\n                                    }, {\n                                        at\n                                    });\n                                    didUpdateThings = true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (didUpdateThings) {\n            return;\n        }\n        if (node.type === \"table\") {\n            const maxRowCount = node.children.reduce((max, node)=>node.type === \"table-head\" || node.type === \"table-body\" ? node.children.reduce((max, node)=>node.type === \"table-row\" ? Math.max(max, node.children.length) : max, max) : max, 0);\n            let didInsert = false;\n            for (const [idx, child] of node.children.entries()){\n                if (child.type === \"table-body\" || child.type === \"table-head\") {\n                    for (const [rowIdx, row] of child.children.entries()){\n                        if (row.type === \"table-row\" && row.children.length !== maxRowCount) {\n                            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.insertNodes(editor, Array.from({\n                                length: maxRowCount - row.children.length\n                            }, ()=>cell(child.type === \"table-head\")), {\n                                at: [\n                                    ...path,\n                                    idx,\n                                    rowIdx,\n                                    row.children.length\n                                ]\n                            });\n                            didInsert = true;\n                        }\n                    }\n                }\n            }\n            if (didInsert) {\n                return;\n            }\n            if (node.children.length === 1 && node.children[0].type === \"table-head\") {\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.insertNodes(editor, {\n                    type: \"table-body\",\n                    children: Array.from({\n                        length: node.children[0].children.length\n                    }, ()=>cell(false))\n                }, {\n                    at: [\n                        ...path,\n                        1\n                    ]\n                });\n                return;\n            }\n            if (node.children.length === 2 && node.children[1].type === \"table-head\") {\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.moveNodes(editor, {\n                    at: [\n                        ...path,\n                        1\n                    ],\n                    to: [\n                        ...path,\n                        0\n                    ]\n                });\n                return;\n            }\n            if (node.children.length > 2) {\n                moveChildren(editor, path, slate__WEBPACK_IMPORTED_MODULE_6__.Path.next(path), (_, i)=>i !== 0 && i !== 1);\n                return;\n            }\n        }\n        normalizeNode(entry);\n    };\n    return editor;\n}\nfunction createDocumentEditorForNormalization(documentFeatures, componentBlocks) {\n    return _createDocumentEditor((0,slate__WEBPACK_IMPORTED_MODULE_6__.createEditor)(), documentFeatures, componentBlocks);\n}\nfunction _createDocumentEditor(baseEditor, documentFeatures, componentBlocks) {\n    return withBlocksSchema(withParagraphs(withLink(documentFeatures, componentBlocks, withList(withTable(withComponentBlocks(componentBlocks, documentFeatures, withVoidElements(withLayouts(withCodeBlock(documentFeatures, componentBlocks, withDocumentFeaturesNormalization(documentFeatures, baseEditor))))))))));\n}\nfunction withBlocksSchema(editor) {\n    const { normalizeNode } = editor;\n    editor.normalizeNode = ([node, path])=>{\n        if (!slate__WEBPACK_IMPORTED_MODULE_6__.Text.isText(node) && node.type !== \"link\") {\n            const nodeType = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.isEditor(node) ? \"editor\" : node.type;\n            if (typeof nodeType !== \"string\" || editorSchema[nodeType] === undefined) {\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n                    at: path\n                });\n                return;\n            }\n            const info = editorSchema[nodeType];\n            if (info.kind === \"blocks\" && node.children.length !== 0 && node.children.every((child)=>!isBlock(child))) {\n                slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.wrapNodes(editor, {\n                    type: info.blockToWrapInlinesIn,\n                    children: []\n                }, {\n                    at: path,\n                    match: (node)=>!isBlock(node)\n                });\n                return;\n            }\n            let didUpdate = false;\n            for (const [index, childNode] of [\n                ...node.children.entries()\n            ].reverse()){\n                const childPath = [\n                    ...path,\n                    index\n                ];\n                if (info.kind === \"inlines\") {\n                    if (!slate__WEBPACK_IMPORTED_MODULE_6__.Text.isText(childNode) && isBlock(childNode)) {\n                        handleNodeInInvalidPosition(editor, [\n                            childNode,\n                            childPath\n                        ], path);\n                        didUpdate = true;\n                        continue;\n                    }\n                } else {\n                    if (!isBlock(childNode)) {\n                        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.wrapNodes(editor, {\n                            type: info.blockToWrapInlinesIn,\n                            children: []\n                        }, {\n                            at: childPath\n                        });\n                        didUpdate = true;\n                        continue;\n                    }\n                    if (!info.allowedChildren.has(childNode.type)) {\n                        handleNodeInInvalidPosition(editor, [\n                            childNode,\n                            childPath\n                        ], path);\n                        didUpdate = true;\n                        continue;\n                    }\n                }\n            }\n            if (didUpdate) {\n                return;\n            }\n        }\n        normalizeNode([\n            node,\n            path\n        ]);\n    };\n    return editor;\n}\nfunction handleNodeInInvalidPosition(editor, [node, path], ancestorPath) {\n    const nodeType = node.type;\n    const childNodeInfo = editorSchema[nodeType];\n    // the parent of a block will never be an inline so this casting is okay\n    const ancestorNode = slate__WEBPACK_IMPORTED_MODULE_6__.Node.get(editor, ancestorPath);\n    const parentNodeType = slate__WEBPACK_IMPORTED_MODULE_6__.Editor.isEditor(ancestorNode) ? \"editor\" : ancestorNode.type;\n    const parentNodeInfo = editorSchema[parentNodeType];\n    if (!childNodeInfo || childNodeInfo.invalidPositionHandleMode === \"unwrap\") {\n        if (parentNodeInfo.kind === \"blocks\" && parentNodeInfo.blockToWrapInlinesIn) {\n            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.setNodes(editor, {\n                type: parentNodeInfo.blockToWrapInlinesIn,\n                ...Object.fromEntries(Object.keys(node).filter((key)=>key !== \"type\" && key !== \"children\").map((key)=>[\n                        key,\n                        null\n                    ])) // the Slate types don't understand that null is allowed and it will unset properties with setNodes\n            }, {\n                at: path\n            });\n            return;\n        }\n        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n            at: path\n        });\n        return;\n    }\n    const info = editorSchema[ancestorNode.type || \"editor\"];\n    if ((info === null || info === void 0 ? void 0 : info.kind) === \"blocks\" && info.allowedChildren.has(nodeType)) {\n        if (ancestorPath.length === 0) {\n            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.moveNodes(editor, {\n                at: path,\n                to: [\n                    path[0] + 1\n                ]\n            });\n        } else {\n            slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.moveNodes(editor, {\n                at: path,\n                to: slate__WEBPACK_IMPORTED_MODULE_6__.Path.next(ancestorPath)\n            });\n        }\n        return;\n    }\n    if (slate__WEBPACK_IMPORTED_MODULE_6__.Editor.isEditor(ancestorNode)) {\n        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.moveNodes(editor, {\n            at: path,\n            to: [\n                path[0] + 1\n            ]\n        });\n        slate__WEBPACK_IMPORTED_MODULE_6__.Transforms.unwrapNodes(editor, {\n            at: [\n                path[0] + 1\n            ]\n        });\n        return;\n    }\n    handleNodeInInvalidPosition(editor, [\n        node,\n        path\n    ], ancestorPath.slice(0, -1));\n}\nfunction withVoidElements(editor) {\n    const { isVoid } = editor;\n    editor.isVoid = (node)=>{\n        return node.type === \"divider\" || node.type === \"image\" || isVoid(node);\n    };\n    return editor;\n}\nconst textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nconst defaultAltField = text({\n    label: \"Alt text\",\n    description: \"This text will be used by screen readers and search engines.\"\n});\nconst emptyTitleField = basicFormFieldWithSimpleReaderParse({\n    Input () {\n        return null;\n    },\n    defaultValue () {\n        return \"\";\n    },\n    parse (value) {\n        if (value === undefined) return \"\";\n        if (typeof value !== \"string\") {\n            throw new FieldDataError(\"Must be string\");\n        }\n        return value;\n    },\n    validate (value) {\n        return value;\n    },\n    serialize (value) {\n        return {\n            value\n        };\n    },\n    label: \"Title\"\n});\nfunction normaliseDocumentFeatures(config) {\n    var _config$formatting, _formatting$alignment, _formatting$alignment2, _formatting$blockType, _formatting$inlineMar, _formatting$inlineMar2, _formatting$inlineMar3, _formatting$inlineMar4, _formatting$inlineMar5, _formatting$inlineMar6, _formatting$inlineMar7, _formatting$inlineMar8, _formatting$listTypes, _formatting$listTypes2, _imagesConfig$schema$, _imagesConfig$schema, _imagesConfig$schema$2, _imagesConfig$schema2;\n    const formatting = config.formatting === true ? {\n        // alignment: true, // not supported natively in markdown\n        blockTypes: true,\n        headingLevels: true,\n        inlineMarks: true,\n        listTypes: true,\n        softBreaks: true\n    } : (_config$formatting = config.formatting) !== null && _config$formatting !== void 0 ? _config$formatting : {};\n    const imagesConfig = config.images === true ? {} : config.images;\n    return {\n        formatting: {\n            alignment: formatting.alignment === true ? {\n                center: true,\n                end: true\n            } : {\n                center: !!((_formatting$alignment = formatting.alignment) !== null && _formatting$alignment !== void 0 && _formatting$alignment.center),\n                end: !!((_formatting$alignment2 = formatting.alignment) !== null && _formatting$alignment2 !== void 0 && _formatting$alignment2.end)\n            },\n            blockTypes: (formatting === null || formatting === void 0 ? void 0 : formatting.blockTypes) === true ? {\n                blockquote: true,\n                code: {\n                    schema: object({})\n                }\n            } : {\n                blockquote: !!((_formatting$blockType = formatting.blockTypes) !== null && _formatting$blockType !== void 0 && _formatting$blockType.blockquote),\n                code: ((_formatting$blockType2)=>{\n                    if (((_formatting$blockType2 = formatting.blockTypes) === null || _formatting$blockType2 === void 0 ? void 0 : _formatting$blockType2.code) === undefined) {\n                        return false;\n                    }\n                    if (formatting.blockTypes.code === true || !formatting.blockTypes.code.schema) {\n                        return {\n                            schema: object({})\n                        };\n                    }\n                    for (const key of [\n                        \"type\",\n                        \"children\",\n                        \"language\"\n                    ]){\n                        if (key in formatting.blockTypes.code.schema) {\n                            throw new Error(`\"${key}\" cannot be a key in the schema for code blocks`);\n                        }\n                    }\n                    return {\n                        schema: object(formatting.blockTypes.code.schema)\n                    };\n                })()\n            },\n            headings: ((_obj$schema)=>{\n                const opt = formatting === null || formatting === void 0 ? void 0 : formatting.headingLevels;\n                const obj = typeof opt === \"object\" && \"levels\" in opt ? opt : {\n                    levels: opt,\n                    schema: undefined\n                };\n                if (obj.schema) {\n                    for (const key of [\n                        \"type\",\n                        \"children\",\n                        \"level\",\n                        \"textAlign\"\n                    ]){\n                        if (key in obj.schema) {\n                            throw new Error(`\"${key}\" cannot be a key in the schema for headings`);\n                        }\n                    }\n                }\n                return {\n                    levels: [\n                        ...new Set(obj.levels === true ? [\n                            1,\n                            2,\n                            3,\n                            4,\n                            5,\n                            6\n                        ] : obj.levels)\n                    ],\n                    schema: object((_obj$schema = obj.schema) !== null && _obj$schema !== void 0 ? _obj$schema : {})\n                };\n            })(),\n            inlineMarks: formatting.inlineMarks === true ? {\n                bold: true,\n                code: true,\n                italic: true,\n                keyboard: false,\n                // not supported natively in markdown\n                strikethrough: true,\n                subscript: false,\n                // not supported natively in markdown\n                superscript: false,\n                // not supported natively in markdown\n                underline: false // not supported natively in markdown\n            } : {\n                bold: !!((_formatting$inlineMar = formatting.inlineMarks) !== null && _formatting$inlineMar !== void 0 && _formatting$inlineMar.bold),\n                code: !!((_formatting$inlineMar2 = formatting.inlineMarks) !== null && _formatting$inlineMar2 !== void 0 && _formatting$inlineMar2.code),\n                italic: !!((_formatting$inlineMar3 = formatting.inlineMarks) !== null && _formatting$inlineMar3 !== void 0 && _formatting$inlineMar3.italic),\n                strikethrough: !!((_formatting$inlineMar4 = formatting.inlineMarks) !== null && _formatting$inlineMar4 !== void 0 && _formatting$inlineMar4.strikethrough),\n                underline: !!((_formatting$inlineMar5 = formatting.inlineMarks) !== null && _formatting$inlineMar5 !== void 0 && _formatting$inlineMar5.underline),\n                keyboard: !!((_formatting$inlineMar6 = formatting.inlineMarks) !== null && _formatting$inlineMar6 !== void 0 && _formatting$inlineMar6.keyboard),\n                subscript: !!((_formatting$inlineMar7 = formatting.inlineMarks) !== null && _formatting$inlineMar7 !== void 0 && _formatting$inlineMar7.subscript),\n                superscript: !!((_formatting$inlineMar8 = formatting.inlineMarks) !== null && _formatting$inlineMar8 !== void 0 && _formatting$inlineMar8.superscript)\n            },\n            listTypes: formatting.listTypes === true ? {\n                ordered: true,\n                unordered: true\n            } : {\n                ordered: !!((_formatting$listTypes = formatting.listTypes) !== null && _formatting$listTypes !== void 0 && _formatting$listTypes.ordered),\n                unordered: !!((_formatting$listTypes2 = formatting.listTypes) !== null && _formatting$listTypes2 !== void 0 && _formatting$listTypes2.unordered)\n            },\n            softBreaks: !!formatting.softBreaks\n        },\n        links: !!config.links,\n        layouts: [\n            ...new Set((config.layouts || []).map((x)=>JSON.stringify(x)))\n        ].map((x)=>JSON.parse(x)),\n        dividers: !!config.dividers,\n        images: imagesConfig === undefined ? false : {\n            ...imagesConfig,\n            schema: {\n                alt: (_imagesConfig$schema$ = (_imagesConfig$schema = imagesConfig.schema) === null || _imagesConfig$schema === void 0 ? void 0 : _imagesConfig$schema.alt) !== null && _imagesConfig$schema$ !== void 0 ? _imagesConfig$schema$ : defaultAltField,\n                title: (_imagesConfig$schema$2 = (_imagesConfig$schema2 = imagesConfig.schema) === null || _imagesConfig$schema2 === void 0 ? void 0 : _imagesConfig$schema2.title) !== null && _imagesConfig$schema$2 !== void 0 ? _imagesConfig$schema$2 : emptyTitleField\n            }\n        },\n        tables: !!config.tables\n    };\n}\nfunction document$1({ label, componentBlocks = {}, description, ...documentFeaturesConfig }) {\n    const documentFeatures = normaliseDocumentFeatures(documentFeaturesConfig);\n    const parse = (mode)=>(_value, data)=>{\n            const markdoc = textDecoder.decode(data.content);\n            const document1 = fromMarkdoc(_markdoc_markdoc__WEBPACK_IMPORTED_MODULE_7__[\"default\"].parse(markdoc), componentBlocks);\n            const editor = createDocumentEditorForNormalization(documentFeatures, componentBlocks);\n            editor.children = document1;\n            slate__WEBPACK_IMPORTED_MODULE_6__.Editor.normalize(editor, {\n                force: true\n            });\n            return deserializeFiles(editor.children, componentBlocks, data.other, data.external || new Map(), mode, documentFeatures, data.slug);\n        };\n    return {\n        kind: \"form\",\n        formKind: \"content\",\n        defaultValue () {\n            return [\n                {\n                    type: \"paragraph\",\n                    children: [\n                        {\n                            text: \"\"\n                        }\n                    ]\n                }\n            ];\n        },\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DocumentFieldInput, {\n                componentBlocks: componentBlocks,\n                description: description,\n                label: label,\n                documentFeatures: documentFeatures,\n                ...props\n            });\n        },\n        parse: parse(\"edit\"),\n        contentExtension: \".mdoc\",\n        validate (value) {\n            return value;\n        },\n        directories: [\n            ...collectDirectoriesUsedInSchema(object(Object.fromEntries(Object.entries(componentBlocks).map(([name, block])=>[\n                    name,\n                    object(block.schema)\n                ])))),\n            ...typeof documentFeatures.images === \"object\" && typeof documentFeatures.images.directory === \"string\" ? [\n                fixPath(documentFeatures.images.directory)\n            ] : []\n        ],\n        serialize (value, opts) {\n            const { extraFiles, node } = toMarkdocDocument(value, {\n                componentBlocks,\n                documentFeatures,\n                slug: opts.slug\n            });\n            const other = new Map();\n            const external = new Map();\n            for (const file of extraFiles){\n                if (file.parent === undefined) {\n                    other.set(file.path, file.contents);\n                    continue;\n                }\n                if (!external.has(file.parent)) {\n                    external.set(file.parent, new Map());\n                }\n                external.get(file.parent).set(file.path, file.contents);\n            }\n            return {\n                content: textEncoder.encode(_markdoc_markdoc__WEBPACK_IMPORTED_MODULE_7__[\"default\"].format(_markdoc_markdoc__WEBPACK_IMPORTED_MODULE_7__[\"default\"].parse(_markdoc_markdoc__WEBPACK_IMPORTED_MODULE_7__[\"default\"].format(node)))),\n                other,\n                external,\n                value: undefined\n            };\n        },\n        reader: {\n            parse: parse(\"read\")\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@keystatic/core/dist/index-04c3e71f.node.react-server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@keystatic/core/dist/index-d66ff99d.node.react-server.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@keystatic/core/dist/index-d66ff99d.node.react-server.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ integer)\n/* harmony export */ });\n/* harmony import */ var _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-04c3e71f.node.react-server.js */ \"(rsc)/./node_modules/@keystatic/core/dist/index-04c3e71f.node.react-server.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-runtime.js\");\n\n\nfunction validateInteger(validation, value, label) {\n    if (value !== null && (typeof value !== \"number\" || !Number.isInteger(value))) {\n        return `${label} must be a whole number`;\n    }\n    if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {\n        return `${label} is required`;\n    }\n    if (value !== null) {\n        if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined && value < validation.min) {\n            return `${label} must be at least ${validation.min}`;\n        }\n        if ((validation === null || validation === void 0 ? void 0 : validation.max) !== undefined && value > validation.max) {\n            return `${label} must be at most ${validation.max}`;\n        }\n    }\n}\nfunction integer({ label, defaultValue, validation, description }) {\n    return (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_0__.ae)({\n        label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_0__.az, {\n                label: label,\n                description: description,\n                validation: validation,\n                ...props\n            });\n        },\n        defaultValue () {\n            return defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;\n        },\n        parse (value) {\n            if (value === undefined) {\n                return null;\n            }\n            if (typeof value === \"number\") {\n                return value;\n            }\n            throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_0__.ad(\"Must be a number\");\n        },\n        validate (value) {\n            const message = validateInteger(validation, value, label);\n            if (message !== undefined) {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_0__.ad(message);\n            }\n            (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_0__.ah)(value, validation, label);\n            return value;\n        },\n        serialize (value) {\n            return {\n                value: value === null ? undefined : value\n            };\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGtleXN0YXRpYy9jb3JlL2Rpc3QvaW5kZXgtZDY2ZmY5OWQubm9kZS5yZWFjdC1zZXJ2ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVLO0FBQy9IO0FBRXhDLFNBQVNTLGdCQUFnQkMsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLEtBQUs7SUFDL0MsSUFBSUQsVUFBVSxRQUFTLFFBQU9BLFVBQVUsWUFBWSxDQUFDRSxPQUFPQyxTQUFTLENBQUNILE1BQUssR0FBSTtRQUM3RSxPQUFPLENBQUMsRUFBRUMsTUFBTSx1QkFBdUIsQ0FBQztJQUMxQztJQUNBLElBQUlGLGVBQWUsUUFBUUEsZUFBZSxLQUFLLEtBQUtBLFdBQVdLLFVBQVUsSUFBSUosVUFBVSxNQUFNO1FBQzNGLE9BQU8sQ0FBQyxFQUFFQyxNQUFNLFlBQVksQ0FBQztJQUMvQjtJQUNBLElBQUlELFVBQVUsTUFBTTtRQUNsQixJQUFJLENBQUNELGVBQWUsUUFBUUEsZUFBZSxLQUFLLElBQUksS0FBSyxJQUFJQSxXQUFXTSxHQUFHLE1BQU1DLGFBQWFOLFFBQVFELFdBQVdNLEdBQUcsRUFBRTtZQUNwSCxPQUFPLENBQUMsRUFBRUosTUFBTSxrQkFBa0IsRUFBRUYsV0FBV00sR0FBRyxDQUFDLENBQUM7UUFDdEQ7UUFDQSxJQUFJLENBQUNOLGVBQWUsUUFBUUEsZUFBZSxLQUFLLElBQUksS0FBSyxJQUFJQSxXQUFXUSxHQUFHLE1BQU1ELGFBQWFOLFFBQVFELFdBQVdRLEdBQUcsRUFBRTtZQUNwSCxPQUFPLENBQUMsRUFBRU4sTUFBTSxpQkFBaUIsRUFBRUYsV0FBV1EsR0FBRyxDQUFDLENBQUM7UUFDckQ7SUFDRjtBQUNGO0FBRUEsU0FBU0MsUUFBUSxFQUNmUCxLQUFLLEVBQ0xRLFlBQVksRUFDWlYsVUFBVSxFQUNWVyxXQUFXLEVBQ1o7SUFDQyxPQUFPcEIsd0VBQW1DQSxDQUFDO1FBQ3pDVztRQUNBVSxPQUFNQyxLQUFLO1lBQ1QsT0FBTyxXQUFXLEdBQUVmLHNEQUFHQSxDQUFDTCxvRUFBaUJBLEVBQUU7Z0JBQ3pDUyxPQUFPQTtnQkFDUFMsYUFBYUE7Z0JBQ2JYLFlBQVlBO2dCQUNaLEdBQUdhLEtBQUs7WUFDVjtRQUNGO1FBQ0FIO1lBQ0UsT0FBT0EsaUJBQWlCLFFBQVFBLGlCQUFpQixLQUFLLElBQUlBLGVBQWU7UUFDM0U7UUFDQUksT0FBTWIsS0FBSztZQUNULElBQUlBLFVBQVVNLFdBQVc7Z0JBQ3ZCLE9BQU87WUFDVDtZQUNBLElBQUksT0FBT04sVUFBVSxVQUFVO2dCQUM3QixPQUFPQTtZQUNUO1lBQ0EsTUFBTSxJQUFJTixvRUFBY0EsQ0FBQztRQUMzQjtRQUNBb0IsVUFBU2QsS0FBSztZQUNaLE1BQU1lLFVBQVVqQixnQkFBZ0JDLFlBQVlDLE9BQU9DO1lBQ25ELElBQUljLFlBQVlULFdBQVc7Z0JBQ3pCLE1BQU0sSUFBSVosb0VBQWNBLENBQUNxQjtZQUMzQjtZQUNBbkIsd0VBQWNBLENBQUNJLE9BQU9ELFlBQVlFO1lBQ2xDLE9BQU9EO1FBQ1Q7UUFDQWdCLFdBQVVoQixLQUFLO1lBQ2IsT0FBTztnQkFDTEEsT0FBT0EsVUFBVSxPQUFPTSxZQUFZTjtZQUN0QztRQUNGO0lBQ0Y7QUFDRjtBQUV3QiIsInNvdXJjZXMiOlsid2VicGFjazovL0BrZXlzdGF0aWMvdGVtcGxhdGVzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9Aa2V5c3RhdGljL2NvcmUvZGlzdC9pbmRleC1kNjZmZjk5ZC5ub2RlLnJlYWN0LXNlcnZlci5qcz82ZGE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFlIGFzIGJhc2ljRm9ybUZpZWxkV2l0aFNpbXBsZVJlYWRlclBhcnNlLCBheiBhcyBJbnRlZ2VyRmllbGRJbnB1dCwgYWQgYXMgRmllbGREYXRhRXJyb3IsIGFoIGFzIGFzc2VydFJlcXVpcmVkIH0gZnJvbSAnLi9pbmRleC0wNGMzZTcxZi5ub2RlLnJlYWN0LXNlcnZlci5qcyc7XG5pbXBvcnQgeyBqc3ggfSBmcm9tICdyZWFjdC9qc3gtcnVudGltZSc7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSW50ZWdlcih2YWxpZGF0aW9uLCB2YWx1ZSwgbGFiZWwpIHtcbiAgaWYgKHZhbHVlICE9PSBudWxsICYmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSkpIHtcbiAgICByZXR1cm4gYCR7bGFiZWx9IG11c3QgYmUgYSB3aG9sZSBudW1iZXJgO1xuICB9XG4gIGlmICh2YWxpZGF0aW9uICE9PSBudWxsICYmIHZhbGlkYXRpb24gIT09IHZvaWQgMCAmJiB2YWxpZGF0aW9uLmlzUmVxdWlyZWQgJiYgdmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gYCR7bGFiZWx9IGlzIHJlcXVpcmVkYDtcbiAgfVxuICBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICBpZiAoKHZhbGlkYXRpb24gPT09IG51bGwgfHwgdmFsaWRhdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsaWRhdGlvbi5taW4pICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgPCB2YWxpZGF0aW9uLm1pbikge1xuICAgICAgcmV0dXJuIGAke2xhYmVsfSBtdXN0IGJlIGF0IGxlYXN0ICR7dmFsaWRhdGlvbi5taW59YDtcbiAgICB9XG4gICAgaWYgKCh2YWxpZGF0aW9uID09PSBudWxsIHx8IHZhbGlkYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbGlkYXRpb24ubWF4KSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlID4gdmFsaWRhdGlvbi5tYXgpIHtcbiAgICAgIHJldHVybiBgJHtsYWJlbH0gbXVzdCBiZSBhdCBtb3N0ICR7dmFsaWRhdGlvbi5tYXh9YDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW50ZWdlcih7XG4gIGxhYmVsLFxuICBkZWZhdWx0VmFsdWUsXG4gIHZhbGlkYXRpb24sXG4gIGRlc2NyaXB0aW9uXG59KSB7XG4gIHJldHVybiBiYXNpY0Zvcm1GaWVsZFdpdGhTaW1wbGVSZWFkZXJQYXJzZSh7XG4gICAgbGFiZWwsXG4gICAgSW5wdXQocHJvcHMpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovanN4KEludGVnZXJGaWVsZElucHV0LCB7XG4gICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgICB2YWxpZGF0aW9uOiB2YWxpZGF0aW9uLFxuICAgICAgICAuLi5wcm9wc1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBkZWZhdWx0VmFsdWUoKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFZhbHVlICE9PSBudWxsICYmIGRlZmF1bHRWYWx1ZSAhPT0gdm9pZCAwID8gZGVmYXVsdFZhbHVlIDogbnVsbDtcbiAgICB9LFxuICAgIHBhcnNlKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBGaWVsZERhdGFFcnJvcignTXVzdCBiZSBhIG51bWJlcicpO1xuICAgIH0sXG4gICAgdmFsaWRhdGUodmFsdWUpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSB2YWxpZGF0ZUludGVnZXIodmFsaWRhdGlvbiwgdmFsdWUsIGxhYmVsKTtcbiAgICAgIGlmIChtZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEZpZWxkRGF0YUVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0UmVxdWlyZWQodmFsdWUsIHZhbGlkYXRpb24sIGxhYmVsKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlID09PSBudWxsID8gdW5kZWZpbmVkIDogdmFsdWVcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHsgaW50ZWdlciBhcyBpIH07XG4iXSwibmFtZXMiOlsiYWUiLCJiYXNpY0Zvcm1GaWVsZFdpdGhTaW1wbGVSZWFkZXJQYXJzZSIsImF6IiwiSW50ZWdlckZpZWxkSW5wdXQiLCJhZCIsIkZpZWxkRGF0YUVycm9yIiwiYWgiLCJhc3NlcnRSZXF1aXJlZCIsImpzeCIsInZhbGlkYXRlSW50ZWdlciIsInZhbGlkYXRpb24iLCJ2YWx1ZSIsImxhYmVsIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiaXNSZXF1aXJlZCIsIm1pbiIsInVuZGVmaW5lZCIsIm1heCIsImludGVnZXIiLCJkZWZhdWx0VmFsdWUiLCJkZXNjcmlwdGlvbiIsIklucHV0IiwicHJvcHMiLCJwYXJzZSIsInZhbGlkYXRlIiwibWVzc2FnZSIsInNlcmlhbGl6ZSIsImkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@keystatic/core/dist/index-d66ff99d.node.react-server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@keystatic/core/dist/isValidURL-c29bb1bd.node.react-server.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@keystatic/core/dist/isValidURL-c29bb1bd.node.react-server.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   N: () => (/* binding */ NAVIGATION_DIVIDER_KEY),\n/* harmony export */   a: () => (/* binding */ collection),\n/* harmony export */   c: () => (/* binding */ config),\n/* harmony export */   i: () => (/* binding */ isValidURL),\n/* harmony export */   s: () => (/* binding */ singleton)\n/* harmony export */ });\n/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @braintree/sanitize-url */ \"(rsc)/./node_modules/@braintree/sanitize-url/dist/index.js\");\n\n// Common\n// ----------------------------------------------------------------------------\n// Interface\n// ----------------------------------------------------------------------------\nconst NAVIGATION_DIVIDER_KEY = \"---\";\n// Storage\n// ----------------------------------------------------------------------------\n// ============================================================================\n// Functions\n// ============================================================================\nfunction config(config) {\n    return config;\n}\nfunction collection(collection) {\n    return collection;\n}\nfunction singleton(collection) {\n    return collection;\n}\nfunction isValidURL(url) {\n    return url === (0,_braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_0__.sanitizeUrl)(url);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGtleXN0YXRpYy9jb3JlL2Rpc3QvaXNWYWxpZFVSTC1jMjliYjFiZC5ub2RlLnJlYWN0LXNlcnZlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBc0Q7QUFFdEQsU0FBUztBQUNULCtFQUErRTtBQUUvRSxZQUFZO0FBQ1osK0VBQStFO0FBRS9FLE1BQU1DLHlCQUF5QjtBQUUvQixVQUFVO0FBQ1YsK0VBQStFO0FBRS9FLCtFQUErRTtBQUMvRSxZQUFZO0FBQ1osK0VBQStFO0FBRS9FLFNBQVNDLE9BQU9BLE1BQU07SUFDcEIsT0FBT0E7QUFDVDtBQUNBLFNBQVNDLFdBQVdBLFVBQVU7SUFDNUIsT0FBT0E7QUFDVDtBQUNBLFNBQVNDLFVBQVVELFVBQVU7SUFDM0IsT0FBT0E7QUFDVDtBQUVBLFNBQVNFLFdBQVdDLEdBQUc7SUFDckIsT0FBT0EsUUFBUU4sb0VBQVdBLENBQUNNO0FBQzdCO0FBRXNHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGtleXN0YXRpYy90ZW1wbGF0ZXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BrZXlzdGF0aWMvY29yZS9kaXN0L2lzVmFsaWRVUkwtYzI5YmIxYmQubm9kZS5yZWFjdC1zZXJ2ZXIuanM/NmQxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzYW5pdGl6ZVVybCB9IGZyb20gJ0BicmFpbnRyZWUvc2FuaXRpemUtdXJsJztcblxuLy8gQ29tbW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEludGVyZmFjZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBOQVZJR0FUSU9OX0RJVklERVJfS0VZID0gJy0tLSc7XG5cbi8vIFN0b3JhZ2Vcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRnVuY3Rpb25zXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIGNvbmZpZyhjb25maWcpIHtcbiAgcmV0dXJuIGNvbmZpZztcbn1cbmZ1bmN0aW9uIGNvbGxlY3Rpb24oY29sbGVjdGlvbikge1xuICByZXR1cm4gY29sbGVjdGlvbjtcbn1cbmZ1bmN0aW9uIHNpbmdsZXRvbihjb2xsZWN0aW9uKSB7XG4gIHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkVVJMKHVybCkge1xuICByZXR1cm4gdXJsID09PSBzYW5pdGl6ZVVybCh1cmwpO1xufVxuXG5leHBvcnQgeyBOQVZJR0FUSU9OX0RJVklERVJfS0VZIGFzIE4sIGNvbGxlY3Rpb24gYXMgYSwgY29uZmlnIGFzIGMsIGlzVmFsaWRVUkwgYXMgaSwgc2luZ2xldG9uIGFzIHMgfTtcbiJdLCJuYW1lcyI6WyJzYW5pdGl6ZVVybCIsIk5BVklHQVRJT05fRElWSURFUl9LRVkiLCJjb25maWciLCJjb2xsZWN0aW9uIiwic2luZ2xldG9uIiwiaXNWYWxpZFVSTCIsInVybCIsIk4iLCJhIiwiYyIsImkiLCJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@keystatic/core/dist/isValidURL-c29bb1bd.node.react-server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@keystatic/core/dist/keystatic-core-reader.node.react-server.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@keystatic/core/dist/keystatic-core-reader.node.react-server.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createReader: () => (/* binding */ createReader)\n/* harmony export */ });\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_fs_promises__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\n/* harmony import */ var _generic_0a163b6b_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./generic-0a163b6b.node.react-server.js */ \"(rsc)/./node_modules/@keystatic/core/dist/generic-0a163b6b.node.react-server.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-runtime.js\");\n/* harmony import */ var _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-04c3e71f.node.react-server.js */ \"(rsc)/./node_modules/@keystatic/core/dist/index-04c3e71f.node.react-server.js\");\n/* harmony import */ var emery_assertions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! emery/assertions */ \"(rsc)/./node_modules/emery/assertions/dist/emery-assertions.esm.js\");\n/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! emery */ \"(rsc)/./node_modules/emery/dist/emery.esm.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/weak-memoize */ \"(rsc)/./node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js\");\n/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.mjs\");\n/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sindresorhus/slugify */ \"(rsc)/./node_modules/@sindresorhus/slugify/index.js\");\n/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @braintree/sanitize-url */ \"(rsc)/./node_modules/@braintree/sanitize-url/dist/index.js\");\n/* harmony import */ var _error_formatting_ec352252_node_react_server_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./error-formatting-ec352252.node.react-server.js */ \"(rsc)/./node_modules/@keystatic/core/dist/error-formatting-ec352252.node.react-server.js\");\n/* harmony import */ var js_yaml__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! js-yaml */ \"(rsc)/./node_modules/js-yaml/dist/js-yaml.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction createReader(repoPath, config) {\n    const fs$1 = {\n        async fileExists (path$1) {\n            try {\n                await node_fs_promises__WEBPACK_IMPORTED_MODULE_1__.stat(node_path__WEBPACK_IMPORTED_MODULE_0__.join(repoPath, path$1));\n                return true;\n            } catch (err) {\n                if (err.code === \"ENOENT\") return false;\n                throw err;\n            }\n        },\n        async readdir (path$1) {\n            try {\n                const entries = await node_fs_promises__WEBPACK_IMPORTED_MODULE_1__.readdir(node_path__WEBPACK_IMPORTED_MODULE_0__.join(repoPath, path$1), {\n                    withFileTypes: true\n                });\n                const filtered = [];\n                for (const entry of entries){\n                    if (entry.isDirectory()) {\n                        filtered.push({\n                            name: entry.name,\n                            kind: \"directory\"\n                        });\n                    }\n                    if (entry.isFile()) {\n                        filtered.push({\n                            name: entry.name,\n                            kind: \"file\"\n                        });\n                    }\n                }\n                return filtered;\n            } catch (err) {\n                if (err.code === \"ENOENT\") return [];\n                throw err;\n            }\n        },\n        async readFile (path$1) {\n            try {\n                return await node_fs_promises__WEBPACK_IMPORTED_MODULE_1__.readFile(node_path__WEBPACK_IMPORTED_MODULE_0__.join(repoPath, path$1));\n            } catch (err) {\n                if (err.code === \"ENOENT\") return null;\n                throw err;\n            }\n        }\n    };\n    return {\n        collections: Object.fromEntries(Object.keys(config.collections || {}).map((key)=>[\n                key,\n                (0,_generic_0a163b6b_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.c)(key, config, fs$1)\n            ])),\n        singletons: Object.fromEntries(Object.keys(config.singletons || {}).map((key)=>[\n                key,\n                (0,_generic_0a163b6b_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.s)(key, config, fs$1)\n            ])),\n        repoPath,\n        config\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGtleXN0YXRpYy9jb3JlL2Rpc3Qva2V5c3RhdGljLWNvcmUtcmVhZGVyLm5vZGUucmVhY3Qtc2VydmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNkI7QUFDSztBQUNvRTtBQUMzRTtBQUNvQjtBQUNyQjtBQUNYO0FBQ1c7QUFDWDtBQUNJO0FBQ0g7QUFDZTtBQUNYO0FBQ1c7QUFDRTtBQUN5QjtBQUN6QztBQUNGO0FBRWYsU0FBU00sYUFBYUMsUUFBUSxFQUFFQyxNQUFNO0lBQ3BDLE1BQU1DLE9BQU87UUFDWCxNQUFNQyxZQUFXQyxNQUFNO1lBQ3JCLElBQUk7Z0JBQ0YsTUFBTVYsa0RBQU8sQ0FBQ0QsMkNBQVMsQ0FBQ08sVUFBVUk7Z0JBQ2xDLE9BQU87WUFDVCxFQUFFLE9BQU9HLEtBQUs7Z0JBQ1osSUFBSUEsSUFBSUMsSUFBSSxLQUFLLFVBQVUsT0FBTztnQkFDbEMsTUFBTUQ7WUFDUjtRQUNGO1FBQ0EsTUFBTUUsU0FBUUwsTUFBTTtZQUNsQixJQUFJO2dCQUNGLE1BQU1NLFVBQVUsTUFBTWhCLHFEQUFVLENBQUNELDJDQUFTLENBQUNPLFVBQVVJLFNBQVM7b0JBQzVETyxlQUFlO2dCQUNqQjtnQkFDQSxNQUFNQyxXQUFXLEVBQUU7Z0JBQ25CLEtBQUssTUFBTUMsU0FBU0gsUUFBUztvQkFDM0IsSUFBSUcsTUFBTUMsV0FBVyxJQUFJO3dCQUN2QkYsU0FBU0csSUFBSSxDQUFDOzRCQUNaQyxNQUFNSCxNQUFNRyxJQUFJOzRCQUNoQkMsTUFBTTt3QkFDUjtvQkFDRjtvQkFDQSxJQUFJSixNQUFNSyxNQUFNLElBQUk7d0JBQ2xCTixTQUFTRyxJQUFJLENBQUM7NEJBQ1pDLE1BQU1ILE1BQU1HLElBQUk7NEJBQ2hCQyxNQUFNO3dCQUNSO29CQUNGO2dCQUNGO2dCQUNBLE9BQU9MO1lBQ1QsRUFBRSxPQUFPTCxLQUFLO2dCQUNaLElBQUlBLElBQUlDLElBQUksS0FBSyxVQUFVLE9BQU8sRUFBRTtnQkFDcEMsTUFBTUQ7WUFDUjtRQUNGO1FBQ0EsTUFBTVksVUFBU2YsTUFBTTtZQUNuQixJQUFJO2dCQUNGLE9BQU8sTUFBTVYsc0RBQVcsQ0FBQ0QsMkNBQVMsQ0FBQ08sVUFBVUk7WUFDL0MsRUFBRSxPQUFPRyxLQUFLO2dCQUNaLElBQUlBLElBQUlDLElBQUksS0FBSyxVQUFVLE9BQU87Z0JBQ2xDLE1BQU1EO1lBQ1I7UUFDRjtJQUNGO0lBQ0EsT0FBTztRQUNMYSxhQUFhQyxPQUFPQyxXQUFXLENBQUNELE9BQU9FLElBQUksQ0FBQ3RCLE9BQU9tQixXQUFXLElBQUksQ0FBQyxHQUFHSSxHQUFHLENBQUNDLENBQUFBLE1BQU87Z0JBQUNBO2dCQUFLN0IseUVBQWdCQSxDQUFDNkIsS0FBS3hCLFFBQVFDO2FBQU07UUFDM0h3QixZQUFZTCxPQUFPQyxXQUFXLENBQUNELE9BQU9FLElBQUksQ0FBQ3RCLE9BQU95QixVQUFVLElBQUksQ0FBQyxHQUFHRixHQUFHLENBQUNDLENBQUFBLE1BQU87Z0JBQUNBO2dCQUFLM0IseUVBQWVBLENBQUMyQixLQUFLeEIsUUFBUUM7YUFBTTtRQUN4SEY7UUFDQUM7SUFDRjtBQUNGO0FBRXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGtleXN0YXRpYy90ZW1wbGF0ZXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BrZXlzdGF0aWMvY29yZS9kaXN0L2tleXN0YXRpYy1jb3JlLXJlYWRlci5ub2RlLnJlYWN0LXNlcnZlci5qcz82MzkyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ25vZGU6cGF0aCc7XG5pbXBvcnQgZnMgZnJvbSAnbm9kZTpmcy9wcm9taXNlcyc7XG5pbXBvcnQgeyBjIGFzIGNvbGxlY3Rpb25SZWFkZXIsIHMgYXMgc2luZ2xldG9uUmVhZGVyIH0gZnJvbSAnLi9nZW5lcmljLTBhMTYzYjZiLm5vZGUucmVhY3Qtc2VydmVyLmpzJztcbmltcG9ydCAncmVhY3QvanN4LXJ1bnRpbWUnO1xuaW1wb3J0ICcuL2luZGV4LTA0YzNlNzFmLm5vZGUucmVhY3Qtc2VydmVyLmpzJztcbmltcG9ydCAnQG1hcmtkb2MvbWFya2RvYyc7XG5pbXBvcnQgJ3NsYXRlJztcbmltcG9ydCAnZW1lcnkvYXNzZXJ0aW9ucyc7XG5pbXBvcnQgJ2VtZXJ5JztcbmltcG9ydCAnanMtYmFzZTY0JztcbmltcG9ydCAnY3J5cHRvJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnZGVjaW1hbC5qcyc7XG5pbXBvcnQgJ0BzaW5kcmVzb3JodXMvc2x1Z2lmeSc7XG5pbXBvcnQgJ0BicmFpbnRyZWUvc2FuaXRpemUtdXJsJztcbmltcG9ydCAnLi9lcnJvci1mb3JtYXR0aW5nLWVjMzUyMjUyLm5vZGUucmVhY3Qtc2VydmVyLmpzJztcbmltcG9ydCAnanMteWFtbCc7XG5pbXBvcnQgJ3JlYWN0JztcblxuZnVuY3Rpb24gY3JlYXRlUmVhZGVyKHJlcG9QYXRoLCBjb25maWcpIHtcbiAgY29uc3QgZnMkMSA9IHtcbiAgICBhc3luYyBmaWxlRXhpc3RzKHBhdGgkMSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZnMuc3RhdChwYXRoLmpvaW4ocmVwb1BhdGgsIHBhdGgkMSkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoZXJyLmNvZGUgPT09ICdFTk9FTlQnKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHJlYWRkaXIocGF0aCQxKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBlbnRyaWVzID0gYXdhaXQgZnMucmVhZGRpcihwYXRoLmpvaW4ocmVwb1BhdGgsIHBhdGgkMSksIHtcbiAgICAgICAgICB3aXRoRmlsZVR5cGVzOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgICAgICBpZiAoZW50cnkuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgZmlsdGVyZWQucHVzaCh7XG4gICAgICAgICAgICAgIG5hbWU6IGVudHJ5Lm5hbWUsXG4gICAgICAgICAgICAgIGtpbmQ6ICdkaXJlY3RvcnknXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVudHJ5LmlzRmlsZSgpKSB7XG4gICAgICAgICAgICBmaWx0ZXJlZC5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogZW50cnkubmFtZSxcbiAgICAgICAgICAgICAga2luZDogJ2ZpbGUnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIuY29kZSA9PT0gJ0VOT0VOVCcpIHJldHVybiBbXTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgcmVhZEZpbGUocGF0aCQxKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgZnMucmVhZEZpbGUocGF0aC5qb2luKHJlcG9QYXRoLCBwYXRoJDEpKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoZXJyLmNvZGUgPT09ICdFTk9FTlQnKSByZXR1cm4gbnVsbDtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBjb2xsZWN0aW9uczogT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5rZXlzKGNvbmZpZy5jb2xsZWN0aW9ucyB8fCB7fSkubWFwKGtleSA9PiBba2V5LCBjb2xsZWN0aW9uUmVhZGVyKGtleSwgY29uZmlnLCBmcyQxKV0pKSxcbiAgICBzaW5nbGV0b25zOiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmtleXMoY29uZmlnLnNpbmdsZXRvbnMgfHwge30pLm1hcChrZXkgPT4gW2tleSwgc2luZ2xldG9uUmVhZGVyKGtleSwgY29uZmlnLCBmcyQxKV0pKSxcbiAgICByZXBvUGF0aCxcbiAgICBjb25maWdcbiAgfTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlUmVhZGVyIH07XG4iXSwibmFtZXMiOlsicGF0aCIsImZzIiwiYyIsImNvbGxlY3Rpb25SZWFkZXIiLCJzIiwic2luZ2xldG9uUmVhZGVyIiwiY3JlYXRlUmVhZGVyIiwicmVwb1BhdGgiLCJjb25maWciLCJmcyQxIiwiZmlsZUV4aXN0cyIsInBhdGgkMSIsInN0YXQiLCJqb2luIiwiZXJyIiwiY29kZSIsInJlYWRkaXIiLCJlbnRyaWVzIiwid2l0aEZpbGVUeXBlcyIsImZpbHRlcmVkIiwiZW50cnkiLCJpc0RpcmVjdG9yeSIsInB1c2giLCJuYW1lIiwia2luZCIsImlzRmlsZSIsInJlYWRGaWxlIiwiY29sbGVjdGlvbnMiLCJPYmplY3QiLCJmcm9tRW50cmllcyIsImtleXMiLCJtYXAiLCJrZXkiLCJzaW5nbGV0b25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@keystatic/core/dist/keystatic-core-reader.node.react-server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@keystatic/core/dist/keystatic-core.node.react-server.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@keystatic/core/dist/keystatic-core.node.react-server.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockWrapper: () => (/* binding */ BlockWrapper),\n/* harmony export */   NotEditable: () => (/* binding */ NotEditable),\n/* harmony export */   ToolbarSeparator: () => (/* binding */ ToolbarSeparator),\n/* harmony export */   collection: () => (/* reexport safe */ _isValidURL_c29bb1bd_node_react_server_js__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   component: () => (/* reexport safe */ _api_bcef1679_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__.c),\n/* harmony export */   config: () => (/* reexport safe */ _isValidURL_c29bb1bd_node_react_server_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   fields: () => (/* binding */ index),\n/* harmony export */   singleton: () => (/* reexport safe */ _isValidURL_c29bb1bd_node_react_server_js__WEBPACK_IMPORTED_MODULE_0__.s)\n/* harmony export */ });\n/* harmony import */ var _isValidURL_c29bb1bd_node_react_server_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isValidURL-c29bb1bd.node.react-server.js */ \"(rsc)/./node_modules/@keystatic/core/dist/isValidURL-c29bb1bd.node.react-server.js\");\n/* harmony import */ var _api_bcef1679_node_react_server_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api-bcef1679.node.react-server.js */ \"(rsc)/./node_modules/@keystatic/core/dist/api-bcef1679.node.react-server.js\");\n/* harmony import */ var _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-04c3e71f.node.react-server.js */ \"(rsc)/./node_modules/@keystatic/core/dist/index-04c3e71f.node.react-server.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-runtime.js\");\n/* harmony import */ var _index_d66ff99d_node_react_server_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-d66ff99d.node.react-server.js */ \"(rsc)/./node_modules/@keystatic/core/dist/index-d66ff99d.node.react-server.js\");\n/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! decimal.js */ \"(rsc)/./node_modules/decimal.js/decimal.mjs\");\n/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sindresorhus/slugify */ \"(rsc)/./node_modules/@sindresorhus/slugify/index.js\");\n/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! emery */ \"(rsc)/./node_modules/emery/dist/emery.esm.js\");\n/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @braintree/sanitize-url */ \"(rsc)/./node_modules/@braintree/sanitize-url/dist/index.js\");\n/* harmony import */ var emery_assertions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! emery/assertions */ \"(rsc)/./node_modules/emery/assertions/dist/emery-assertions.esm.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @emotion/weak-memoize */ \"(rsc)/./node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction array(element, opts) {\n    var _opts$label;\n    return {\n        kind: \"array\",\n        element,\n        label: (_opts$label = opts === null || opts === void 0 ? void 0 : opts.label) !== null && _opts$label !== void 0 ? _opts$label : \"Items\",\n        description: opts === null || opts === void 0 ? void 0 : opts.description,\n        itemLabel: opts === null || opts === void 0 ? void 0 : opts.itemLabel,\n        asChildTag: opts === null || opts === void 0 ? void 0 : opts.asChildTag,\n        slugField: opts === null || opts === void 0 ? void 0 : opts.slugField,\n        validation: opts === null || opts === void 0 ? void 0 : opts.validation\n    };\n}\nfunction checkbox({ label, defaultValue = false, description }) {\n    return (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ae)({\n        label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.af, {\n                ...props,\n                label: label,\n                description: description\n            });\n        },\n        defaultValue () {\n            return defaultValue;\n        },\n        parse (value) {\n            if (value === undefined) return defaultValue;\n            if (typeof value !== \"boolean\") {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a boolean\");\n            }\n            return value;\n        },\n        validate (value) {\n            return value;\n        },\n        serialize (value) {\n            return {\n                value\n            };\n        }\n    });\n}\nfunction child(options) {\n    return {\n        kind: \"child\",\n        options: options.kind === \"block\" ? {\n            ...options,\n            dividers: options.dividers,\n            formatting: options.formatting === \"inherit\" ? {\n                blockTypes: \"inherit\",\n                headingLevels: \"inherit\",\n                inlineMarks: \"inherit\",\n                listTypes: \"inherit\",\n                alignment: \"inherit\",\n                softBreaks: \"inherit\"\n            } : options.formatting,\n            links: options.links,\n            images: options.images,\n            tables: options.tables,\n            componentBlocks: options.componentBlocks\n        } : {\n            kind: \"inline\",\n            placeholder: options.placeholder,\n            formatting: options.formatting === \"inherit\" ? {\n                inlineMarks: \"inherit\",\n                softBreaks: \"inherit\"\n            } : options.formatting,\n            links: options.links\n        }\n    };\n}\nfunction conditional(discriminant, values) {\n    return {\n        kind: \"conditional\",\n        discriminant,\n        values: values\n    };\n}\nfunction validateDate(validation, value, label) {\n    if (value !== null && !/^\\d{4}-\\d{2}-\\d{2}$/.test(value)) {\n        return `${label} is not a valid date`;\n    }\n    if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {\n        return `${label} is required`;\n    }\n    if ((validation !== null && validation !== void 0 && validation.min || validation !== null && validation !== void 0 && validation.max) && value !== null) {\n        const date = new Date(value);\n        if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined) {\n            const min = new Date(validation.min);\n            if (date < min) {\n                return `${label} must be after ${min.toLocaleDateString()}`;\n            }\n        }\n        if ((validation === null || validation === void 0 ? void 0 : validation.max) !== undefined) {\n            const max = new Date(validation.max);\n            if (date > max) {\n                return `${label} must be no later than ${max.toLocaleDateString()}`;\n            }\n        }\n    }\n}\nfunction date({ label, defaultValue, validation, description }) {\n    return (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ae)({\n        label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ag, {\n                validation: validation,\n                label: label,\n                description: description,\n                ...props\n            });\n        },\n        defaultValue () {\n            if (defaultValue === undefined) {\n                return null;\n            }\n            if (typeof defaultValue === \"string\") {\n                return defaultValue;\n            }\n            const today = new Date();\n            const year = today.getFullYear();\n            const month = String(today.getMonth() + 1).padStart(2, \"0\");\n            const day = String(today.getDate()).padStart(2, \"0\");\n            return `${year}-${month}-${day}`;\n        },\n        parse (value) {\n            if (value === undefined) {\n                return null;\n            }\n            if (typeof value !== \"string\") {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a string\");\n            }\n            return value;\n        },\n        serialize (value) {\n            return {\n                value: value === null ? undefined : value\n            };\n        },\n        validate (value) {\n            const message = validateDate(validation, value, label);\n            if (message !== undefined) {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(message);\n            }\n            (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ah)(value, validation, label);\n            return value;\n        }\n    });\n}\nfunction validateDatetime(validation, value, label) {\n    if (value !== null && !/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$/.test(value)) {\n        return `${label} is not a valid datetime`;\n    }\n    if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {\n        return `${label} is required`;\n    }\n    if ((validation !== null && validation !== void 0 && validation.min || validation !== null && validation !== void 0 && validation.max) && value !== null) {\n        const datetime = new Date(value);\n        if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined) {\n            const min = new Date(validation.min);\n            if (datetime < min) {\n                return `${label} must be after ${min.toISOString()}`;\n            }\n        }\n        if ((validation === null || validation === void 0 ? void 0 : validation.max) !== undefined) {\n            const max = new Date(validation.max);\n            if (datetime > max) {\n                return `${label} must be no later than ${max.toISOString()}`;\n            }\n        }\n    }\n}\nfunction datetime({ label, defaultValue, validation, description }) {\n    return (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ae)({\n        label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ai, {\n                validation: validation,\n                label: label,\n                description: description,\n                ...props\n            });\n        },\n        defaultValue () {\n            if (defaultValue === undefined) {\n                return null;\n            }\n            if (typeof defaultValue === \"string\") {\n                return defaultValue;\n            }\n            if (defaultValue.kind === \"now\") {\n                const now = new Date();\n                return now.toISOString();\n            }\n            return null;\n        },\n        parse (value) {\n            if (value === undefined) {\n                return null;\n            }\n            if (typeof value !== \"string\") {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a string\");\n            }\n            return value;\n        },\n        serialize (value) {\n            return {\n                value: value === null ? undefined : value\n            };\n        },\n        validate (value) {\n            const message = validateDatetime(validation, value, label);\n            if (message !== undefined) {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(message);\n            }\n            (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ah)(value, validation, label);\n            return value;\n        }\n    });\n}\nfunction emptyDocument() {\n    return {\n        kind: \"form\",\n        formKind: \"content\",\n        Input () {\n            return null;\n        },\n        defaultValue () {\n            return null;\n        },\n        parse () {\n            return null;\n        },\n        contentExtension: \".mdoc\",\n        serialize () {\n            return {\n                value: undefined,\n                content: new Uint8Array(),\n                external: new Map(),\n                other: new Map()\n            };\n        },\n        validate (value) {\n            return value;\n        },\n        reader: {\n            parse () {\n                return null;\n            }\n        }\n    };\n}\nfunction empty() {\n    return (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ae)({\n        Input () {\n            return null;\n        },\n        defaultValue () {\n            return null;\n        },\n        parse () {\n            return null;\n        },\n        serialize () {\n            return {\n                value: undefined\n            };\n        },\n        validate (value) {\n            return value;\n        },\n        label: \"Empty\"\n    });\n}\nfunction image({ label, directory, validation, description, publicPath }) {\n    return {\n        kind: \"form\",\n        formKind: \"asset\",\n        label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.aj, {\n                label: label,\n                description: description,\n                validation: validation,\n                ...props\n            });\n        },\n        defaultValue () {\n            return null;\n        },\n        filename (value, args) {\n            if (typeof value === \"string\") {\n                return value.slice((0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ak)(publicPath, args.slug).length);\n            }\n            return undefined;\n        },\n        parse (value, args) {\n            var _value$match$, _value$match;\n            if (value === undefined) {\n                return null;\n            }\n            if (typeof value !== \"string\") {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a string\");\n            }\n            if (args.asset === undefined) {\n                return null;\n            }\n            return {\n                data: args.asset,\n                filename: value.slice((0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ak)(publicPath, args.slug).length),\n                extension: (_value$match$ = (_value$match = value.match(/\\.([^.]+$)/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) !== null && _value$match$ !== void 0 ? _value$match$ : \"\"\n            };\n        },\n        validate (value) {\n            (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ah)(value, validation, label);\n            return value;\n        },\n        serialize (value, args) {\n            if (value === null) {\n                return {\n                    value: undefined,\n                    asset: undefined\n                };\n            }\n            const filename = args.suggestedFilenamePrefix ? args.suggestedFilenamePrefix + \".\" + value.extension : value.filename;\n            return {\n                value: `${(0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ak)(publicPath, args.slug)}${filename}`,\n                asset: {\n                    filename,\n                    content: value.data\n                }\n            };\n        },\n        directory: directory ? (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.al)(directory) : undefined,\n        reader: {\n            parse (value) {\n                if (typeof value !== \"string\" && value !== undefined) {\n                    throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a string\");\n                }\n                const val = value === undefined ? null : value;\n                (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ah)(val, validation, label);\n                return val;\n            }\n        }\n    };\n}\nfunction file({ label, directory, validation, description, publicPath }) {\n    return {\n        kind: \"form\",\n        formKind: \"asset\",\n        label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.am, {\n                label: label,\n                description: description,\n                validation: validation,\n                ...props\n            });\n        },\n        defaultValue () {\n            return null;\n        },\n        filename (value, args) {\n            if (typeof value === \"string\") {\n                return value.slice((0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ak)(publicPath, args.slug).length);\n            }\n            return undefined;\n        },\n        parse (value, args) {\n            var _value$match$, _value$match;\n            if (value === undefined) {\n                return null;\n            }\n            if (typeof value !== \"string\") {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a string\");\n            }\n            if (args.asset === undefined) {\n                return null;\n            }\n            return {\n                data: args.asset,\n                filename: value.slice((0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ak)(publicPath, args.slug).length),\n                extension: (_value$match$ = (_value$match = value.match(/\\.([^.]+$)/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) !== null && _value$match$ !== void 0 ? _value$match$ : \"\"\n            };\n        },\n        validate (value) {\n            (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ah)(value, validation, label);\n            return value;\n        },\n        serialize (value, args) {\n            if (value === null) {\n                return {\n                    value: undefined,\n                    asset: undefined\n                };\n            }\n            const filename = args.suggestedFilenamePrefix ? args.suggestedFilenamePrefix + \".\" + value.extension : value.filename;\n            return {\n                value: `${(0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ak)(publicPath, args.slug)}${filename}`,\n                asset: {\n                    filename,\n                    content: value.data\n                }\n            };\n        },\n        directory: directory ? (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.al)(directory) : undefined,\n        reader: {\n            parse (value) {\n                if (typeof value !== \"string\" && value !== undefined) {\n                    throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a string\");\n                }\n                const val = value === undefined ? null : value;\n                (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ah)(val, validation, label);\n                return val;\n            }\n        }\n    };\n}\nfunction validateNumber(validation, value, step, label) {\n    if (value !== null && typeof value !== \"number\") {\n        return `${label} must be a number`;\n    }\n    if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {\n        return `${label} is required`;\n    }\n    if (value !== null) {\n        if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined && value < validation.min) {\n            return `${label} must be at least ${validation.min}`;\n        }\n        if ((validation === null || validation === void 0 ? void 0 : validation.max) !== undefined && value > validation.max) {\n            return `${label} must be at most ${validation.max}`;\n        }\n        if (step !== undefined && (validation === null || validation === void 0 ? void 0 : validation.validateStep) !== undefined && new decimal_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](value).mod(new decimal_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](step)).toNumber() !== 0) {\n            return `${label} must be a multiple of ${step}`;\n        }\n    }\n}\nfunction number({ label, defaultValue, step, validation, description }) {\n    return (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ae)({\n        label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.an, {\n                label: label,\n                description: description,\n                validation: validation,\n                step: step,\n                ...props\n            });\n        },\n        defaultValue () {\n            return defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;\n        },\n        parse (value) {\n            if (value === undefined) {\n                return null;\n            }\n            if (typeof value === \"number\") {\n                return value;\n            }\n            throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a number\");\n        },\n        validate (value) {\n            const message = validateNumber(validation, value, step, label);\n            if (message !== undefined) {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(message);\n            }\n            (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ah)(value, validation, label);\n            return value;\n        },\n        serialize (value) {\n            return {\n                value: value === null ? undefined : value\n            };\n        }\n    });\n}\nfunction multiselect({ label, options, defaultValue = [], description }) {\n    const valuesToOption = new Map(options.map((x)=>[\n            x.value,\n            x\n        ]));\n    const field = (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ae)({\n        label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ao, {\n                label: label,\n                description: description,\n                options: options,\n                ...props\n            });\n        },\n        defaultValue () {\n            return defaultValue;\n        },\n        parse (value) {\n            if (value === undefined) {\n                return [];\n            }\n            if (!Array.isArray(value)) {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be an array of options\");\n            }\n            if (!value.every((x)=>typeof x === \"string\" && valuesToOption.has(x))) {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(`Must be an array with one of ${options.map((x)=>x.value).join(\", \")}`);\n            }\n            return value;\n        },\n        validate (value) {\n            return value;\n        },\n        serialize (value) {\n            return {\n                value\n            };\n        }\n    });\n    return {\n        ...field,\n        options\n    };\n}\nfunction pathReference({ label, pattern, validation, description }) {\n    return (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ae)({\n        label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ap, {\n                label: label,\n                pattern: pattern,\n                description: description,\n                validation: validation,\n                ...props\n            });\n        },\n        defaultValue () {\n            return null;\n        },\n        parse (value) {\n            if (value === undefined) {\n                return null;\n            }\n            if (typeof value !== \"string\") {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a string\");\n            }\n            return value;\n        },\n        validate (value) {\n            (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ah)(value, validation, label);\n            return value;\n        },\n        serialize (value) {\n            return {\n                value: value === null ? undefined : value\n            };\n        }\n    });\n}\nfunction relationship({ label, collection, validation, description }) {\n    return (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ae)({\n        label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.aq, {\n                label: label,\n                collection: collection,\n                description: description,\n                validation: validation,\n                ...props\n            });\n        },\n        defaultValue () {\n            return null;\n        },\n        parse (value) {\n            if (value === undefined) {\n                return null;\n            }\n            if (typeof value !== \"string\") {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a string\");\n            }\n            return value;\n        },\n        validate (value) {\n            (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ah)(value, validation, label);\n            return value;\n        },\n        serialize (value) {\n            return {\n                value: value === null ? undefined : value\n            };\n        }\n    });\n}\nfunction select({ label, options, defaultValue, description }) {\n    const optionValuesSet = new Set(options.map((x)=>x.value));\n    if (!optionValuesSet.has(defaultValue)) {\n        throw new Error(`A defaultValue of ${defaultValue} was provided to a select field but it does not match the value of one of the options provided`);\n    }\n    const field = (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ae)({\n        label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ar, {\n                label: label,\n                options: options,\n                description: description,\n                ...props\n            });\n        },\n        defaultValue () {\n            return defaultValue;\n        },\n        parse (value) {\n            if (value === undefined) {\n                return defaultValue;\n            }\n            if (typeof value !== \"string\") {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a string\");\n            }\n            if (!optionValuesSet.has(value)) {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a valid option\");\n            }\n            return value;\n        },\n        validate (value) {\n            return value;\n        },\n        serialize (value) {\n            return {\n                value\n            };\n        }\n    });\n    return {\n        ...field,\n        options\n    };\n}\nfunction parseSlugFieldAsNormalField(value) {\n    if (value === undefined) {\n        return {\n            name: \"\",\n            slug: \"\"\n        };\n    }\n    if (typeof value !== \"object\") {\n        throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be an object\");\n    }\n    if (Object.keys(value).length !== 2) {\n        throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Unexpected keys\");\n    }\n    if (!(\"name\" in value) || !(\"slug\" in value)) {\n        throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Missing name or slug\");\n    }\n    if (typeof value.name !== \"string\") {\n        throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"name must be a string\");\n    }\n    if (typeof value.slug !== \"string\") {\n        throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"slug must be a string\");\n    }\n    return {\n        name: value.name,\n        slug: value.slug\n    };\n}\nfunction parseAsSlugField(value, slug) {\n    if (value === undefined) {\n        return {\n            name: \"\",\n            slug\n        };\n    }\n    if (typeof value !== \"string\") {\n        throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a string\");\n    }\n    return {\n        name: value,\n        slug\n    };\n}\nfunction slug(args) {\n    var _args$slug, _args$name$defaultVal, _args$name$defaultVal2;\n    const naiveGenerateSlug = ((_args$slug = args.slug) === null || _args$slug === void 0 ? void 0 : _args$slug.generate) || _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_6__;\n    const defaultValue = {\n        name: (_args$name$defaultVal = args.name.defaultValue) !== null && _args$name$defaultVal !== void 0 ? _args$name$defaultVal : \"\",\n        slug: naiveGenerateSlug((_args$name$defaultVal2 = args.name.defaultValue) !== null && _args$name$defaultVal2 !== void 0 ? _args$name$defaultVal2 : \"\")\n    };\n    function validate(value, { slugField } = {\n        slugField: undefined\n    }) {\n        var _args$name$validation, _args$name$validation2, _args$name$validation3, _args$name$validation4, _args$slug$validation, _args$slug2, _args$slug$validation2, _args$slug3, _args$slug$label, _args$slug4;\n        const nameMessage = (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.at)(value.name, (_args$name$validation = (_args$name$validation2 = args.name.validation) === null || _args$name$validation2 === void 0 || (_args$name$validation2 = _args$name$validation2.length) === null || _args$name$validation2 === void 0 ? void 0 : _args$name$validation2.min) !== null && _args$name$validation !== void 0 ? _args$name$validation : 0, (_args$name$validation3 = (_args$name$validation4 = args.name.validation) === null || _args$name$validation4 === void 0 || (_args$name$validation4 = _args$name$validation4.length) === null || _args$name$validation4 === void 0 ? void 0 : _args$name$validation4.max) !== null && _args$name$validation3 !== void 0 ? _args$name$validation3 : Infinity, args.name.label, undefined);\n        if (nameMessage !== undefined) {\n            throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(nameMessage);\n        }\n        const slugMessage = (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.at)(value.slug, (_args$slug$validation = (_args$slug2 = args.slug) === null || _args$slug2 === void 0 || (_args$slug2 = _args$slug2.validation) === null || _args$slug2 === void 0 || (_args$slug2 = _args$slug2.length) === null || _args$slug2 === void 0 ? void 0 : _args$slug2.min) !== null && _args$slug$validation !== void 0 ? _args$slug$validation : 1, (_args$slug$validation2 = (_args$slug3 = args.slug) === null || _args$slug3 === void 0 || (_args$slug3 = _args$slug3.validation) === null || _args$slug3 === void 0 || (_args$slug3 = _args$slug3.length) === null || _args$slug3 === void 0 ? void 0 : _args$slug3.max) !== null && _args$slug$validation2 !== void 0 ? _args$slug$validation2 : Infinity, (_args$slug$label = (_args$slug4 = args.slug) === null || _args$slug4 === void 0 ? void 0 : _args$slug4.label) !== null && _args$slug$label !== void 0 ? _args$slug$label : \"Slug\", slugField ? slugField : {\n            slugs: emptySet,\n            glob: \"*\"\n        });\n        if (slugMessage !== undefined) {\n            throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(slugMessage);\n        }\n        return value;\n    }\n    const emptySet = new Set();\n    return {\n        kind: \"form\",\n        formKind: \"slug\",\n        label: args.name.label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.as, {\n                args: args,\n                naiveGenerateSlug: naiveGenerateSlug,\n                defaultValue: defaultValue,\n                ...props\n            });\n        },\n        defaultValue () {\n            return defaultValue;\n        },\n        parse (value, args) {\n            if ((args === null || args === void 0 ? void 0 : args.slug) !== undefined) {\n                return parseAsSlugField(value, args.slug);\n            }\n            return parseSlugFieldAsNormalField(value);\n        },\n        validate,\n        serialize (value) {\n            return {\n                value\n            };\n        },\n        serializeWithSlug (value) {\n            return {\n                value: value.name,\n                slug: value.slug\n            };\n        },\n        reader: {\n            parse (value) {\n                const parsed = parseSlugFieldAsNormalField(value);\n                return validate(parsed);\n            },\n            parseWithSlug (value, args) {\n                return validate(parseAsSlugField(value, args.slug), {\n                    slugField: {\n                        glob: args.glob,\n                        slugs: emptySet\n                    }\n                }).name;\n            }\n        }\n    };\n}\nfunction validateUrl(validation, value, label) {\n    if (value !== null && (typeof value !== \"string\" || !(0,_isValidURL_c29bb1bd_node_react_server_js__WEBPACK_IMPORTED_MODULE_0__.i)(value))) {\n        return `${label} is not a valid URL`;\n    }\n    if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {\n        return `${label} is required`;\n    }\n}\nfunction url({ label, defaultValue, validation, description }) {\n    return (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ae)({\n        label,\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.au, {\n                label: label,\n                description: description,\n                validation: validation,\n                ...props\n            });\n        },\n        defaultValue () {\n            return defaultValue || null;\n        },\n        parse (value) {\n            if (value === undefined) {\n                return null;\n            }\n            if (typeof value !== \"string\") {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(\"Must be a string\");\n            }\n            return value === \"\" ? null : value;\n        },\n        validate (value) {\n            const message = validateUrl(validation, value, label);\n            if (message !== undefined) {\n                throw new _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ad(message);\n            }\n            (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ah)(value, validation, label);\n            return value;\n        },\n        serialize (value) {\n            return {\n                value: value === null ? undefined : value\n            };\n        }\n    });\n}\nfunction blocks(blocks, opts) {\n    const entries = Object.entries(blocks);\n    if (!entries.length) {\n        throw new Error(\"fields.blocks must have at least one entry\");\n    }\n    const select$1 = select({\n        label: \"Kind\",\n        defaultValue: entries[0][0],\n        options: Object.entries(blocks).map(([key, { label }])=>({\n                label,\n                value: key\n            }))\n    });\n    const element = conditional(select$1, Object.fromEntries(entries.map(([key, { schema }])=>[\n            key,\n            schema\n        ])));\n    return {\n        ...array(element, {\n            label: opts.label,\n            description: opts.description,\n            validation: opts.validation,\n            itemLabel (props) {\n                const kind = props.discriminant;\n                const block = blocks[kind];\n                if (!block.itemLabel) return block.label;\n                return block.itemLabel(props.value);\n            }\n        }),\n        Input: _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.av\n    };\n}\nfunction cloudImage({ label, description, validation }) {\n    return {\n        ...(0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.o)({\n            src: (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.aw)({\n                label: \"URL\",\n                validation: {\n                    length: {\n                        min: validation !== null && validation !== void 0 && validation.isRequired ? 1 : 0\n                    }\n                }\n            }),\n            alt: (0,_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.aw)({\n                label: \"Alt text\"\n            }),\n            height: (0,_index_d66ff99d_node_react_server_js__WEBPACK_IMPORTED_MODULE_4__.i)({\n                label: \"Height\"\n            }),\n            width: (0,_index_d66ff99d_node_react_server_js__WEBPACK_IMPORTED_MODULE_4__.i)({\n                label: \"Width\"\n            })\n        }, {\n            label,\n            description\n        }),\n        Input (props) {\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ax, {\n                ...props,\n                isRequired: validation === null || validation === void 0 ? void 0 : validation.isRequired\n            });\n        }\n    };\n}\nvar index = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    array: array,\n    checkbox: checkbox,\n    child: child,\n    conditional: conditional,\n    date: date,\n    datetime: datetime,\n    document: _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.ay,\n    emptyDocument: emptyDocument,\n    empty: empty,\n    image: image,\n    file: file,\n    integer: _index_d66ff99d_node_react_server_js__WEBPACK_IMPORTED_MODULE_4__.i,\n    number: number,\n    multiselect: multiselect,\n    object: _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.o,\n    pathReference: pathReference,\n    relationship: relationship,\n    select: select,\n    slug: slug,\n    text: _index_04c3e71f_node_react_server_js__WEBPACK_IMPORTED_MODULE_2__.aw,\n    url: url,\n    blocks: blocks,\n    cloudImage: cloudImage\n});\nfunction BlockWrapper() {}\nfunction NotEditable() {}\nfunction ToolbarSeparator() {}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@keystatic/core/dist/keystatic-core.node.react-server.js\n");

/***/ })

};
;