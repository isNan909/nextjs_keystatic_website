"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ignore";
exports.ids = ["vendor-chunks/ignore"];
exports.modules = {

/***/ "(rsc)/./node_modules/ignore/index.js":
/*!**************************************!*\
  !*** ./node_modules/ignore/index.js ***!
  \**************************************/
/***/ ((module) => {

eval("// A simple implementation of make-array\n\nfunction makeArray(subject) {\n    return Array.isArray(subject) ? subject : [\n        subject\n    ];\n}\nconst EMPTY = \"\";\nconst SPACE = \" \";\nconst ESCAPE = \"\\\\\";\nconst REGEX_TEST_BLANK_LINE = /^\\s+$/;\nconst REGEX_INVALID_TRAILING_BACKSLASH = /(?:[^\\\\]|^)\\\\$/;\nconst REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\\\!/;\nconst REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\\\#/;\nconst REGEX_SPLITALL_CRLF = /\\r?\\n/g;\n// /foo,\n// ./foo,\n// ../foo,\n// .\n// ..\nconst REGEX_TEST_INVALID_PATH = /^\\.*\\/|^\\.+$/;\nconst SLASH = \"/\";\n// Do not use ternary expression here, since \"istanbul ignore next\" is buggy\nlet TMP_KEY_IGNORE = \"node-ignore\";\n/* istanbul ignore else */ if (typeof Symbol !== \"undefined\") {\n    TMP_KEY_IGNORE = Symbol.for(\"node-ignore\");\n}\nconst KEY_IGNORE = TMP_KEY_IGNORE;\nconst define = (object, key, value)=>Object.defineProperty(object, key, {\n        value\n    });\nconst REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;\nconst RETURN_FALSE = ()=>false;\n// Sanitize the range of a regular expression\n// The cases are complicated, see test cases for details\nconst sanitizeRange = (range)=>range.replace(REGEX_REGEXP_RANGE, (match, from, to)=>from.charCodeAt(0) <= to.charCodeAt(0) ? match : EMPTY);\n// See fixtures #59\nconst cleanRangeBackSlash = (slashes)=>{\n    const { length } = slashes;\n    return slashes.slice(0, length - length % 2);\n};\n// > If the pattern ends with a slash,\n// > it is removed for the purpose of the following description,\n// > but it would only find a match with a directory.\n// > In other words, foo/ will match a directory foo and paths underneath it,\n// > but will not match a regular file or a symbolic link foo\n// >  (this is consistent with the way how pathspec works in general in Git).\n// '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'\n// -> ignore-rules will not deal with it, because it costs extra `fs.stat` call\n//      you could use option `mark: true` with `glob`\n// '`foo/`' should not continue with the '`..`'\nconst REPLACERS = [\n    [\n        // remove BOM\n        // TODO:\n        // Other similar zero-width characters?\n        /^\\uFEFF/,\n        ()=>EMPTY\n    ],\n    // > Trailing spaces are ignored unless they are quoted with backslash (\"\\\")\n    [\n        // (a\\ ) -> (a )\n        // (a  ) -> (a)\n        // (a \\ ) -> (a  )\n        /\\\\?\\s+$/,\n        (match)=>match.indexOf(\"\\\\\") === 0 ? SPACE : EMPTY\n    ],\n    // replace (\\ ) with ' '\n    [\n        /\\\\\\s/g,\n        ()=>SPACE\n    ],\n    // Escape metacharacters\n    // which is written down by users but means special for regular expressions.\n    // > There are 12 characters with special meanings:\n    // > - the backslash \\,\n    // > - the caret ^,\n    // > - the dollar sign $,\n    // > - the period or dot .,\n    // > - the vertical bar or pipe symbol |,\n    // > - the question mark ?,\n    // > - the asterisk or star *,\n    // > - the plus sign +,\n    // > - the opening parenthesis (,\n    // > - the closing parenthesis ),\n    // > - and the opening square bracket [,\n    // > - the opening curly brace {,\n    // > These special characters are often called \"metacharacters\".\n    [\n        /[\\\\$.|*+(){^]/g,\n        (match)=>`\\\\${match}`\n    ],\n    [\n        // > a question mark (?) matches a single character\n        /(?!\\\\)\\?/g,\n        ()=>\"[^/]\"\n    ],\n    // leading slash\n    [\n        // > A leading slash matches the beginning of the pathname.\n        // > For example, \"/*.c\" matches \"cat-file.c\" but not \"mozilla-sha1/sha1.c\".\n        // A leading slash matches the beginning of the pathname\n        /^\\//,\n        ()=>\"^\"\n    ],\n    // replace special metacharacter slash after the leading slash\n    [\n        /\\//g,\n        ()=>\"\\\\/\"\n    ],\n    [\n        // > A leading \"**\" followed by a slash means match in all directories.\n        // > For example, \"**/foo\" matches file or directory \"foo\" anywhere,\n        // > the same as pattern \"foo\".\n        // > \"**/foo/bar\" matches file or directory \"bar\" anywhere that is directly\n        // >   under directory \"foo\".\n        // Notice that the '*'s have been replaced as '\\\\*'\n        /^\\^*\\\\\\*\\\\\\*\\\\\\//,\n        // '**/foo' <-> 'foo'\n        ()=>\"^(?:.*\\\\/)?\"\n    ],\n    // starting\n    [\n        // there will be no leading '/'\n        //   (which has been replaced by section \"leading slash\")\n        // If starts with '**', adding a '^' to the regular expression also works\n        /^(?=[^^])/,\n        function startingReplacer() {\n            // If has a slash `/` at the beginning or middle\n            return !/\\/(?!$)/.test(this) ? \"(?:^|\\\\/)\" : \"^\";\n        }\n    ],\n    // two globstars\n    [\n        // Use lookahead assertions so that we could match more than one `'/**'`\n        /\\\\\\/\\\\\\*\\\\\\*(?=\\\\\\/|$)/g,\n        // Zero, one or several directories\n        // should not use '*', or it will be replaced by the next replacer\n        // Check if it is not the last `'/**'`\n        (_, index, str)=>index + 6 < str.length ? \"(?:\\\\/[^\\\\/]+)*\" : \"\\\\/.+\"\n    ],\n    // normal intermediate wildcards\n    [\n        // Never replace escaped '*'\n        // ignore rule '\\*' will match the path '*'\n        // 'abc.*/' -> go\n        // 'abc.*'  -> skip this rule,\n        //    coz trailing single wildcard will be handed by [trailing wildcard]\n        /(^|[^\\\\]+)(\\\\\\*)+(?=.+)/g,\n        // '*.js' matches '.js'\n        // '*.js' doesn't match 'abc'\n        (_, p1, p2)=>{\n            // 1.\n            // > An asterisk \"*\" matches anything except a slash.\n            // 2.\n            // > Other consecutive asterisks are considered regular asterisks\n            // > and will match according to the previous rules.\n            const unescaped = p2.replace(/\\\\\\*/g, \"[^\\\\/]*\");\n            return p1 + unescaped;\n        }\n    ],\n    [\n        // unescape, revert step 3 except for back slash\n        // For example, if a user escape a '\\\\*',\n        // after step 3, the result will be '\\\\\\\\\\\\*'\n        /\\\\\\\\\\\\(?=[$.|*+(){^])/g,\n        ()=>ESCAPE\n    ],\n    [\n        // '\\\\\\\\' -> '\\\\'\n        /\\\\\\\\/g,\n        ()=>ESCAPE\n    ],\n    [\n        // > The range notation, e.g. [a-zA-Z],\n        // > can be used to match one of the characters in a range.\n        // `\\` is escaped by step 3\n        /(\\\\)?\\[([^\\]/]*?)(\\\\*)($|\\])/g,\n        (match, leadEscape, range, endEscape, close)=>leadEscape === ESCAPE ? `\\\\[${range}${cleanRangeBackSlash(endEscape)}${close}` : close === \"]\" ? endEscape.length % 2 === 0 ? `[${sanitizeRange(range)}${endEscape}]` : \"[]\" : \"[]\"\n    ],\n    // ending\n    [\n        // 'js' will not match 'js.'\n        // 'ab' will not match 'abc'\n        /(?:[^*])$/,\n        // WTF!\n        // https://git-scm.com/docs/gitignore\n        // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)\n        // which re-fixes #24, #38\n        // > If there is a separator at the end of the pattern then the pattern\n        // > will only match directories, otherwise the pattern can match both\n        // > files and directories.\n        // 'js*' will not match 'a.js'\n        // 'js/' will not match 'a.js'\n        // 'js' will match 'a.js' and 'a.js/'\n        (match)=>/\\/$/.test(match) ? `${match}$` : `${match}(?=$|\\\\/$)`\n    ],\n    // trailing wildcard\n    [\n        /(\\^|\\\\\\/)?\\\\\\*$/,\n        (_, p1)=>{\n            const prefix = p1 ? `${p1}[^/]+` : \"[^/]*\";\n            return `${prefix}(?=$|\\\\/$)`;\n        }\n    ]\n];\n// A simple cache, because an ignore rule only has only one certain meaning\nconst regexCache = Object.create(null);\n// @param {pattern}\nconst makeRegex = (pattern, ignoreCase)=>{\n    let source = regexCache[pattern];\n    if (!source) {\n        source = REPLACERS.reduce((prev, current)=>prev.replace(current[0], current[1].bind(pattern)), pattern);\n        regexCache[pattern] = source;\n    }\n    return ignoreCase ? new RegExp(source, \"i\") : new RegExp(source);\n};\nconst isString = (subject)=>typeof subject === \"string\";\n// > A blank line matches no files, so it can serve as a separator for readability.\nconst checkPattern = (pattern)=>pattern && isString(pattern) && !REGEX_TEST_BLANK_LINE.test(pattern) && !REGEX_INVALID_TRAILING_BACKSLASH.test(pattern) && pattern.indexOf(\"#\") !== 0;\nconst splitPattern = (pattern)=>pattern.split(REGEX_SPLITALL_CRLF);\nclass IgnoreRule {\n    constructor(origin, pattern, negative, regex){\n        this.origin = origin;\n        this.pattern = pattern;\n        this.negative = negative;\n        this.regex = regex;\n    }\n}\nconst createRule = (pattern, ignoreCase)=>{\n    const origin = pattern;\n    let negative = false;\n    // > An optional prefix \"!\" which negates the pattern;\n    if (pattern.indexOf(\"!\") === 0) {\n        negative = true;\n        pattern = pattern.substr(1);\n    }\n    pattern = pattern// > Put a backslash (\"\\\") in front of the first \"!\" for patterns that\n    // >   begin with a literal \"!\", for example, `\"\\!important!.txt\"`.\n    .replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, \"!\")// > Put a backslash (\"\\\") in front of the first hash for patterns that\n    // >   begin with a hash.\n    .replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, \"#\");\n    const regex = makeRegex(pattern, ignoreCase);\n    return new IgnoreRule(origin, pattern, negative, regex);\n};\nconst throwError = (message, Ctor)=>{\n    throw new Ctor(message);\n};\nconst checkPath = (path, originalPath, doThrow)=>{\n    if (!isString(path)) {\n        return doThrow(`path must be a string, but got \\`${originalPath}\\``, TypeError);\n    }\n    // We don't know if we should ignore EMPTY, so throw\n    if (!path) {\n        return doThrow(`path must not be empty`, TypeError);\n    }\n    // Check if it is a relative path\n    if (checkPath.isNotRelative(path)) {\n        const r = \"`path.relative()`d\";\n        return doThrow(`path should be a ${r} string, but got \"${originalPath}\"`, RangeError);\n    }\n    return true;\n};\nconst isNotRelative = (path)=>REGEX_TEST_INVALID_PATH.test(path);\ncheckPath.isNotRelative = isNotRelative;\ncheckPath.convert = (p)=>p;\nclass Ignore {\n    constructor({ ignorecase = true, ignoreCase = ignorecase, allowRelativePaths = false } = {}){\n        define(this, KEY_IGNORE, true);\n        this._rules = [];\n        this._ignoreCase = ignoreCase;\n        this._allowRelativePaths = allowRelativePaths;\n        this._initCache();\n    }\n    _initCache() {\n        this._ignoreCache = Object.create(null);\n        this._testCache = Object.create(null);\n    }\n    _addPattern(pattern) {\n        // #32\n        if (pattern && pattern[KEY_IGNORE]) {\n            this._rules = this._rules.concat(pattern._rules);\n            this._added = true;\n            return;\n        }\n        if (checkPattern(pattern)) {\n            const rule = createRule(pattern, this._ignoreCase);\n            this._added = true;\n            this._rules.push(rule);\n        }\n    }\n    // @param {Array<string> | string | Ignore} pattern\n    add(pattern) {\n        this._added = false;\n        makeArray(isString(pattern) ? splitPattern(pattern) : pattern).forEach(this._addPattern, this);\n        // Some rules have just added to the ignore,\n        // making the behavior changed.\n        if (this._added) {\n            this._initCache();\n        }\n        return this;\n    }\n    // legacy\n    addPattern(pattern) {\n        return this.add(pattern);\n    }\n    //          |           ignored : unignored\n    // negative |   0:0   |   0:1   |   1:0   |   1:1\n    // -------- | ------- | ------- | ------- | --------\n    //     0    |  TEST   |  TEST   |  SKIP   |    X\n    //     1    |  TESTIF |  SKIP   |  TEST   |    X\n    // - SKIP: always skip\n    // - TEST: always test\n    // - TESTIF: only test if checkUnignored\n    // - X: that never happen\n    // @param {boolean} whether should check if the path is unignored,\n    //   setting `checkUnignored` to `false` could reduce additional\n    //   path matching.\n    // @returns {TestResult} true if a file is ignored\n    _testOne(path, checkUnignored) {\n        let ignored = false;\n        let unignored = false;\n        this._rules.forEach((rule)=>{\n            const { negative } = rule;\n            if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {\n                return;\n            }\n            const matched = rule.regex.test(path);\n            if (matched) {\n                ignored = !negative;\n                unignored = negative;\n            }\n        });\n        return {\n            ignored,\n            unignored\n        };\n    }\n    // @returns {TestResult}\n    _test(originalPath, cache, checkUnignored, slices) {\n        const path = originalPath && checkPath.convert(originalPath);\n        checkPath(path, originalPath, this._allowRelativePaths ? RETURN_FALSE : throwError);\n        return this._t(path, cache, checkUnignored, slices);\n    }\n    _t(path, cache, checkUnignored, slices) {\n        if (path in cache) {\n            return cache[path];\n        }\n        if (!slices) {\n            // path/to/a.js\n            // ['path', 'to', 'a.js']\n            slices = path.split(SLASH);\n        }\n        slices.pop();\n        // If the path has no parent directory, just test it\n        if (!slices.length) {\n            return cache[path] = this._testOne(path, checkUnignored);\n        }\n        const parent = this._t(slices.join(SLASH) + SLASH, cache, checkUnignored, slices);\n        // If the path contains a parent directory, check the parent first\n        return cache[path] = parent.ignored ? parent : this._testOne(path, checkUnignored);\n    }\n    ignores(path) {\n        return this._test(path, this._ignoreCache, false).ignored;\n    }\n    createFilter() {\n        return (path)=>!this.ignores(path);\n    }\n    filter(paths) {\n        return makeArray(paths).filter(this.createFilter());\n    }\n    // @returns {TestResult}\n    test(path) {\n        return this._test(path, this._testCache, true);\n    }\n}\nconst factory = (options)=>new Ignore(options);\nconst isPathValid = (path)=>checkPath(path && checkPath.convert(path), path, RETURN_FALSE);\nfactory.isPathValid = isPathValid;\n// Fixes typescript\nfactory.default = factory;\nmodule.exports = factory;\n// Windows\n// --------------------------------------------------------------\n/* istanbul ignore if */ if (// Detect `process` so that it can run in browsers.\ntypeof process !== \"undefined\" && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === \"win32\")) {\n    /* eslint no-control-regex: \"off\" */ const makePosix = (str)=>/^\\\\\\\\\\?\\\\/.test(str) || /[\"<>|\\u0000-\\u001F]+/u.test(str) ? str : str.replace(/\\\\/g, \"/\");\n    checkPath.convert = makePosix;\n    // 'C:\\\\foo'     <- 'C:\\\\foo' has been converted to 'C:/'\n    // 'd:\\\\foo'\n    const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\\//i;\n    checkPath.isNotRelative = (path)=>REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path) || isNotRelative(path);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ignore/index.js\n");

/***/ })

};
;